!Device
part_number: STM32G0B1
architecture: ARM Cortex-M
bit_width: 32
endianness: little
modules:
- !Module
  name: CRC
  description: "Cyclic redundancy check calculation\n      unit"
  base_addr: 0x40023000
  size: 0x400
  registers:
  - !Register
    name: CRC_DR
    addr: 0x0
    size_bits: 32
    description: Data register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: DR
      bit_offset: 0
      bit_width: 32
      description: Data register bits
  - !Register
    name: CRC_IDR
    addr: 0x4
    size_bits: 32
    description: Independent data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IDR
      bit_offset: 0
      bit_width: 32
      description: "General-purpose 32-bit data register\n              bits"
  - !Register
    name: CRC_CR
    addr: 0x8
    size_bits: 32
    description: Control register
    fields:
    - !Field
      name: REV_OUT
      bit_offset: 7
      bit_width: 1
      description: 'Reverse output data

        This bit controls the reversal of the bit order of the output data.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: REV_IN
      bit_offset: 5
      bit_width: 2
      description: 'Reverse input data

        These bits control the reversal of the bit order of the input data'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: POLYSIZE
      bit_offset: 3
      bit_width: 2
      description: 'Polynomial size

        These bits control the size of the polynomial.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RESET
      bit_offset: 0
      bit_width: 1
      description: RESET bit
      read_allowed: false
      write_allowed: true
  - !Register
    name: CRC_INIT
    addr: 0x10
    size_bits: 32
    description: Initial CRC value
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: CRC_INIT
      bit_offset: 0
      bit_width: 32
      description: "Programmable initial CRC\n              value"
  - !Register
    name: CRC_POL
    addr: 0x14
    size_bits: 32
    description: polynomial
    read_allowed: true
    write_allowed: true
    reset_value: 0x4c11db7
    fields:
    - !Field
      name: POL
      bit_offset: 0
      bit_width: 32
      description: Programmable polynomial
- !Module
  name: DAC
  description: DAC
  base_addr: 0x40007400
  size: 0x400
  registers:
  - !Register
    name: DAC_CR
    addr: 0x0
    size_bits: 32
    description: DAC control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EN1
      bit_offset: 0
      bit_width: 1
      description: 'DAC channel1 enable

        This bit is set and cleared by software to enable/disable DAC channel1.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TEN1
      bit_offset: 1
      bit_width: 1
      description: 'DAC channel1 trigger enable

        This bit is set and cleared by software to enable/disable DAC channel1 trigger.

        Note: When software trigger is selected, the transfer from the DAC_DHR1 register
        to the DAC_DOR1 register takes only one dac_pclk clock cycle.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TSEL1
      bit_offset: 2
      bit_width: 4
      description: 'DAC channel1 trigger selection

        These bits select the external event used to trigger DAC channel1

        ...

        Refer to the trigger selection tables in  for details on trigger configuration
        and mapping.

        Note: Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        15: B_0xF
    - !Field
      name: WAVE1
      bit_offset: 6
      bit_width: 2
      description: 'DAC channel1 noise/triangle wave generation enable

        These bits are set and cleared by software.

        1x: Triangle wave generation enabled

        Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MAMP1
      bit_offset: 8
      bit_width: 4
      description: "DAC channel1 mask/amplitude selector\nThese bits are written by\
        \ software to select mask in wave generation mode or amplitude in triangle\
        \ generation mode.\n\u2265 1011: Unmask bits[11:0] of LFSR/ triangle amplitude\
        \ equal to 4095"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
    - !Field
      name: DMAEN1
      bit_offset: 12
      bit_width: 1
      description: 'DAC channel1 DMA enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAUDRIE1
      bit_offset: 13
      bit_width: 1
      description: 'DAC channel1 DMA Underrun Interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CEN1
      bit_offset: 14
      bit_width: 1
      description: 'DAC channel1 calibration enable

        This bit is set and cleared by software to enable/disable DAC channel1 calibration,
        it can be written only if bit EN1=0 into DAC_CR (the calibration mode can
        be entered/exit only when the DAC channel is disabled) Otherwise, the write
        operation is ignored.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EN2
      bit_offset: 16
      bit_width: 1
      description: 'DAC channel2 enable

        This bit is set and cleared by software to enable/disable DAC channel2.

        Note: These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TEN2
      bit_offset: 17
      bit_width: 1
      description: 'DAC channel2 trigger enable

        This bit is set and cleared by software to enable/disable DAC channel2 trigger

        Note: When software trigger is selected, the transfer from the DAC_DHR2 register
        to the DAC_DOR2 register takes only one dac_pclk clock cycle.

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TSEL2
      bit_offset: 18
      bit_width: 4
      description: 'DAC channel2 trigger selection

        These bits select the external event used to trigger DAC channel2

        ...

        Refer to the trigger selection tables in  for details on trigger configuration
        and mapping.

        Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled).

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        15: B_0xF
    - !Field
      name: WAVE2
      bit_offset: 22
      bit_width: 2
      description: 'DAC channel2 noise/triangle wave generation enable

        These bits are set/reset by software.

        1x: Triangle wave generation enabled

        Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled)

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MAMP2
      bit_offset: 24
      bit_width: 4
      description: "DAC channel2 mask/amplitude selector\nThese bits are written by\
        \ software to select mask in wave generation mode or amplitude in triangle\
        \ generation mode.\n\u2265 1011: Unmask bits[11:0] of LFSR/ triangle amplitude\
        \ equal to 4095\nNote: These bits are available only on dual-channel DACs.\
        \ Refer to implementation."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
    - !Field
      name: DMAEN2
      bit_offset: 28
      bit_width: 1
      description: 'DAC channel2 DMA enable

        This bit is set and cleared by software.

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAUDRIE2
      bit_offset: 29
      bit_width: 1
      description: 'DAC channel2 DMA underrun interrupt enable

        This bit is set and cleared by software.

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CEN2
      bit_offset: 30
      bit_width: 1
      description: 'DAC channel2 calibration enable

        This bit is set and cleared by software to enable/disable DAC channel2 calibration,
        it can be written only if EN2 bit is set to 0 into DAC_CR (the calibration
        mode can be entered/exit only when the DAC channel is disabled) Otherwise,
        the write operation is ignored.

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DAC_SWTRGR
    addr: 0x4
    size_bits: 32
    description: DAC software trigger register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: SWTRIG1
      bit_offset: 0
      bit_width: 1
      description: 'DAC channel1 software trigger

        This bit is set by software to trigger the DAC in software trigger mode.

        Note: This bit is cleared by hardware (one dac_pclk clock cycle later) once
        the DAC_DHR1 register value has been loaded into the DAC_DOR1 register.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWTRIG2
      bit_offset: 1
      bit_width: 1
      description: 'DAC channel2 software trigger

        This bit is set by software to trigger the DAC in software trigger mode.

        Note: This bit is cleared by hardware (one dac_pclk clock cycle later) once
        the DAC_DHR2 register value has been loaded into the DAC_DOR2 register.

        This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DAC_DHR12R1
    addr: 0x8
    size_bits: 32
    description: "DAC channel1 12-bit right-aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 0
      bit_width: 12
      description: 'DAC channel1 12-bit right-aligned data

        These bits are written by software. They specify 12-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR12L1
    addr: 0xc
    size_bits: 32
    description: "DAC channel1 12-bit left aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 4
      bit_width: 12
      description: 'DAC channel1 12-bit left-aligned data

        These bits are written by software.

        They specify 12-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR8R1
    addr: 0x10
    size_bits: 32
    description: "DAC channel1 8-bit right aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 0
      bit_width: 8
      description: 'DAC channel1 8-bit right-aligned data

        These bits are written by software. They specify 8-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR12R2
    addr: 0x14
    size_bits: 32
    description: "DAC channel2 12-bit right aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC2DHR
      bit_offset: 0
      bit_width: 12
      description: 'DAC channel2 12-bit right-aligned data

        These bits are written by software. They specify 12-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR12L2
    addr: 0x18
    size_bits: 32
    description: "DAC channel2 12-bit left aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC2DHR
      bit_offset: 4
      bit_width: 12
      description: 'DAC channel2 12-bit left-aligned data

        These bits are written by software which specify 12-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR8R2
    addr: 0x1c
    size_bits: 32
    description: "DAC channel2 8-bit right-aligned data\n          holding register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC2DHR
      bit_offset: 0
      bit_width: 8
      description: 'DAC channel2 8-bit right-aligned data

        These bits are written by software which specifies 8-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR12RD
    addr: 0x20
    size_bits: 32
    description: "Dual DAC 12-bit right-aligned data holding\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 0
      bit_width: 12
      description: 'DAC channel1 12-bit right-aligned data

        These bits are written by software which specifies 12-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: DACC2DHR
      bit_offset: 16
      bit_width: 12
      description: 'DAC channel2 12-bit right-aligned data

        These bits are written by software which specifies 12-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR12LD
    addr: 0x24
    size_bits: 32
    description: "DUAL DAC 12-bit left aligned data holding\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 4
      bit_width: 12
      description: 'DAC channel1 12-bit left-aligned data

        These bits are written by software which specifies 12-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: DACC2DHR
      bit_offset: 20
      bit_width: 12
      description: 'DAC channel2 12-bit left-aligned data

        These bits are written by software which specifies 12-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DHR8RD
    addr: 0x28
    size_bits: 32
    description: "DUAL DAC 8-bit right aligned data holding\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DACC1DHR
      bit_offset: 0
      bit_width: 8
      description: 'DAC channel1 8-bit right-aligned data

        These bits are written by software which specifies 8-bit data for DAC channel1.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: DACC2DHR
      bit_offset: 8
      bit_width: 8
      description: 'DAC channel2 8-bit right-aligned data

        These bits are written by software which specifies 8-bit data for DAC channel2.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_DOR1
    addr: 0x2c
    size_bits: 32
    description: "DAC channel1 data output\n          register"
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: DACC1DOR
      bit_offset: 0
      bit_width: 12
      description: 'DAC channel1 data output

        These bits are read-only, they contain data output for DAC channel1.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: DAC_DOR2
    addr: 0x30
    size_bits: 32
    description: "DAC channel2 data output\n          register"
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: DACC2DOR
      bit_offset: 0
      bit_width: 12
      description: 'DAC channel2 data output

        These bits are read-only, they contain data output for DAC channel2.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: DAC_SR
    addr: 0x34
    size_bits: 32
    description: DAC status register
    fields:
    - !Field
      name: DMAUDR1
      bit_offset: 13
      bit_width: 1
      description: 'DAC channel1 DMA underrun flag

        This bit is set by hardware and cleared by software (by writing it to 1).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CAL_FLAG1
      bit_offset: 14
      bit_width: 1
      description: 'DAC channel1 calibration offset status

        This bit is set and cleared by hardware'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BWST1
      bit_offset: 15
      bit_width: 1
      description: 'DAC channel1 busy writing sample time flag

        This bit is systematically set just after Sample and hold mode enable and
        is set each time the software writes the register DAC_SHSR1, It is cleared
        by hardware when the write operation of DAC_SHSR1 is complete. (It takes about
        3 LSI periods of synchronization).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAUDR2
      bit_offset: 29
      bit_width: 1
      description: 'DAC channel2 DMA underrun flag

        This bit is set by hardware and cleared by software (by writing it to 1).

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CAL_FLAG2
      bit_offset: 30
      bit_width: 1
      description: 'DAC channel2 calibration offset status

        This bit is set and cleared by hardware

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BWST2
      bit_offset: 31
      bit_width: 1
      description: 'DAC channel2 busy writing sample time flag

        This bit is systematically set just after Sample and hold mode enable. It
        is set each time the software writes the register DAC_SHSR2, It is cleared
        by hardware when the write operation of DAC_SHSR2 is complete. (It takes about
        3 LSI periods of synchronization).

        Note: This bit is available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DAC_CCR
    addr: 0x38
    size_bits: 32
    description: "DAC calibration control\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OTRIM1
      bit_offset: 0
      bit_width: 5
      description: DAC channel1 offset trimming value
      read_allowed: true
      write_allowed: true
    - !Field
      name: OTRIM2
      bit_offset: 16
      bit_width: 5
      description: 'DAC channel2 offset trimming value

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_MCR
    addr: 0x3c
    size_bits: 32
    description: DAC mode control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: MODE1
      bit_offset: 0
      bit_width: 3
      description: 'DAC channel1 mode

        These bits can be written only when the DAC is disabled and not in the calibration
        mode (when bit EN1=0 and bit CEN1 =0 in the DAC_CR register). If EN1=1 or
        CEN1 =1 the write operation is ignored.

        They can be set and cleared by software to select the DAC channel1 mode:

        DAC channel1 in Normal mode

        DAC channel1 in sample & hold mode

        Note: This register can be modified only when EN1=0.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: MODE2
      bit_offset: 16
      bit_width: 3
      description: 'DAC channel2 mode

        These bits can be written only when the DAC is disabled and not in the calibration
        mode (when bit EN2=0 and bit CEN2 =0 in the DAC_CR register). If EN2=1 or
        CEN2 =1 the write operation is ignored.

        They can be set and cleared by software to select the DAC channel2 mode:

        DAC channel2 in Normal mode

        DAC channel2 in Sample and hold mode

        Note: This register can be modified only when EN2=0.

        Refer to  for the availability of DAC channel2.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: DAC_SHSR1
    addr: 0x40
    size_bits: 32
    description: "DAC Sample and Hold sample time register\n          1"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TSAMPLE1
      bit_offset: 0
      bit_width: 10
      description: 'DAC channel1 sample time (only valid in Sample and hold mode)

        These bits can be written when the DAC channel1 is disabled or also during
        normal operation. in the latter case, the write can be done only when BWST1
        of DAC_SR register is low, If BWST1=1, the write operation is ignored.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_SHSR2
    addr: 0x44
    size_bits: 32
    description: "DAC Sample and Hold sample time register\n          2"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TSAMPLE2
      bit_offset: 0
      bit_width: 10
      description: 'DAC channel2 sample time (only valid in Sample and hold mode)

        These bits can be written when the DAC channel2 is disabled or also during
        normal operation. in the latter case, the write can be done only when BWST2
        of DAC_SR register is low, if BWST2=1, the write operation is ignored.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_SHHR
    addr: 0x48
    size_bits: 32
    description: "DAC Sample and Hold hold time\n          register"
    read_allowed: true
    write_allowed: true
    reset_value: 0x10001
    fields:
    - !Field
      name: THOLD1
      bit_offset: 0
      bit_width: 10
      description: 'DAC channel1 hold time (only valid in Sample and hold mode)

        Hold time= (THOLD[9:0]) x LSI clock period

        Note: This register can be modified only when EN1=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: THOLD2
      bit_offset: 16
      bit_width: 10
      description: 'DAC channel2 hold time (only valid in Sample and hold mode).

        Hold time= (THOLD[9:0]) x LSI clock period

        Note: This register can be modified only when EN2=0.

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DAC_SHRR
    addr: 0x4c
    size_bits: 32
    description: "DAC Sample and Hold refresh time\n          register"
    read_allowed: true
    write_allowed: true
    reset_value: 0x10001
    fields:
    - !Field
      name: TREFRESH1
      bit_offset: 0
      bit_width: 8
      description: 'DAC channel1 refresh time (only valid in Sample and hold mode)

        Refresh time= (TREFRESH[7:0]) x LSI clock period

        Note: This register can be modified only when EN1=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TREFRESH2
      bit_offset: 16
      bit_width: 8
      description: 'DAC channel2 refresh time (only valid in Sample and hold mode)

        Refresh time= (TREFRESH[7:0]) x LSI clock period

        Note: This register can be modified only when EN2=0.

        These bits are available only on dual-channel DACs. Refer to implementation.'
      read_allowed: true
      write_allowed: true
- !Module
  name: DBG
  description: Debug support
  base_addr: 0x40015800
  size: 0x400
  registers:
  - !Register
    name: IDCODE
    addr: 0x0
    size_bits: 32
    description: MCU Device ID Code Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: DEV_ID
      bit_offset: 0
      bit_width: 12
      description: Device Identifier
    - !Field
      name: REV_ID
      bit_offset: 16
      bit_width: 16
      description: Revision Identifier
  - !Register
    name: DBG_CR
    addr: 0x4
    size_bits: 32
    description: 'DBG configuration register '
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBG_STOP
      bit_offset: 1
      bit_width: 1
      description: 'Debug Stop mode

        Debug options in Stop mode.

        Upon Stop mode exit, the software must re-establish the desired clock configuration.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_STANDBY
      bit_offset: 2
      bit_width: 1
      description: 'Debug Standby and Shutdown modes

        Debug options in Standby or Shutdown mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DBG_APB_FZ1
    addr: 0x8
    size_bits: 32
    description: 'DBG APB freeze register 1 '
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBG_TIM2_STOP
      bit_offset: 0
      bit_width: 1
      description: 'Clocking of TIM2 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM2 when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM3_STOP
      bit_offset: 1
      bit_width: 1
      description: 'Clocking of TIM3 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM3 when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM6_STOP
      bit_offset: 4
      bit_width: 1
      description: 'Clocking of TIM6 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM6 when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM7_STOP
      bit_offset: 5
      bit_width: 1
      description: 'Clocking of TIM7 counter when the core is halted.

        This bit enables/disables the clock to the counter of ITIM7 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_RTC_STOP
      bit_offset: 10
      bit_width: 1
      description: 'Clocking of RTC counter when the core is halted

        This bit enables/disables the clock to the counter of RTC when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_WWDG_STOP
      bit_offset: 11
      bit_width: 1
      description: 'Clocking of WWDG counter when the core is halted

        This bit enables/disables the clock to the counter of WWDG when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_IWDG_STOP
      bit_offset: 12
      bit_width: 1
      description: 'Clocking of IWDG counter when the core is halted

        This bit enables/disables the clock to the counter of IWDG when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_I2C1_SMBUS_TIMEOUT
      bit_offset: 21
      bit_width: 1
      description: SMBUS timeout when core is halted
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_LPTIM2_STOP
      bit_offset: 30
      bit_width: 1
      description: 'Clocking of LPTIMER2 counter when the core is halted

        This bit enables/disables the clock to the counter of LPTIMER2 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_LPTIM1_STOP
      bit_offset: 31
      bit_width: 1
      description: 'Clocking of LPTIMER1 counter when the core is halted

        This bit enables/disables the clock to the counter of LPTIMER1 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DBG_APB_FZ2
    addr: 0xc
    size_bits: 32
    description: 'DBG APB freeze register 2 '
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBG_TIM1_STOP
      bit_offset: 11
      bit_width: 1
      description: 'Clocking of TIM1 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM1 when the core is
        halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM14_STOP
      bit_offset: 15
      bit_width: 1
      description: 'Clocking of TIM14 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM14 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM15_STOP
      bit_offset: 16
      bit_width: 1
      description: 'Clocking of TIM15 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM15 when the core
        is halted:

        Only available on STM32G071xx and STM32G081xx, reserved on STM32G031xx and
        STM32G041xx.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM16_STOP
      bit_offset: 17
      bit_width: 1
      description: 'Clocking of TIM16 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM16 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DBG_TIM17_STOP
      bit_offset: 18
      bit_width: 1
      description: 'Clocking of TIM17 counter when the core is halted

        This bit enables/disables the clock to the counter of TIM17 when the core
        is halted:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
- !Module
  name: DMAMUX
  description: DMAMUX
  base_addr: 0x40020800
  size: 0x800
  registers:
  - !Register
    name: DMAMUX_C0CR
    addr: 0x0
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C1CR
    addr: 0x4
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C2CR
    addr: 0x8
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C3CR
    addr: 0xc
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C4CR
    addr: 0x10
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C5CR
    addr: 0x14
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_C6CR
    addr: 0x18
    size_bits: 32
    description: DMAMUX request line multiplexer channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAREQ_ID
      bit_offset: 0
      bit_width: 6
      description: "DMA request identification\n\tSelects the input DMA request. See\
        \ the DMAMUX table about assignments of multiplexer inputs to resources."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SOIE
      bit_offset: 8
      bit_width: 1
      description: Synchronization overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EGE
      bit_offset: 9
      bit_width: 1
      description: Event generation enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SE
      bit_offset: 16
      bit_width: 1
      description: Synchronization enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SPOL
      bit_offset: 17
      bit_width: 2
      description: "Synchronization polarity\n\tDefines the edge polarity of the selected\
        \ synchronization input:"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: NBREQ
      bit_offset: 19
      bit_width: 5
      description: "Number of DMA requests minus 1 to forward\n\tDefines the number\
        \ of DMA requests to forward to the DMA controller after a synchronization\
        \ event, and/or the number of DMA requests before an output event is generated.\n\
        \tThis field shall only be written when both SE and EGE bits are low."
      read_allowed: true
      write_allowed: true
    - !Field
      name: SYNC_ID
      bit_offset: 24
      bit_width: 5
      description: "Synchronization identification\n\tSelects the synchronization\
        \ input (see inputs to resources STM32G0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_CSR
    addr: 0x80
    size_bits: 32
    description: DMAMUX request line multiplexer interrupt channel status register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: SOF0
      bit_offset: 0
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF1
      bit_offset: 1
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF2
      bit_offset: 2
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF3
      bit_offset: 3
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF4
      bit_offset: 4
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF5
      bit_offset: 5
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: SOF6
      bit_offset: 6
      bit_width: 1
      description: "Synchronization overrun event flag\n\tThe flag is set when a synchronization\
        \ event occurs on a DMA request line multiplexer channel x, while the DMA\
        \ request counter value is lower than NBREQ.\n\tThe flag is cleared by writing\
        \ 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
      read_allowed: true
      write_allowed: false
  - !Register
    name: DMAMUX_CFR
    addr: 0x84
    size_bits: 32
    description: DMAMUX request line multiplexer interrupt clear flag register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: CSOF0
      bit_offset: 0
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF1
      bit_offset: 1
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF2
      bit_offset: 2
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF3
      bit_offset: 3
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF4
      bit_offset: 4
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF5
      bit_offset: 5
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CSOF6
      bit_offset: 6
      bit_width: 1
      description: 'Clear synchronization overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        register.'
      read_allowed: false
      write_allowed: true
  - !Register
    name: DMAMUX_RG0CR
    addr: 0x100
    size_bits: 32
    description: DMAMUX request generator channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SIG_ID
      bit_offset: 0
      bit_width: 5
      description: 'Signal identification

        Selects the DMA request trigger input used for the channel x of the DMA request
        generator'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIE
      bit_offset: 8
      bit_width: 1
      description: Trigger overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GE
      bit_offset: 16
      bit_width: 1
      description: DMA request generator channel x enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GPOL
      bit_offset: 17
      bit_width: 2
      description: 'DMA request generator trigger polarity

        Defines the edge polarity of the selected trigger input'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: GNBREQ
      bit_offset: 19
      bit_width: 5
      description: 'Number of DMA requests to be generated (minus 1)

        Defines the number of DMA requests to be generated after a trigger event.
        The actual number of generated DMA requests is GNBREQ +1.

        Note: This field shall only be written when GE bit is disabled.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_RG1CR
    addr: 0x104
    size_bits: 32
    description: DMAMUX request generator channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SIG_ID
      bit_offset: 0
      bit_width: 5
      description: 'Signal identification

        Selects the DMA request trigger input used for the channel x of the DMA request
        generator'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIE
      bit_offset: 8
      bit_width: 1
      description: Trigger overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GE
      bit_offset: 16
      bit_width: 1
      description: DMA request generator channel x enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GPOL
      bit_offset: 17
      bit_width: 2
      description: 'DMA request generator trigger polarity

        Defines the edge polarity of the selected trigger input'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: GNBREQ
      bit_offset: 19
      bit_width: 5
      description: 'Number of DMA requests to be generated (minus 1)

        Defines the number of DMA requests to be generated after a trigger event.
        The actual number of generated DMA requests is GNBREQ +1.

        Note: This field shall only be written when GE bit is disabled.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_RG2CR
    addr: 0x108
    size_bits: 32
    description: DMAMUX request generator channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SIG_ID
      bit_offset: 0
      bit_width: 5
      description: 'Signal identification

        Selects the DMA request trigger input used for the channel x of the DMA request
        generator'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIE
      bit_offset: 8
      bit_width: 1
      description: Trigger overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GE
      bit_offset: 16
      bit_width: 1
      description: DMA request generator channel x enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GPOL
      bit_offset: 17
      bit_width: 2
      description: 'DMA request generator trigger polarity

        Defines the edge polarity of the selected trigger input'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: GNBREQ
      bit_offset: 19
      bit_width: 5
      description: 'Number of DMA requests to be generated (minus 1)

        Defines the number of DMA requests to be generated after a trigger event.
        The actual number of generated DMA requests is GNBREQ +1.

        Note: This field shall only be written when GE bit is disabled.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_RG3CR
    addr: 0x10c
    size_bits: 32
    description: DMAMUX request generator channel x configuration register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SIG_ID
      bit_offset: 0
      bit_width: 5
      description: 'Signal identification

        Selects the DMA request trigger input used for the channel x of the DMA request
        generator'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIE
      bit_offset: 8
      bit_width: 1
      description: Trigger overrun interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GE
      bit_offset: 16
      bit_width: 1
      description: DMA request generator channel x enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GPOL
      bit_offset: 17
      bit_width: 2
      description: 'DMA request generator trigger polarity

        Defines the edge polarity of the selected trigger input'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: GNBREQ
      bit_offset: 19
      bit_width: 5
      description: 'Number of DMA requests to be generated (minus 1)

        Defines the number of DMA requests to be generated after a trigger event.
        The actual number of generated DMA requests is GNBREQ +1.

        Note: This field shall only be written when GE bit is disabled.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DMAMUX_RGSR
    addr: 0x140
    size_bits: 32
    description: DMAMUX request generator interrupt status register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: OF0
      bit_offset: 0
      bit_width: 1
      description: 'Trigger overrun event flag

        The flag is set when a new trigger event occurs on DMA request generator channel
        x, before the request counter underrun (the internal request counter programmed
        via the GNBREQ field of the DMAMUX_RGxCR register).

        The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: OF1
      bit_offset: 1
      bit_width: 1
      description: 'Trigger overrun event flag

        The flag is set when a new trigger event occurs on DMA request generator channel
        x, before the request counter underrun (the internal request counter programmed
        via the GNBREQ field of the DMAMUX_RGxCR register).

        The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: OF2
      bit_offset: 2
      bit_width: 1
      description: 'Trigger overrun event flag

        The flag is set when a new trigger event occurs on DMA request generator channel
        x, before the request counter underrun (the internal request counter programmed
        via the GNBREQ field of the DMAMUX_RGxCR register).

        The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: OF3
      bit_offset: 3
      bit_width: 1
      description: 'Trigger overrun event flag

        The flag is set when a new trigger event occurs on DMA request generator channel
        x, before the request counter underrun (the internal request counter programmed
        via the GNBREQ field of the DMAMUX_RGxCR register).

        The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        register.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: DMAMUX_RGCFR
    addr: 0x144
    size_bits: 32
    description: DMAMUX request generator interrupt clear flag register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: COF0
      bit_offset: 0
      bit_width: 1
      description: 'Clear trigger overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: COF1
      bit_offset: 1
      bit_width: 1
      description: 'Clear trigger overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: COF2
      bit_offset: 2
      bit_width: 1
      description: 'Clear trigger overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR
        register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: COF3
      bit_offset: 3
      bit_width: 1
      description: 'Clear trigger overrun event flag

        Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR
        register.'
      read_allowed: false
      write_allowed: true
- !Module
  name: GPIOA
  description: General-purpose I/Os
  base_addr: 0x50000000
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xebffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    reset_value: 0xc000000
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    reset_value: 0x24000000
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: GPIOB
  description: General-purpose I/Os
  base_addr: 0x50000400
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: GPIOC
  description: General-purpose I/Os
  base_addr: 0x50000800
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: GPIOD
  description: General-purpose I/Os
  base_addr: 0x50000c00
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: GPIOE
  description: General-purpose I/Os
  base_addr: 0x50001000
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: GPIOF
  description: General-purpose I/Os
  base_addr: 0x50001400
  size: 0x400
  registers:
  - !Register
    name: MODER
    addr: 0x0
    size_bits: 32
    description: GPIO port mode register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: MODER15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: MODER0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OTYPER
    addr: 0x4
    size_bits: 32
    description: GPIO port output type register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OT15
      bit_offset: 15
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT14
      bit_offset: 14
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT13
      bit_offset: 13
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT12
      bit_offset: 12
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT11
      bit_offset: 11
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT10
      bit_offset: 10
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT9
      bit_offset: 9
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT8
      bit_offset: 8
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT7
      bit_offset: 7
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT6
      bit_offset: 6
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT5
      bit_offset: 5
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT4
      bit_offset: 4
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT3
      bit_offset: 3
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT2
      bit_offset: 2
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT1
      bit_offset: 1
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OT0
      bit_offset: 0
      bit_width: 1
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: OSPEEDR
    addr: 0x8
    size_bits: 32
    description: "GPIO port output speed\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OSPEEDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: OSPEEDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: PUPDR
    addr: 0xc
    size_bits: 32
    description: "GPIO port pull-up/pull-down\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PUPDR15
      bit_offset: 30
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR14
      bit_offset: 28
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR13
      bit_offset: 26
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR12
      bit_offset: 24
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR11
      bit_offset: 22
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR10
      bit_offset: 20
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR9
      bit_offset: 18
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR8
      bit_offset: 16
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR7
      bit_offset: 14
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR6
      bit_offset: 12
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR5
      bit_offset: 10
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR4
      bit_offset: 8
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR3
      bit_offset: 6
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR2
      bit_offset: 4
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR1
      bit_offset: 2
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
    - !Field
      name: PUPDR0
      bit_offset: 0
      bit_width: 2
      description: "Port x configuration bits (y =\n              0..15)"
  - !Register
    name: IDR
    addr: 0x10
    size_bits: 32
    description: GPIO port input data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: IDR15
      bit_offset: 15
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR14
      bit_offset: 14
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR13
      bit_offset: 13
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR12
      bit_offset: 12
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR11
      bit_offset: 11
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR10
      bit_offset: 10
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR9
      bit_offset: 9
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR8
      bit_offset: 8
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR7
      bit_offset: 7
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR6
      bit_offset: 6
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR5
      bit_offset: 5
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR4
      bit_offset: 4
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR3
      bit_offset: 3
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR2
      bit_offset: 2
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR1
      bit_offset: 1
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
    - !Field
      name: IDR0
      bit_offset: 0
      bit_width: 1
      description: "Port input data (y =\n              0..15)"
  - !Register
    name: ODR
    addr: 0x14
    size_bits: 32
    description: GPIO port output data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ODR15
      bit_offset: 15
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR14
      bit_offset: 14
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR13
      bit_offset: 13
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR12
      bit_offset: 12
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR11
      bit_offset: 11
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR10
      bit_offset: 10
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR9
      bit_offset: 9
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR8
      bit_offset: 8
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR7
      bit_offset: 7
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR6
      bit_offset: 6
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR5
      bit_offset: 5
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR4
      bit_offset: 4
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR3
      bit_offset: 3
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR2
      bit_offset: 2
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR1
      bit_offset: 1
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
    - !Field
      name: ODR0
      bit_offset: 0
      bit_width: 1
      description: "Port output data (y =\n              0..15)"
  - !Register
    name: BSRR
    addr: 0x18
    size_bits: 32
    description: "GPIO port bit set/reset\n          register"
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR15
      bit_offset: 31
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR14
      bit_offset: 30
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR13
      bit_offset: 29
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR12
      bit_offset: 28
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR11
      bit_offset: 27
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR10
      bit_offset: 26
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR9
      bit_offset: 25
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR8
      bit_offset: 24
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR7
      bit_offset: 23
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR6
      bit_offset: 22
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR5
      bit_offset: 21
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR4
      bit_offset: 20
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR3
      bit_offset: 19
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR2
      bit_offset: 18
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR1
      bit_offset: 17
      bit_width: 1
      description: "Port x reset bit y (y =\n              0..15)"
    - !Field
      name: BR0
      bit_offset: 16
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS15
      bit_offset: 15
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS14
      bit_offset: 14
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS13
      bit_offset: 13
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS12
      bit_offset: 12
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS11
      bit_offset: 11
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS10
      bit_offset: 10
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS9
      bit_offset: 9
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS8
      bit_offset: 8
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS7
      bit_offset: 7
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS6
      bit_offset: 6
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS5
      bit_offset: 5
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS4
      bit_offset: 4
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS3
      bit_offset: 3
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS2
      bit_offset: 2
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS1
      bit_offset: 1
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
    - !Field
      name: BS0
      bit_offset: 0
      bit_width: 1
      description: "Port x set bit y (y=\n              0..15)"
  - !Register
    name: LCKR
    addr: 0x1c
    size_bits: 32
    description: "GPIO port configuration lock\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: LCKK
      bit_offset: 16
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK15
      bit_offset: 15
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK14
      bit_offset: 14
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK13
      bit_offset: 13
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK12
      bit_offset: 12
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK11
      bit_offset: 11
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK10
      bit_offset: 10
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK9
      bit_offset: 9
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK8
      bit_offset: 8
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK7
      bit_offset: 7
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK6
      bit_offset: 6
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK5
      bit_offset: 5
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK4
      bit_offset: 4
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK3
      bit_offset: 3
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK2
      bit_offset: 2
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK1
      bit_offset: 1
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
    - !Field
      name: LCK0
      bit_offset: 0
      bit_width: 1
      description: "Port x lock bit y (y=\n              0..15)"
  - !Register
    name: AFRL
    addr: 0x20
    size_bits: 32
    description: "GPIO alternate function low\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL7
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL6
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL5
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL4
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL3
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL2
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL1
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
    - !Field
      name: AFSEL0
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 0..7)"
  - !Register
    name: AFRH
    addr: 0x24
    size_bits: 32
    description: "GPIO alternate function high\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: AFSEL15
      bit_offset: 28
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL14
      bit_offset: 24
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL13
      bit_offset: 20
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL12
      bit_offset: 16
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL11
      bit_offset: 12
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL10
      bit_offset: 8
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL9
      bit_offset: 4
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
    - !Field
      name: AFSEL8
      bit_offset: 0
      bit_width: 4
      description: "Alternate function selection for port x\n              bit y (y\
        \ = 8..15)"
  - !Register
    name: BRR
    addr: 0x28
    size_bits: 32
    description: port bit reset register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: BR0
      bit_offset: 0
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR1
      bit_offset: 1
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR2
      bit_offset: 2
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR3
      bit_offset: 3
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR4
      bit_offset: 4
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR5
      bit_offset: 5
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR6
      bit_offset: 6
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR7
      bit_offset: 7
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR8
      bit_offset: 8
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR9
      bit_offset: 9
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR10
      bit_offset: 10
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR11
      bit_offset: 11
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR12
      bit_offset: 12
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR13
      bit_offset: 13
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR14
      bit_offset: 14
      bit_width: 1
      description: Port Reset bit
    - !Field
      name: BR15
      bit_offset: 15
      bit_width: 1
      description: Port Reset bit
- !Module
  name: HDMI_CEC
  description: HDMI-CEC
  base_addr: 0x40007800
  size: 0x400
  registers:
  - !Register
    name: CEC_CR
    addr: 0x0
    size_bits: 32
    description: CEC control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CECEN
      bit_offset: 0
      bit_width: 1
      description: "CEC enable\nThe CECEN bit is set and cleared by software. CECEN\_\
        =\_1 starts message reception and enables the TXSOM control. CECEN\_=\_0 disables\
        \ the CEC peripheral, clears all bits of CEC_CR register and aborts any on-going\
        \ reception or transmission."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXSOM
      bit_offset: 1
      bit_width: 1
      description: "Tx start of message\nTXSOM is set by software to command transmission\
        \ of the first byte of a CEC message. If the CEC message consists of only\
        \ one byte, TXEOM must be set before of TXSOM.\nStart-bit is effectively started\
        \ on the CEC line after SFT is counted. If TXSOM is set while a message reception\
        \ is ongoing, transmission starts after the end of reception.\nTXSOM is cleared\
        \ by hardware after the last byte of the message is sent with a positive acknowledge\
        \ (TXEND\_=\_1), in case of transmission underrun (TXUDR\_=\_1), negative\
        \ acknowledge (TXACKE\_=\_1), and transmission error (TXERR\_=\_1). It is\
        \ also cleared by CECEN\_=\_0. It is not cleared and transmission is automatically\
        \ retried in case of arbitration lost (ARBLST\_=\_1).\nTXSOM can be also used\
        \ as a status bit informing application whether any transmission request is\
        \ pending or under execution. The application can abort a transmission request\
        \ at any time by clearing the CECEN bit.\nNote: TXSOM must be set when CECEN\_\
        =\_1.\nTXSOM must be set when transmission data is available into TXDR.\n\
        HEADER first four bits containing own peripheral address are taken from TXDR[7:4],\
        \ not from CEC_CFGR.OAR that is used only for reception."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEOM
      bit_offset: 2
      bit_width: 1
      description: "Tx end of message\nThe TXEOM bit is set by software to command\
        \ transmission of the last byte of a CEC message.\nTXEOM is cleared by hardware\
        \ at the same time and under the same conditions as for TXSOM.\nNote: TXEOM\
        \ must be set when CECEN\_=\_1.\nTXEOM must be set before writing transmission\
        \ data to TXDR.\nIf TXEOM is set when TXSOM\_=\_0, transmitted message consists\
        \ of 1 byte (HEADER) only (PING message)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CEC_CFGR
    addr: 0x4
    size_bits: 32
    description: "This register is used to configure the\n          HDMI-CEC controller.\
      \ It is mandatory to write CEC_CFGR\n          only when CECEN=0."
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SFT
      bit_offset: 0
      bit_width: 3
      description: "Signal free time\nSFT bits are set by software. In the SFT\_=\_\
        0x0 configuration, the number of nominal data bit periods waited before transmission\
        \ is ruled by hardware according to the transmission history. In all the other\
        \ configurations the SFT number is determined by software.\n0x0\n2.5 data-bit\
        \ periods if CEC is the last bus initiator with unsuccessful transmission\
        \ (ARBLST\_=\_1, TXERR\_=\_1, TXUDR\_=\_1 or TXACKE\_=\_1)\n4 data-bit periods\
        \ if CEC is the new bus initiator\n6 data-bit periods if CEC is the last bus\
        \ initiator with successful transmission (TXEOM\_=\_1)"
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: RXTOL
      bit_offset: 3
      bit_width: 1
      description: "Rx-tolerance\nThe RXTOL bit is set and cleared by software.\n\
        Start-bit, +/- 200 \xB5s rise, +/- 200 \xB5s fall\nData-bit: +/- 200 \xB5\
        s rise. +/- 350 \xB5s fall\nStart-bit: +/- 400 \xB5s rise, +/- 400 \xB5s fall\n\
        Data-bit: +/-300 \xB5s rise, +/- 500 \xB5s fall"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BRESTP
      bit_offset: 4
      bit_width: 1
      description: 'Rx-stop on bit rising error

        The BRESTP bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BREGEN
      bit_offset: 5
      bit_width: 1
      description: "Generate error-bit on bit rising error\nThe BREGEN bit is set\
        \ and cleared by software.\nNote: If BRDNOGEN\_=\_0, an error-bit is generated\
        \ upon BRE detection with BRESTP\_=\_1 in broadcast even if BREGEN\_=\_0."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBPEGEN
      bit_offset: 6
      bit_width: 1
      description: "Generate error-bit on long bit period error\nThe LBPEGEN bit is\
        \ set and cleared by software.\nNote: If BRDNOGEN\_=\_0, an error-bit is generated\
        \ upon LBPE detection in broadcast even if LBPEGEN\_=\_0."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BRDNOGEN
      bit_offset: 7
      bit_width: 1
      description: "Avoid error-bit generation in broadcast\nThe BRDNOGEN bit is set\
        \ and cleared by software.\nerror-bit on the CEC line. LBPE detection with\
        \ LBPEGEN\_=\_0 on a broadcast message generates an error-bit on the CEC line."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SFTOP
      bit_offset: 8
      bit_width: 1
      description: 'SFT option bit

        The SFTOPT bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OAR
      bit_offset: 16
      bit_width: 15
      description: "Own addresses configuration\nThe OAR bits are set by software\
        \ to select which destination logical addresses has to be considered in receive\
        \ mode. Each bit, when set, enables the CEC logical address identified by\
        \ the given bit position.\nAt the end of HEADER reception, the received destination\
        \ address is compared with the enabled addresses. In case of matching address,\
        \ the incoming message is acknowledged and received. In case of non-matching\
        \ address, the incoming message is received only in listen mode (LSTN\_=\_\
        1), but without acknowledge sent. Broadcast messages are always received.\n\
        Example:\nOAR = 0b000 0000 0010 0001 means that CEC acknowledges addresses\
        \ 0x0 and 0x5. Consequently, each message directed to one of these addresses\
        \ is received."
      read_allowed: true
      write_allowed: true
    - !Field
      name: LSTN
      bit_offset: 31
      bit_width: 1
      description: 'Listen mode

        LSTN bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CEC_TXDR
    addr: 0x8
    size_bits: 32
    description: CEC Tx data register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: TXD
      bit_offset: 0
      bit_width: 8
      description: "Tx Data register. TXD is a write-only\n              register\
        \ containing the data byte to be transmitted.\n              Note: TXD must\
        \ be written when\n              TXSTART=1"
  - !Register
    name: CEC_RXDR
    addr: 0xc
    size_bits: 32
    description: CEC Rx Data Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RXD
      bit_offset: 0
      bit_width: 8
      description: "Rx Data register. RXD is read-only and\n              contains\
        \ the last data byte which has been received\n              from the CEC line."
  - !Register
    name: CEC_ISR
    addr: 0x10
    size_bits: 32
    description: "CEC Interrupt and Status\n          Register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RXBR
      bit_offset: 0
      bit_width: 1
      description: "Rx-Byte Received The RXBR bit is set by\n              hardware\
        \ to inform application that a new byte has\n              been received from\
        \ the CEC line and stored into the\n              RXD buffer. RXBR is cleared\
        \ by software write at\n              1."
    - !Field
      name: RXEND
      bit_offset: 1
      bit_width: 1
      description: "End Of Reception RXEND is set by\n              hardware to inform\
        \ application that the last byte of\n              a CEC message is received\
        \ from the CEC line and\n              stored into the RXD buffer. RXEND is\
        \ set at the same\n              time of RXBR. RXEND is cleared by software\
        \ write at\n              1."
    - !Field
      name: RXOVR
      bit_offset: 2
      bit_width: 1
      description: "Rx-Overrun RXOVR is set by hardware if\n              RXBR is\
        \ not yet cleared at the time a new byte is\n              received on the\
        \ CEC line and stored into RXD. RXOVR\n              assertion stops message\
        \ reception so that no\n              acknowledge is sent. In case of broadcast,\
        \ a negative\n              acknowledge is sent. RXOVR is cleared by software\n\
        \              write at 1."
    - !Field
      name: BRE
      bit_offset: 3
      bit_width: 1
      description: "Rx-Bit Rising Error BRE is set by\n              hardware in case\
        \ a Data-Bit waveform is detected with\n              Bit Rising Error. BRE\
        \ is set either at the time the\n              misplaced rising edge occurs,\
        \ or at the end of the\n              maximum BRE tolerance allowed by RXTOL,\
        \ in case\n              rising edge is still longing. BRE stops message\n\
        \              reception if BRESTP=1. BRE generates an Error-Bit on\n    \
        \          the CEC line if BREGEN=1. BRE is cleared by software\n        \
        \      write at 1."
    - !Field
      name: SBPE
      bit_offset: 4
      bit_width: 1
      description: "Rx-Short Bit Period Error SBPE is set by\n              hardware\
        \ in case a Data-Bit waveform is detected with\n              Short Bit Period\
        \ Error. SBPE is set at the time the\n              anticipated falling edge\
        \ occurs. SBPE generates an\n              Error-Bit on the CEC line. SBPE\
        \ is cleared by\n              software write at 1."
    - !Field
      name: LBPE
      bit_offset: 5
      bit_width: 1
      description: "Rx-Long Bit Period Error LBPE is set by\n              hardware\
        \ in case a Data-Bit waveform is detected with\n              Long Bit Period\
        \ Error. LBPE is set at the end of the\n              maximum bit-extension\
        \ tolerance allowed by RXTOL, in\n              case falling edge is still\
        \ longing. LBPE always stops\n              reception of the CEC message.\
        \ LBPE generates an\n              Error-Bit on the CEC line if LBPEGEN=1.\
        \ In case of\n              broadcast, Error-Bit is generated even in case\
        \ of\n              LBPEGEN=0. LBPE is cleared by software write at\n    \
        \          1."
    - !Field
      name: RXACKE
      bit_offset: 6
      bit_width: 1
      description: "Rx-Missing Acknowledge In receive mode,\n              RXACKE\
        \ is set by hardware to inform application that\n              no acknowledge\
        \ was seen on the CEC line. RXACKE\n              applies only for broadcast\
        \ messages and in listen\n              mode also for not directly addressed\
        \ messages\n              (destination address not enabled in OAR). RXACKE\n\
        \              aborts message reception. RXACKE is cleared by\n          \
        \    software write at 1."
    - !Field
      name: ARBLST
      bit_offset: 7
      bit_width: 1
      description: "Arbitration Lost ARBLST is set by\n              hardware to inform\
        \ application that CEC device is\n              switching to reception due\
        \ to arbitration lost event\n              following the TXSOM command. ARBLST\
        \ can be due either\n              to a contending CEC device starting earlier\
        \ or\n              starting at the same time but with higher HEADER\n   \
        \           priority. After ARBLST assertion TXSOM bit keeps\n           \
        \   pending for next transmission attempt. ARBLST is\n              cleared\
        \ by software write at 1."
    - !Field
      name: TXBR
      bit_offset: 8
      bit_width: 1
      description: "Tx-Byte Request TXBR is set by hardware\n              to inform\
        \ application that the next transmission data\n              has to be written\
        \ to TXDR. TXBR is set when the 4th\n              bit of currently transmitted\
        \ byte is sent.\n              Application must write the next byte to TXDR\
        \ within 6\n              nominal data-bit periods before transmission underrun\n\
        \              error occurs (TXUDR). TXBR is cleared by software\n       \
        \       write at 1."
    - !Field
      name: TXEND
      bit_offset: 9
      bit_width: 1
      description: "End of Transmission TXEND is set by\n              hardware to\
        \ inform application that the last byte of\n              the CEC message\
        \ has been successfully transmitted.\n              TXEND clears the TXSOM\
        \ and TXEOM control bits. TXEND\n              is cleared by software write\
        \ at 1."
    - !Field
      name: TXUDR
      bit_offset: 10
      bit_width: 1
      description: "Tx-Buffer Underrun In transmission mode,\n              TXUDR\
        \ is set by hardware if application was not in\n              time to load\
        \ TXDR before of next byte transmission.\n              TXUDR aborts message\
        \ transmission and clears TXSOM\n              and TXEOM control bits. TXUDR\
        \ is cleared by software\n              write at 1"
    - !Field
      name: TXERR
      bit_offset: 11
      bit_width: 1
      description: "Tx-Error In transmission mode, TXERR is\n              set by\
        \ hardware if the CEC initiator detects low\n              impedance on the\
        \ CEC line while it is released. TXERR\n              aborts message transmission\
        \ and clears TXSOM and\n              TXEOM controls. TXERR is cleared by\
        \ software write at\n              1."
    - !Field
      name: TXACKE
      bit_offset: 12
      bit_width: 1
      description: "Tx-Missing Acknowledge Error In\n              transmission mode,\
        \ TXACKE is set by hardware to\n              inform application that no acknowledge\
        \ was received.\n              In case of broadcast transmission, TXACKE informs\n\
        \              application that a negative acknowledge was received.\n   \
        \           TXACKE aborts message transmission and clears TXSOM\n        \
        \      and TXEOM controls. TXACKE is cleared by software\n              write\
        \ at 1."
  - !Register
    name: CEC_IER
    addr: 0x14
    size_bits: 32
    description: CEC interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RXBRIE
      bit_offset: 0
      bit_width: 1
      description: 'Rx-byte received interrupt enable

        The RXBRIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXENDIE
      bit_offset: 1
      bit_width: 1
      description: 'End of reception interrupt enable

        The RXENDIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXOVRIE
      bit_offset: 2
      bit_width: 1
      description: 'Rx-buffer overrun interrupt enable

        The RXOVRIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BREIE
      bit_offset: 3
      bit_width: 1
      description: 'Bit rising error interrupt enable

        The BREIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBPEIE
      bit_offset: 4
      bit_width: 1
      description: 'Short bit period error interrupt enable

        The SBPEIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBPEIE
      bit_offset: 5
      bit_width: 1
      description: 'Long bit period error interrupt enable

        The LBPEIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXACKIE
      bit_offset: 6
      bit_width: 1
      description: 'Rx-missing acknowledge error interrupt enable

        The RXACKIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARBLSTIE
      bit_offset: 7
      bit_width: 1
      description: 'Arbitration lost interrupt enable

        The ARBLSTIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXBRIE
      bit_offset: 8
      bit_width: 1
      description: 'Tx-byte request interrupt enable

        The TXBRIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXENDIE
      bit_offset: 9
      bit_width: 1
      description: 'Tx-end of message interrupt enable

        The TXENDIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXUDRIE
      bit_offset: 10
      bit_width: 1
      description: 'Tx-underrun interrupt enable

        The TXUDRIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXERRIE
      bit_offset: 11
      bit_width: 1
      description: 'Tx-error interrupt enable

        The TXERRIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXACKIE
      bit_offset: 12
      bit_width: 1
      description: 'Tx-missing acknowledge error interrupt enable

        The TXACKEIE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
- !Module
  name: I2C1
  description: Inter-integrated circuit
  base_addr: 0x40005400
  size: 0x400
  registers:
  - !Register
    name: I2C_CR1
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Peripheral enable

        Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines
        and status bits are put back to their reset value. When cleared, PE must be
        kept low for at least 3 APB clock cycles.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXIE
      bit_offset: 1
      bit_width: 1
      description: TX Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXIE
      bit_offset: 2
      bit_width: 1
      description: RX Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDRIE
      bit_offset: 3
      bit_width: 1
      description: Address match Interrupt enable (slave only)
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACKIE
      bit_offset: 4
      bit_width: 1
      description: Not acknowledge received Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOPIE
      bit_offset: 5
      bit_width: 1
      description: Stop detection Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transfer Complete interrupt enable

        Note: Any of these events generate an interrupt:

        Transfer Complete (TC)

        Transfer Complete Reload (TCR)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ERRIE
      bit_offset: 7
      bit_width: 1
      description: 'Error interrupts enable

        Note: Any of these errors generate an interrupt:

        Arbitration Loss (ARLO)

        Bus Error detection (BERR)

        Overrun/Underrun (OVR)

        Timeout detection (TIMEOUT)

        PEC error detection (PECERR)

        Alert pin event detection (ALERT)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DNF
      bit_offset: 8
      bit_width: 4
      description: 'Digital noise filter

        These bits are used to configure the digital noise filter on SDA and SCL input.
        The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK

        ...

        Note: If the analog filter is also enabled, the digital filter is added to
        the analog filter.

        This filter can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        15: B_0xF
    - !Field
      name: ANFOFF
      bit_offset: 12
      bit_width: 1
      description: 'Analog noise filter OFF

        Note: This bit can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXDMAEN
      bit_offset: 14
      bit_width: 1
      description: DMA transmission requests enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXDMAEN
      bit_offset: 15
      bit_width: 1
      description: DMA reception requests enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBC
      bit_offset: 16
      bit_width: 1
      description: 'Slave byte control

        This bit is used to enable hardware byte control in slave mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NOSTRETCH
      bit_offset: 17
      bit_width: 1
      description: 'Clock stretching disable

        This bit is used to disable clock stretching in slave mode. It must be kept
        cleared in master mode.

        Note: This bit can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUPEN
      bit_offset: 18
      bit_width: 1
      description: "Wakeup from Stop mode enable\nNote: If the Wakeup from Stop mode\
        \ feature is not supported, this bit is reserved and forced by hardware to\
        \ '0\xE2\x80\x99. Refer to .\nNote: WUPEN can be set only when DNF = '0000\xE2\
        \x80\x99"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GCEN
      bit_offset: 19
      bit_width: 1
      description: General call enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMBHEN
      bit_offset: 20
      bit_width: 1
      description: "SMBus Host Address enable\nNote: If the SMBus feature is not supported,\
        \ this bit is reserved and forced by hardware to '0\xE2\x80\x99. Refer to\
        \ ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMBDEN
      bit_offset: 21
      bit_width: 1
      description: "SMBus Device Default Address enable\nNote: If the SMBus feature\
        \ is not supported, this bit is reserved and forced by hardware to '0\xE2\x80\
        \x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ALERTEN
      bit_offset: 22
      bit_width: 1
      description: "SMBus alert enable\nNote: When ALERTEN=0, the SMBA pin can be\
        \ used as a standard GPIO.\nIf the SMBus feature is not supported, this bit\
        \ is reserved and forced by hardware to '0\xE2\x80\x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PECEN
      bit_offset: 23
      bit_width: 1
      description: "PEC enable\nNote: If the SMBus feature is not supported, this\
        \ bit is reserved and forced by hardware to '0\xE2\x80\x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SADD
      bit_offset: 0
      bit_width: 10
      description: 'Slave address (master mode)

        In 7-bit addressing mode (ADD10 = 0):

        SADD[7:1] should be written with the 7-bit slave address to be sent. The bits
        SADD[9], SADD[8] and SADD[0] are don''t care.

        In 10-bit addressing mode (ADD10 = 1):

        SADD[9:0] should be written with the 10-bit slave address to be sent.

        Note: Changing these bits when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: RD_WRN
      bit_offset: 10
      bit_width: 1
      description: 'Transfer direction (master mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD10
      bit_offset: 11
      bit_width: 1
      description: '10-bit addressing mode (master mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HEAD10R
      bit_offset: 12
      bit_width: 1
      description: '10-bit address header only read direction (master receiver mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: START
      bit_offset: 13
      bit_width: 1
      description: "Start generation\nThis bit is set by software, and cleared by\
        \ hardware after the Start followed by the address sequence is sent, by an\
        \ arbitration loss, by a timeout error detection, or when PE = 0. It can also\
        \ be cleared by software by writing '1\xE2\x80\x99 to the ADDRCF bit in the\
        \ I2C_ICR register.\nIf the I2C is already in master mode with AUTOEND = 0,\
        \ setting this bit generates a Repeated Start condition when RELOAD=0, after\
        \ the end of the NBYTES transfer.\nOtherwise setting this bit generates a\
        \ START condition once the bus is free.\nNote: Writing '0\xE2\x80\x99 to this\
        \ bit has no effect.\nThe START bit can be set even if the bus is BUSY or\
        \ I2C is in slave mode.\nThis bit has no effect when RELOAD is set."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 14
      bit_width: 1
      description: "Stop generation (master mode)\nThe bit is set by software, cleared\
        \ by hardware when a STOP condition is detected, or when PE = 0.\nIn Master\
        \ Mode:\nNote: Writing '0\xE2\x80\x99 to this bit has no effect."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 15
      bit_width: 1
      description: "NACK generation (slave mode)\nThe bit is set by software, cleared\
        \ by hardware when the NACK is sent, or when a STOP condition or an Address\
        \ matched is received, or when PE=0.\nNote: Writing '0\xE2\x80\x99 to this\
        \ bit has no effect.\nThis bit is used in slave mode only: in master receiver\
        \ mode, NACK is automatically generated after last byte preceding STOP or\
        \ RESTART condition, whatever the NACK bit value.\nWhen an overrun occurs\
        \ in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever\
        \ the NACK bit value.\nWhen hardware PEC checking is enabled (PECBYTE=1),\
        \ the PEC acknowledge value does not depend on the NACK value."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NBYTES
      bit_offset: 16
      bit_width: 8
      description: "Number of bytes\nThe number of bytes to be transmitted/received\
        \ is programmed there. This field is don\xE2\x80\x99t care in slave mode with\
        \ SBC=0.\nNote: Changing these bits when the START bit is set is not allowed."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RELOAD
      bit_offset: 24
      bit_width: 1
      description: 'NBYTES reload mode

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AUTOEND
      bit_offset: 25
      bit_width: 1
      description: 'Automatic end mode (master mode)

        This bit is set and cleared by software.

        Note: This bit has no effect in slave mode or when the RELOAD bit is set.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PECBYTE
      bit_offset: 26
      bit_width: 1
      description: "Packet error checking byte\nThis bit is set by software, and cleared\
        \ by hardware when the PEC is transferred, or when a STOP condition or an\
        \ Address matched is received, also when PE=0.\nNote: Writing '0\xE2\x80\x99\
        \ to this bit has no effect.\nThis bit has no effect when RELOAD is set.\n\
        This bit has no effect is slave mode when SBC=0.\nIf the SMBus feature is\
        \ not supported, this bit is reserved and forced by hardware to '0\xE2\x80\
        \x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_OAR1
    addr: 0x8
    size_bits: 32
    description: Own address register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OA1
      bit_offset: 0
      bit_width: 10
      description: 'Interface own slave address

        7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The
        bits OA1[9], OA1[8] and OA1[0] are don''t care.

        10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.

        Note: These bits can be written only when OA1EN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OA1MODE
      bit_offset: 10
      bit_width: 1
      description: 'Own Address 1 10-bit mode

        Note: This bit can be written only when OA1EN=0.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OA1EN
      bit_offset: 15
      bit_width: 1
      description: Own Address 1 enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_OAR2
    addr: 0xc
    size_bits: 32
    description: Own address register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OA2
      bit_offset: 1
      bit_width: 7
      description: 'Interface address

        7-bit addressing mode: 7-bit address

        Note: These bits can be written only when OA2EN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OA2MSK
      bit_offset: 8
      bit_width: 3
      description: 'Own Address 2 masks

        Note: These bits can be written only when OA2EN=0.

        As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx
        and 0b1111xxx) are not acknowledged even if the comparison matches.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: OA2EN
      bit_offset: 15
      bit_width: 1
      description: Own Address 2 enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_TIMINGR
    addr: 0x10
    size_bits: 32
    description: Timing register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SCLL
      bit_offset: 0
      bit_width: 8
      description: "SCL low period (master\n              mode)"
    - !Field
      name: SCLH
      bit_offset: 8
      bit_width: 8
      description: "SCL high period (master\n              mode)"
    - !Field
      name: SDADEL
      bit_offset: 16
      bit_width: 4
      description: Data hold time
    - !Field
      name: SCLDEL
      bit_offset: 20
      bit_width: 4
      description: Data setup time
    - !Field
      name: PRESC
      bit_offset: 28
      bit_width: 4
      description: Timing prescaler
  - !Register
    name: I2C_TIMEOUTR
    addr: 0x14
    size_bits: 32
    description: Status register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TIMEOUTA
      bit_offset: 0
      bit_width: 12
      description: 'Bus Timeout A

        This field is used to configure:

        The SCL low timeout condition tTIMEOUT when TIDLE=0

        tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK

        The bus idle condition (both SCL and SDA high) when TIDLE=1

        tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK

        Note: These bits can be written only when TIMOUTEN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TIDLE
      bit_offset: 12
      bit_width: 1
      description: 'Idle clock timeout detection

        Note: This bit can be written only when TIMOUTEN=0.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIMOUTEN
      bit_offset: 15
      bit_width: 1
      description: Clock timeout enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIMEOUTB
      bit_offset: 16
      bit_width: 12
      description: 'Bus timeout B

        This field is used to configure the cumulative clock extension timeout:

        In master mode, the master cumulative clock low extend time (tLOW:MEXT) is
        detected

        In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected

        tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK

        Note: These bits can be written only when TEXTEN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TEXTEN
      bit_offset: 31
      bit_width: 1
      description: Extended clock timeout enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_ISR
    addr: 0x18
    size_bits: 32
    description: Interrupt and Status register
    reset_value: 0x1
    fields:
    - !Field
      name: ADDCODE
      bit_offset: 17
      bit_width: 7
      description: "Address match code (Slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: DIR
      bit_offset: 16
      bit_width: 1
      description: 'Transfer direction (Slave mode)

        This flag is updated when an address match event occurs (ADDR=1).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BUSY
      bit_offset: 15
      bit_width: 1
      description: Bus busy
      read_allowed: true
      write_allowed: false
    - !Field
      name: ALERT
      bit_offset: 13
      bit_width: 1
      description: SMBus alert
      read_allowed: true
      write_allowed: false
    - !Field
      name: TIMEOUT
      bit_offset: 12
      bit_width: 1
      description: "Timeout or t_low detection\n              flag"
      read_allowed: true
      write_allowed: false
    - !Field
      name: PECERR
      bit_offset: 11
      bit_width: 1
      description: PEC Error in reception
      read_allowed: true
      write_allowed: false
    - !Field
      name: OVR
      bit_offset: 10
      bit_width: 1
      description: "Overrun/Underrun (slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARLO
      bit_offset: 9
      bit_width: 1
      description: Arbitration lost
      read_allowed: true
      write_allowed: false
    - !Field
      name: BERR
      bit_offset: 8
      bit_width: 1
      description: Bus error
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCR
      bit_offset: 7
      bit_width: 1
      description: Transfer Complete Reload
      read_allowed: true
      write_allowed: false
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transfer Complete (master\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: STOPF
      bit_offset: 5
      bit_width: 1
      description: Stop detection flag
      read_allowed: true
      write_allowed: false
    - !Field
      name: NACKF
      bit_offset: 4
      bit_width: 1
      description: "Not acknowledge received\n              flag"
      read_allowed: true
      write_allowed: false
    - !Field
      name: ADDR
      bit_offset: 3
      bit_width: 1
      description: "Address matched (slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: RXNE
      bit_offset: 2
      bit_width: 1
      description: "Receive data register not empty\n              (receivers)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXIS
      bit_offset: 1
      bit_width: 1
      description: "Transmit interrupt status\n              (transmitters)"
      read_allowed: true
      write_allowed: true
    - !Field
      name: TXE
      bit_offset: 0
      bit_width: 1
      description: "Transmit data register empty\n              (transmitters)"
      read_allowed: true
      write_allowed: true
  - !Register
    name: I2C_ICR
    addr: 0x1c
    size_bits: 32
    description: Interrupt clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ALERTCF
      bit_offset: 13
      bit_width: 1
      description: Alert flag clear
    - !Field
      name: TIMOUTCF
      bit_offset: 12
      bit_width: 1
      description: "Timeout detection flag\n              clear"
    - !Field
      name: PECCF
      bit_offset: 11
      bit_width: 1
      description: PEC Error flag clear
    - !Field
      name: OVRCF
      bit_offset: 10
      bit_width: 1
      description: "Overrun/Underrun flag\n              clear"
    - !Field
      name: ARLOCF
      bit_offset: 9
      bit_width: 1
      description: "Arbitration lost flag\n              clear"
    - !Field
      name: BERRCF
      bit_offset: 8
      bit_width: 1
      description: Bus error flag clear
    - !Field
      name: STOPCF
      bit_offset: 5
      bit_width: 1
      description: Stop detection flag clear
    - !Field
      name: NACKCF
      bit_offset: 4
      bit_width: 1
      description: Not Acknowledge flag clear
    - !Field
      name: ADDRCF
      bit_offset: 3
      bit_width: 1
      description: Address Matched flag clear
  - !Register
    name: I2C_PECR
    addr: 0x20
    size_bits: 32
    description: PEC register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: PEC
      bit_offset: 0
      bit_width: 8
      description: "Packet error checking\n              register"
  - !Register
    name: I2C_RXDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RXDATA
      bit_offset: 0
      bit_width: 8
      description: 8-bit receive data
  - !Register
    name: I2C_TXDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TXDATA
      bit_offset: 0
      bit_width: 8
      description: 8-bit transmit data
- !Module
  name: I2C2
  description: Inter-integrated circuit
  base_addr: 0x40005800
  size: 0x400
  registers:
  - !Register
    name: I2C_CR1
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Peripheral enable

        Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines
        and status bits are put back to their reset value. When cleared, PE must be
        kept low for at least 3 APB clock cycles.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXIE
      bit_offset: 1
      bit_width: 1
      description: TX Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXIE
      bit_offset: 2
      bit_width: 1
      description: RX Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDRIE
      bit_offset: 3
      bit_width: 1
      description: Address match Interrupt enable (slave only)
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACKIE
      bit_offset: 4
      bit_width: 1
      description: Not acknowledge received Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOPIE
      bit_offset: 5
      bit_width: 1
      description: Stop detection Interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transfer Complete interrupt enable

        Note: Any of these events generate an interrupt:

        Transfer Complete (TC)

        Transfer Complete Reload (TCR)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ERRIE
      bit_offset: 7
      bit_width: 1
      description: 'Error interrupts enable

        Note: Any of these errors generate an interrupt:

        Arbitration Loss (ARLO)

        Bus Error detection (BERR)

        Overrun/Underrun (OVR)

        Timeout detection (TIMEOUT)

        PEC error detection (PECERR)

        Alert pin event detection (ALERT)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DNF
      bit_offset: 8
      bit_width: 4
      description: 'Digital noise filter

        These bits are used to configure the digital noise filter on SDA and SCL input.
        The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK

        ...

        Note: If the analog filter is also enabled, the digital filter is added to
        the analog filter.

        This filter can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        15: B_0xF
    - !Field
      name: ANFOFF
      bit_offset: 12
      bit_width: 1
      description: 'Analog noise filter OFF

        Note: This bit can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXDMAEN
      bit_offset: 14
      bit_width: 1
      description: DMA transmission requests enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXDMAEN
      bit_offset: 15
      bit_width: 1
      description: DMA reception requests enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBC
      bit_offset: 16
      bit_width: 1
      description: 'Slave byte control

        This bit is used to enable hardware byte control in slave mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NOSTRETCH
      bit_offset: 17
      bit_width: 1
      description: 'Clock stretching disable

        This bit is used to disable clock stretching in slave mode. It must be kept
        cleared in master mode.

        Note: This bit can only be programmed when the I2C is disabled (PE = 0).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUPEN
      bit_offset: 18
      bit_width: 1
      description: "Wakeup from Stop mode enable\nNote: If the Wakeup from Stop mode\
        \ feature is not supported, this bit is reserved and forced by hardware to\
        \ '0\xE2\x80\x99. Refer to .\nNote: WUPEN can be set only when DNF = '0000\xE2\
        \x80\x99"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GCEN
      bit_offset: 19
      bit_width: 1
      description: General call enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMBHEN
      bit_offset: 20
      bit_width: 1
      description: "SMBus Host Address enable\nNote: If the SMBus feature is not supported,\
        \ this bit is reserved and forced by hardware to '0\xE2\x80\x99. Refer to\
        \ ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMBDEN
      bit_offset: 21
      bit_width: 1
      description: "SMBus Device Default Address enable\nNote: If the SMBus feature\
        \ is not supported, this bit is reserved and forced by hardware to '0\xE2\x80\
        \x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ALERTEN
      bit_offset: 22
      bit_width: 1
      description: "SMBus alert enable\nNote: When ALERTEN=0, the SMBA pin can be\
        \ used as a standard GPIO.\nIf the SMBus feature is not supported, this bit\
        \ is reserved and forced by hardware to '0\xE2\x80\x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PECEN
      bit_offset: 23
      bit_width: 1
      description: "PEC enable\nNote: If the SMBus feature is not supported, this\
        \ bit is reserved and forced by hardware to '0\xE2\x80\x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SADD
      bit_offset: 0
      bit_width: 10
      description: 'Slave address (master mode)

        In 7-bit addressing mode (ADD10 = 0):

        SADD[7:1] should be written with the 7-bit slave address to be sent. The bits
        SADD[9], SADD[8] and SADD[0] are don''t care.

        In 10-bit addressing mode (ADD10 = 1):

        SADD[9:0] should be written with the 10-bit slave address to be sent.

        Note: Changing these bits when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: RD_WRN
      bit_offset: 10
      bit_width: 1
      description: 'Transfer direction (master mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD10
      bit_offset: 11
      bit_width: 1
      description: '10-bit addressing mode (master mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HEAD10R
      bit_offset: 12
      bit_width: 1
      description: '10-bit address header only read direction (master receiver mode)

        Note: Changing this bit when the START bit is set is not allowed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: START
      bit_offset: 13
      bit_width: 1
      description: "Start generation\nThis bit is set by software, and cleared by\
        \ hardware after the Start followed by the address sequence is sent, by an\
        \ arbitration loss, by a timeout error detection, or when PE = 0. It can also\
        \ be cleared by software by writing '1\xE2\x80\x99 to the ADDRCF bit in the\
        \ I2C_ICR register.\nIf the I2C is already in master mode with AUTOEND = 0,\
        \ setting this bit generates a Repeated Start condition when RELOAD=0, after\
        \ the end of the NBYTES transfer.\nOtherwise setting this bit generates a\
        \ START condition once the bus is free.\nNote: Writing '0\xE2\x80\x99 to this\
        \ bit has no effect.\nThe START bit can be set even if the bus is BUSY or\
        \ I2C is in slave mode.\nThis bit has no effect when RELOAD is set."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 14
      bit_width: 1
      description: "Stop generation (master mode)\nThe bit is set by software, cleared\
        \ by hardware when a STOP condition is detected, or when PE = 0.\nIn Master\
        \ Mode:\nNote: Writing '0\xE2\x80\x99 to this bit has no effect."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 15
      bit_width: 1
      description: "NACK generation (slave mode)\nThe bit is set by software, cleared\
        \ by hardware when the NACK is sent, or when a STOP condition or an Address\
        \ matched is received, or when PE=0.\nNote: Writing '0\xE2\x80\x99 to this\
        \ bit has no effect.\nThis bit is used in slave mode only: in master receiver\
        \ mode, NACK is automatically generated after last byte preceding STOP or\
        \ RESTART condition, whatever the NACK bit value.\nWhen an overrun occurs\
        \ in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever\
        \ the NACK bit value.\nWhen hardware PEC checking is enabled (PECBYTE=1),\
        \ the PEC acknowledge value does not depend on the NACK value."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NBYTES
      bit_offset: 16
      bit_width: 8
      description: "Number of bytes\nThe number of bytes to be transmitted/received\
        \ is programmed there. This field is don\xE2\x80\x99t care in slave mode with\
        \ SBC=0.\nNote: Changing these bits when the START bit is set is not allowed."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RELOAD
      bit_offset: 24
      bit_width: 1
      description: 'NBYTES reload mode

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AUTOEND
      bit_offset: 25
      bit_width: 1
      description: 'Automatic end mode (master mode)

        This bit is set and cleared by software.

        Note: This bit has no effect in slave mode or when the RELOAD bit is set.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PECBYTE
      bit_offset: 26
      bit_width: 1
      description: "Packet error checking byte\nThis bit is set by software, and cleared\
        \ by hardware when the PEC is transferred, or when a STOP condition or an\
        \ Address matched is received, also when PE=0.\nNote: Writing '0\xE2\x80\x99\
        \ to this bit has no effect.\nThis bit has no effect when RELOAD is set.\n\
        This bit has no effect is slave mode when SBC=0.\nIf the SMBus feature is\
        \ not supported, this bit is reserved and forced by hardware to '0\xE2\x80\
        \x99. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_OAR1
    addr: 0x8
    size_bits: 32
    description: Own address register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OA1
      bit_offset: 0
      bit_width: 10
      description: 'Interface own slave address

        7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The
        bits OA1[9], OA1[8] and OA1[0] are don''t care.

        10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.

        Note: These bits can be written only when OA1EN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OA1MODE
      bit_offset: 10
      bit_width: 1
      description: 'Own Address 1 10-bit mode

        Note: This bit can be written only when OA1EN=0.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OA1EN
      bit_offset: 15
      bit_width: 1
      description: Own Address 1 enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_OAR2
    addr: 0xc
    size_bits: 32
    description: Own address register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OA2
      bit_offset: 1
      bit_width: 7
      description: 'Interface address

        7-bit addressing mode: 7-bit address

        Note: These bits can be written only when OA2EN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OA2MSK
      bit_offset: 8
      bit_width: 3
      description: 'Own Address 2 masks

        Note: These bits can be written only when OA2EN=0.

        As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx
        and 0b1111xxx) are not acknowledged even if the comparison matches.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: OA2EN
      bit_offset: 15
      bit_width: 1
      description: Own Address 2 enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_TIMINGR
    addr: 0x10
    size_bits: 32
    description: Timing register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SCLL
      bit_offset: 0
      bit_width: 8
      description: "SCL low period (master\n              mode)"
    - !Field
      name: SCLH
      bit_offset: 8
      bit_width: 8
      description: "SCL high period (master\n              mode)"
    - !Field
      name: SDADEL
      bit_offset: 16
      bit_width: 4
      description: Data hold time
    - !Field
      name: SCLDEL
      bit_offset: 20
      bit_width: 4
      description: Data setup time
    - !Field
      name: PRESC
      bit_offset: 28
      bit_width: 4
      description: Timing prescaler
  - !Register
    name: I2C_TIMEOUTR
    addr: 0x14
    size_bits: 32
    description: Status register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TIMEOUTA
      bit_offset: 0
      bit_width: 12
      description: 'Bus Timeout A

        This field is used to configure:

        The SCL low timeout condition tTIMEOUT when TIDLE=0

        tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK

        The bus idle condition (both SCL and SDA high) when TIDLE=1

        tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK

        Note: These bits can be written only when TIMOUTEN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TIDLE
      bit_offset: 12
      bit_width: 1
      description: 'Idle clock timeout detection

        Note: This bit can be written only when TIMOUTEN=0.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIMOUTEN
      bit_offset: 15
      bit_width: 1
      description: Clock timeout enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIMEOUTB
      bit_offset: 16
      bit_width: 12
      description: 'Bus timeout B

        This field is used to configure the cumulative clock extension timeout:

        In master mode, the master cumulative clock low extend time (tLOW:MEXT) is
        detected

        In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected

        tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK

        Note: These bits can be written only when TEXTEN=0.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TEXTEN
      bit_offset: 31
      bit_width: 1
      description: Extended clock timeout enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: I2C_ISR
    addr: 0x18
    size_bits: 32
    description: Interrupt and Status register
    reset_value: 0x1
    fields:
    - !Field
      name: ADDCODE
      bit_offset: 17
      bit_width: 7
      description: "Address match code (Slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: DIR
      bit_offset: 16
      bit_width: 1
      description: 'Transfer direction (Slave mode)

        This flag is updated when an address match event occurs (ADDR=1).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BUSY
      bit_offset: 15
      bit_width: 1
      description: Bus busy
      read_allowed: true
      write_allowed: false
    - !Field
      name: ALERT
      bit_offset: 13
      bit_width: 1
      description: SMBus alert
      read_allowed: true
      write_allowed: false
    - !Field
      name: TIMEOUT
      bit_offset: 12
      bit_width: 1
      description: "Timeout or t_low detection\n              flag"
      read_allowed: true
      write_allowed: false
    - !Field
      name: PECERR
      bit_offset: 11
      bit_width: 1
      description: PEC Error in reception
      read_allowed: true
      write_allowed: false
    - !Field
      name: OVR
      bit_offset: 10
      bit_width: 1
      description: "Overrun/Underrun (slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARLO
      bit_offset: 9
      bit_width: 1
      description: Arbitration lost
      read_allowed: true
      write_allowed: false
    - !Field
      name: BERR
      bit_offset: 8
      bit_width: 1
      description: Bus error
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCR
      bit_offset: 7
      bit_width: 1
      description: Transfer Complete Reload
      read_allowed: true
      write_allowed: false
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transfer Complete (master\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: STOPF
      bit_offset: 5
      bit_width: 1
      description: Stop detection flag
      read_allowed: true
      write_allowed: false
    - !Field
      name: NACKF
      bit_offset: 4
      bit_width: 1
      description: "Not acknowledge received\n              flag"
      read_allowed: true
      write_allowed: false
    - !Field
      name: ADDR
      bit_offset: 3
      bit_width: 1
      description: "Address matched (slave\n              mode)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: RXNE
      bit_offset: 2
      bit_width: 1
      description: "Receive data register not empty\n              (receivers)"
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXIS
      bit_offset: 1
      bit_width: 1
      description: "Transmit interrupt status\n              (transmitters)"
      read_allowed: true
      write_allowed: true
    - !Field
      name: TXE
      bit_offset: 0
      bit_width: 1
      description: "Transmit data register empty\n              (transmitters)"
      read_allowed: true
      write_allowed: true
  - !Register
    name: I2C_ICR
    addr: 0x1c
    size_bits: 32
    description: Interrupt clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ALERTCF
      bit_offset: 13
      bit_width: 1
      description: Alert flag clear
    - !Field
      name: TIMOUTCF
      bit_offset: 12
      bit_width: 1
      description: "Timeout detection flag\n              clear"
    - !Field
      name: PECCF
      bit_offset: 11
      bit_width: 1
      description: PEC Error flag clear
    - !Field
      name: OVRCF
      bit_offset: 10
      bit_width: 1
      description: "Overrun/Underrun flag\n              clear"
    - !Field
      name: ARLOCF
      bit_offset: 9
      bit_width: 1
      description: "Arbitration lost flag\n              clear"
    - !Field
      name: BERRCF
      bit_offset: 8
      bit_width: 1
      description: Bus error flag clear
    - !Field
      name: STOPCF
      bit_offset: 5
      bit_width: 1
      description: Stop detection flag clear
    - !Field
      name: NACKCF
      bit_offset: 4
      bit_width: 1
      description: Not Acknowledge flag clear
    - !Field
      name: ADDRCF
      bit_offset: 3
      bit_width: 1
      description: Address Matched flag clear
  - !Register
    name: I2C_PECR
    addr: 0x20
    size_bits: 32
    description: PEC register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: PEC
      bit_offset: 0
      bit_width: 8
      description: "Packet error checking\n              register"
  - !Register
    name: I2C_RXDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RXDATA
      bit_offset: 0
      bit_width: 8
      description: 8-bit receive data
  - !Register
    name: I2C_TXDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TXDATA
      bit_offset: 0
      bit_width: 8
      description: 8-bit transmit data
- !Module
  name: IWDG
  description: Independent watchdog
  base_addr: 0x40003000
  size: 0x400
  registers:
  - !Register
    name: IWDG_KR
    addr: 0x0
    size_bits: 32
    description: Key register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: KEY
      bit_offset: 0
      bit_width: 16
      description: "Key value (write only, read\n              0x0000)"
  - !Register
    name: IWDG_PR
    addr: 0x4
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PR
      bit_offset: 0
      bit_width: 3
      description: 'Prescaler divider

        These bits are write access protected see . They are written by software to
        select the prescaler divider feeding the counter clock. PVU bit of the  must
        be reset in order to be able to change the prescaler divider.

        Note: Reading this register returns the prescaler value from the VDD voltage
        domain. This value may not be up to date/valid if a write operation to this
        register is ongoing. For this reason the value read from this register is
        valid only when the PVU bit in the status register (IWDG_SR) is reset.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: IWDG_RLR
    addr: 0x8
    size_bits: 32
    description: Reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xfff
    fields:
    - !Field
      name: RL
      bit_offset: 0
      bit_width: 12
      description: "Watchdog counter reload\n              value"
  - !Register
    name: IWDG_SR
    addr: 0xc
    size_bits: 32
    description: Status register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: PVU
      bit_offset: 0
      bit_width: 1
      description: 'Watchdog prescaler value update

        This bit is set by hardware to indicate that an update of the prescaler value
        is ongoing. It is reset by hardware when the prescaler update operation is
        completed in the VDD voltage domain (takes up to five LSI cycles).

        Prescaler value can be updated only when PVU bit is reset.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: RVU
      bit_offset: 1
      bit_width: 1
      description: 'Watchdog counter reload value update

        This bit is set by hardware to indicate that an update of the reload value
        is ongoing. It is reset by hardware when the reload value update operation
        is completed in the VDD voltage domain (takes up to five LSI cycles).

        Reload value can be updated only when RVU bit is reset.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: WVU
      bit_offset: 2
      bit_width: 1
      description: 'Watchdog counter window value update

        This bit is set by hardware to indicate that an update of the window value
        is ongoing. It is reset by hardware when the reload value update operation
        is completed in the VDD voltage domain (takes up to five LSI cycles).

        Window value can be updated only when WVU bit is reset.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: IWDG_WINR
    addr: 0x10
    size_bits: 32
    description: Window register
    read_allowed: true
    write_allowed: true
    reset_value: 0xfff
    fields:
    - !Field
      name: WIN
      bit_offset: 0
      bit_width: 12
      description: "Watchdog counter window\n              value"
- !Module
  name: LPTIM1
  description: Low power timer
  base_addr: 0x40007c00
  size: 0x400
  registers:
  - !Register
    name: LPTIM_ISR
    addr: 0x0
    size_bits: 32
    description: Interrupt and Status Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: CMPM
      bit_offset: 0
      bit_width: 1
      description: "Compare match\nThe CMPM bit is set by hardware to inform application\
        \ that LPTIM_CNT register value reached the LPTIM_CMP register\xE2\x80\x99\
        s value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARRM
      bit_offset: 1
      bit_width: 1
      description: "Autoreload match\nARRM is set by hardware to inform application\
        \ that LPTIM_CNT register\xE2\x80\x99s value reached the LPTIM_ARR register\xE2\
        \x80\x99s value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in\
        \ the LPTIM_ICR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: EXTTRIG
      bit_offset: 2
      bit_width: 1
      description: 'External trigger edge event

        EXTTRIG is set by hardware to inform application that a valid edge on the
        selected external trigger input has occurred. If the trigger is ignored because
        the timer has already started, then this flag is not set. EXTTRIG flag can
        be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: CMPOK
      bit_offset: 3
      bit_width: 1
      description: 'Compare register update OK

        CMPOK is set by hardware to inform application that the APB bus write operation
        to the LPTIM_CMP register has been successfully completed.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARROK
      bit_offset: 4
      bit_width: 1
      description: 'Autoreload register update OK

        ARROK is set by hardware to inform application that the APB bus write operation
        to the LPTIM_ARR register has been successfully completed. ARROK flag can
        be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: UP
      bit_offset: 5
      bit_width: 1
      description: 'Counter direction change down to up

        In Encoder mode, UP bit is set by hardware to inform application that the
        counter direction has changed from down to up. UP flag can be cleared by writing
        1 to the UPCF bit in the LPTIM_ICR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: DOWN
      bit_offset: 6
      bit_width: 1
      description: 'Counter direction change up to down

        In Encoder mode, DOWN bit is set by hardware to inform application that the
        counter direction has changed from up to down. DOWN flag can be cleared by
        writing 1 to the DOWNCF bit in the LPTIM_ICR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: false
  - !Register
    name: LPTIM_ICR
    addr: 0x4
    size_bits: 32
    description: Interrupt Clear Register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: CMPMCF
      bit_offset: 0
      bit_width: 1
      description: 'Compare match clear flag

        Writing 1 to this bit clears the CMP flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ARRMCF
      bit_offset: 1
      bit_width: 1
      description: 'Autoreload match clear flag

        Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: EXTTRIGCF
      bit_offset: 2
      bit_width: 1
      description: 'External trigger valid edge clear flag

        Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMPOKCF
      bit_offset: 3
      bit_width: 1
      description: 'Compare register update OK clear flag

        Writing 1 to this bit clears the CMPOK flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ARROKCF
      bit_offset: 4
      bit_width: 1
      description: 'Autoreload register update OK clear flag

        Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UPCF
      bit_offset: 5
      bit_width: 1
      description: 'Direction change to UP clear flag

        Writing 1 to this bit clear the UP flag in the LPTIM_ISR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: DOWNCF
      bit_offset: 6
      bit_width: 1
      description: 'Direction change to down clear flag

        Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: false
      write_allowed: true
  - !Register
    name: LPTIM_IER
    addr: 0x8
    size_bits: 32
    description: Interrupt Enable Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CMPMIE
      bit_offset: 0
      bit_width: 1
      description: Compare match Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARRMIE
      bit_offset: 1
      bit_width: 1
      description: Autoreload match Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EXTTRIGIE
      bit_offset: 2
      bit_width: 1
      description: External trigger valid edge Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMPOKIE
      bit_offset: 3
      bit_width: 1
      description: Compare register update OK Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARROKIE
      bit_offset: 4
      bit_width: 1
      description: Autoreload register update OK Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UPIE
      bit_offset: 5
      bit_width: 1
      description: 'Direction change to UP Interrupt Enable

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DOWNIE
      bit_offset: 6
      bit_width: 1
      description: 'Direction change to down Interrupt Enable

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: LPTIM_CFGR
    addr: 0xc
    size_bits: 32
    description: Configuration Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CKSEL
      bit_offset: 0
      bit_width: 1
      description: 'Clock selector

        The CKSEL bit selects which clock source the LPTIM will use:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKPOL
      bit_offset: 1
      bit_width: 2
      description: 'Clock Polarity

        If LPTIM is clocked by an external clock source:

        When the LPTIM is clocked by an external clock source, CKPOL bits is used
        to configure the active edge or edges used by the counter:

        If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode
        1 is active.

        If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode
        2 is active.

        Refer to  for more details about Encoder mode sub-modes.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: CKFLT
      bit_offset: 3
      bit_width: 2
      description: 'Configurable digital filter for external clock

        The CKFLT value sets the number of consecutive equal samples that should be
        detected when a level change occurs on an external clock signal before it
        is considered as a valid level transition. An internal clock source must be
        present to use this feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: TRGFLT
      bit_offset: 6
      bit_width: 2
      description: 'Configurable digital filter for trigger

        The TRGFLT value sets the number of consecutive equal samples that should
        be detected when a level change occurs on an internal trigger before it is
        considered as a valid level transition. An internal clock source must be present
        to use this feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: PRESC
      bit_offset: 9
      bit_width: 3
      description: 'Clock prescaler

        The PRESC bits configure the prescaler division factor. It can be one among
        the following division factors:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TRIGSEL
      bit_offset: 13
      bit_width: 3
      description: 'Trigger selector

        The TRIGSEL bits select the trigger source that will serve as a trigger event
        for the LPTIM among the below 8 available sources:

        See  for details.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TRIGEN
      bit_offset: 17
      bit_width: 2
      description: 'Trigger enable and polarity

        The TRIGEN bits controls whether the LPTIM counter is started by an external
        trigger or not. If the external trigger option is selected, three configurations
        are possible for the trigger active edge:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: TIMOUT
      bit_offset: 19
      bit_width: 1
      description: 'Timeout enable

        The TIMOUT bit controls the Timeout feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAVE
      bit_offset: 20
      bit_width: 1
      description: 'Waveform shape

        The WAVE bit controls the output shape'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAVPOL
      bit_offset: 21
      bit_width: 1
      description: 'Waveform shape polarity

        The WAVEPOL bit controls the output polarity'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PRELOAD
      bit_offset: 22
      bit_width: 1
      description: 'Registers update mode

        The PRELOAD bit controls the LPTIM_ARR and the LPTIM_CMP registers update
        modality'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COUNTMODE
      bit_offset: 23
      bit_width: 1
      description: 'counter mode enabled

        The COUNTMODE bit selects which clock source is used by the LPTIM to clock
        the counter:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ENC
      bit_offset: 24
      bit_width: 1
      description: 'Encoder mode enable

        The ENC bit controls the Encoder mode

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: LPTIM_CR
    addr: 0x10
    size_bits: 32
    description: Control Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ENABLE
      bit_offset: 0
      bit_width: 1
      description: 'LPTIM enable

        The ENABLE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SNGSTRT
      bit_offset: 1
      bit_width: 1
      description: "LPTIM start in Single mode\nThis bit is set by software and cleared\
        \ by hardware.\nIn case of software start (TRIGEN[1:0] = '00\xE2\x80\x99),\
        \ setting this bit starts the LPTIM in single pulse mode.\nIf the software\
        \ start is disabled (TRIGEN[1:0] different than '00\xE2\x80\x99), setting\
        \ this bit starts the LPTIM in single pulse mode as soon as an external trigger\
        \ is detected.\nIf this bit is set when the LPTIM is in continuous counting\
        \ mode, then the LPTIM will stop at the following match between LPTIM_ARR\
        \ and LPTIM_CNT registers.\nThis bit can only be set when the LPTIM is enabled.\
        \ It will be automatically reset by hardware."
      read_allowed: true
      write_allowed: true
    - !Field
      name: CNTSTRT
      bit_offset: 2
      bit_width: 1
      description: "Timer start in Continuous mode\nThis bit is set by software and\
        \ cleared by hardware.\nIn case of software start (TRIGEN[1:0] = '00\xE2\x80\
        \x99), setting this bit starts the LPTIM in Continuous mode.\nIf the software\
        \ start is disabled (TRIGEN[1:0] different than '00\xE2\x80\x99), setting\
        \ this bit starts the timer in Continuous mode as soon as an external trigger\
        \ is detected.\nIf this bit is set when a single pulse mode counting is ongoing,\
        \ then the timer will not stop at the next match between the LPTIM_ARR and\
        \ LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode.\n\
        This bit can be set only when the LPTIM is enabled. It will be automatically\
        \ reset by hardware."
      read_allowed: true
      write_allowed: true
    - !Field
      name: COUNTRST
      bit_offset: 3
      bit_width: 1
      description: 'Counter reset

        This bit is set by software and cleared by hardware. When set to ''1'' this
        bit will trigger a synchronous reset of the LPTIM_CNT counter register. Due
        to the synchronous nature of this reset, it only takes place after a synchronization
        delay of 3 LPTimer core clock cycles (LPTimer core clock may be different
        from APB clock).

        COUNTRST must never be set to ''1'' by software before it is already cleared
        to ''0'' by hardware. Software should consequently check that COUNTRST bit
        is already cleared to ''0'' before attempting to set it to ''1''.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: RSTARE
      bit_offset: 4
      bit_width: 1
      description: 'Reset after read enable

        This bit is set and cleared by software. When RSTARE is set to ''1'', any
        read access to LPTIM_CNT register will asynchronously reset LPTIM_CNT register
        content.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: LPTIM_CMP
    addr: 0x14
    size_bits: 32
    description: Compare Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CMP
      bit_offset: 0
      bit_width: 16
      description: Compare value
  - !Register
    name: LPTIM_ARR
    addr: 0x18
    size_bits: 32
    description: Autoreload Register
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Auto reload value
  - !Register
    name: LPTIM_CNT
    addr: 0x1c
    size_bits: 32
    description: Counter Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: Counter value
  - !Register
    name: LPTIM_CFGR2
    addr: 0x24
    size_bits: 32
    description: LPTIM configuration register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IN1SEL
      bit_offset: 0
      bit_width: 2
      description: 'LPTIM input 1 selection

        The IN1SEL bits control the LPTIM Input 1 multiplexer, which connects LPTIM
        Input 1 to one of the available inputs.

        For connection details refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IN2SEL
      bit_offset: 4
      bit_width: 2
      description: 'LPTIM input 2 selection

        The IN2SEL bits control the LPTIM Input 2 multiplexer, which connect LPTIM
        Input 2 to one of the available inputs.

        For connection details refer to .

        Note: If the LPTIM does not support encoder mode feature, these bits are reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
- !Module
  name: LPTIM2
  description: Low power timer
  base_addr: 0x40009400
  size: 0x400
  registers:
  - !Register
    name: LPTIM_ISR
    addr: 0x0
    size_bits: 32
    description: Interrupt and Status Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: CMPM
      bit_offset: 0
      bit_width: 1
      description: "Compare match\nThe CMPM bit is set by hardware to inform application\
        \ that LPTIM_CNT register value reached the LPTIM_CMP register\xE2\x80\x99\
        s value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARRM
      bit_offset: 1
      bit_width: 1
      description: "Autoreload match\nARRM is set by hardware to inform application\
        \ that LPTIM_CNT register\xE2\x80\x99s value reached the LPTIM_ARR register\xE2\
        \x80\x99s value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in\
        \ the LPTIM_ICR register."
      read_allowed: true
      write_allowed: false
    - !Field
      name: EXTTRIG
      bit_offset: 2
      bit_width: 1
      description: 'External trigger edge event

        EXTTRIG is set by hardware to inform application that a valid edge on the
        selected external trigger input has occurred. If the trigger is ignored because
        the timer has already started, then this flag is not set. EXTTRIG flag can
        be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: CMPOK
      bit_offset: 3
      bit_width: 1
      description: 'Compare register update OK

        CMPOK is set by hardware to inform application that the APB bus write operation
        to the LPTIM_CMP register has been successfully completed.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ARROK
      bit_offset: 4
      bit_width: 1
      description: 'Autoreload register update OK

        ARROK is set by hardware to inform application that the APB bus write operation
        to the LPTIM_ARR register has been successfully completed. ARROK flag can
        be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: UP
      bit_offset: 5
      bit_width: 1
      description: 'Counter direction change down to up

        In Encoder mode, UP bit is set by hardware to inform application that the
        counter direction has changed from down to up. UP flag can be cleared by writing
        1 to the UPCF bit in the LPTIM_ICR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: DOWN
      bit_offset: 6
      bit_width: 1
      description: 'Counter direction change up to down

        In Encoder mode, DOWN bit is set by hardware to inform application that the
        counter direction has changed from up to down. DOWN flag can be cleared by
        writing 1 to the DOWNCF bit in the LPTIM_ICR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: false
  - !Register
    name: LPTIM_ICR
    addr: 0x4
    size_bits: 32
    description: Interrupt Clear Register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: CMPMCF
      bit_offset: 0
      bit_width: 1
      description: 'Compare match clear flag

        Writing 1 to this bit clears the CMP flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ARRMCF
      bit_offset: 1
      bit_width: 1
      description: 'Autoreload match clear flag

        Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: EXTTRIGCF
      bit_offset: 2
      bit_width: 1
      description: 'External trigger valid edge clear flag

        Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMPOKCF
      bit_offset: 3
      bit_width: 1
      description: 'Compare register update OK clear flag

        Writing 1 to this bit clears the CMPOK flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ARROKCF
      bit_offset: 4
      bit_width: 1
      description: 'Autoreload register update OK clear flag

        Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UPCF
      bit_offset: 5
      bit_width: 1
      description: 'Direction change to UP clear flag

        Writing 1 to this bit clear the UP flag in the LPTIM_ISR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: DOWNCF
      bit_offset: 6
      bit_width: 1
      description: 'Direction change to down clear flag

        Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register.

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: false
      write_allowed: true
  - !Register
    name: LPTIM_IER
    addr: 0x8
    size_bits: 32
    description: Interrupt Enable Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CMPMIE
      bit_offset: 0
      bit_width: 1
      description: Compare match Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARRMIE
      bit_offset: 1
      bit_width: 1
      description: Autoreload match Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EXTTRIGIE
      bit_offset: 2
      bit_width: 1
      description: External trigger valid edge Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMPOKIE
      bit_offset: 3
      bit_width: 1
      description: Compare register update OK Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARROKIE
      bit_offset: 4
      bit_width: 1
      description: Autoreload register update OK Interrupt Enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UPIE
      bit_offset: 5
      bit_width: 1
      description: 'Direction change to UP Interrupt Enable

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DOWNIE
      bit_offset: 6
      bit_width: 1
      description: 'Direction change to down Interrupt Enable

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: LPTIM_CFGR
    addr: 0xc
    size_bits: 32
    description: Configuration Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CKSEL
      bit_offset: 0
      bit_width: 1
      description: 'Clock selector

        The CKSEL bit selects which clock source the LPTIM will use:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKPOL
      bit_offset: 1
      bit_width: 2
      description: 'Clock Polarity

        If LPTIM is clocked by an external clock source:

        When the LPTIM is clocked by an external clock source, CKPOL bits is used
        to configure the active edge or edges used by the counter:

        If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode
        1 is active.

        If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode
        2 is active.

        Refer to  for more details about Encoder mode sub-modes.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: CKFLT
      bit_offset: 3
      bit_width: 2
      description: 'Configurable digital filter for external clock

        The CKFLT value sets the number of consecutive equal samples that should be
        detected when a level change occurs on an external clock signal before it
        is considered as a valid level transition. An internal clock source must be
        present to use this feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: TRGFLT
      bit_offset: 6
      bit_width: 2
      description: 'Configurable digital filter for trigger

        The TRGFLT value sets the number of consecutive equal samples that should
        be detected when a level change occurs on an internal trigger before it is
        considered as a valid level transition. An internal clock source must be present
        to use this feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: PRESC
      bit_offset: 9
      bit_width: 3
      description: 'Clock prescaler

        The PRESC bits configure the prescaler division factor. It can be one among
        the following division factors:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TRIGSEL
      bit_offset: 13
      bit_width: 3
      description: 'Trigger selector

        The TRIGSEL bits select the trigger source that will serve as a trigger event
        for the LPTIM among the below 8 available sources:

        See  for details.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TRIGEN
      bit_offset: 17
      bit_width: 2
      description: 'Trigger enable and polarity

        The TRIGEN bits controls whether the LPTIM counter is started by an external
        trigger or not. If the external trigger option is selected, three configurations
        are possible for the trigger active edge:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: TIMOUT
      bit_offset: 19
      bit_width: 1
      description: 'Timeout enable

        The TIMOUT bit controls the Timeout feature'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAVE
      bit_offset: 20
      bit_width: 1
      description: 'Waveform shape

        The WAVE bit controls the output shape'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAVPOL
      bit_offset: 21
      bit_width: 1
      description: 'Waveform shape polarity

        The WAVEPOL bit controls the output polarity'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PRELOAD
      bit_offset: 22
      bit_width: 1
      description: 'Registers update mode

        The PRELOAD bit controls the LPTIM_ARR and the LPTIM_CMP registers update
        modality'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COUNTMODE
      bit_offset: 23
      bit_width: 1
      description: 'counter mode enabled

        The COUNTMODE bit selects which clock source is used by the LPTIM to clock
        the counter:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ENC
      bit_offset: 24
      bit_width: 1
      description: 'Encoder mode enable

        The ENC bit controls the Encoder mode

        Note: If the LPTIM does not support encoder mode feature, this bit is reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: LPTIM_CR
    addr: 0x10
    size_bits: 32
    description: Control Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ENABLE
      bit_offset: 0
      bit_width: 1
      description: 'LPTIM enable

        The ENABLE bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SNGSTRT
      bit_offset: 1
      bit_width: 1
      description: "LPTIM start in Single mode\nThis bit is set by software and cleared\
        \ by hardware.\nIn case of software start (TRIGEN[1:0] = '00\xE2\x80\x99),\
        \ setting this bit starts the LPTIM in single pulse mode.\nIf the software\
        \ start is disabled (TRIGEN[1:0] different than '00\xE2\x80\x99), setting\
        \ this bit starts the LPTIM in single pulse mode as soon as an external trigger\
        \ is detected.\nIf this bit is set when the LPTIM is in continuous counting\
        \ mode, then the LPTIM will stop at the following match between LPTIM_ARR\
        \ and LPTIM_CNT registers.\nThis bit can only be set when the LPTIM is enabled.\
        \ It will be automatically reset by hardware."
      read_allowed: true
      write_allowed: true
    - !Field
      name: CNTSTRT
      bit_offset: 2
      bit_width: 1
      description: "Timer start in Continuous mode\nThis bit is set by software and\
        \ cleared by hardware.\nIn case of software start (TRIGEN[1:0] = '00\xE2\x80\
        \x99), setting this bit starts the LPTIM in Continuous mode.\nIf the software\
        \ start is disabled (TRIGEN[1:0] different than '00\xE2\x80\x99), setting\
        \ this bit starts the timer in Continuous mode as soon as an external trigger\
        \ is detected.\nIf this bit is set when a single pulse mode counting is ongoing,\
        \ then the timer will not stop at the next match between the LPTIM_ARR and\
        \ LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode.\n\
        This bit can be set only when the LPTIM is enabled. It will be automatically\
        \ reset by hardware."
      read_allowed: true
      write_allowed: true
    - !Field
      name: COUNTRST
      bit_offset: 3
      bit_width: 1
      description: 'Counter reset

        This bit is set by software and cleared by hardware. When set to ''1'' this
        bit will trigger a synchronous reset of the LPTIM_CNT counter register. Due
        to the synchronous nature of this reset, it only takes place after a synchronization
        delay of 3 LPTimer core clock cycles (LPTimer core clock may be different
        from APB clock).

        COUNTRST must never be set to ''1'' by software before it is already cleared
        to ''0'' by hardware. Software should consequently check that COUNTRST bit
        is already cleared to ''0'' before attempting to set it to ''1''.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: RSTARE
      bit_offset: 4
      bit_width: 1
      description: 'Reset after read enable

        This bit is set and cleared by software. When RSTARE is set to ''1'', any
        read access to LPTIM_CNT register will asynchronously reset LPTIM_CNT register
        content.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: LPTIM_CMP
    addr: 0x14
    size_bits: 32
    description: Compare Register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CMP
      bit_offset: 0
      bit_width: 16
      description: Compare value
  - !Register
    name: LPTIM_ARR
    addr: 0x18
    size_bits: 32
    description: Autoreload Register
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Auto reload value
  - !Register
    name: LPTIM_CNT
    addr: 0x1c
    size_bits: 32
    description: Counter Register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: Counter value
  - !Register
    name: LPTIM_CFGR2
    addr: 0x24
    size_bits: 32
    description: LPTIM configuration register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IN1SEL
      bit_offset: 0
      bit_width: 2
      description: 'LPTIM input 1 selection

        The IN1SEL bits control the LPTIM Input 1 multiplexer, which connects LPTIM
        Input 1 to one of the available inputs.

        For connection details refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IN2SEL
      bit_offset: 4
      bit_width: 2
      description: 'LPTIM input 2 selection

        The IN2SEL bits control the LPTIM Input 2 multiplexer, which connect LPTIM
        Input 2 to one of the available inputs.

        For connection details refer to .

        Note: If the LPTIM does not support encoder mode feature, these bits are reserved.
        Please refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
- !Module
  name: TIM1
  description: Advanced-timers
  base_addr: 0x40012c00
  size: 0x400
  registers:
  - !Register
    name: TIM1_CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock, gated mode and encoder mode can work only if the CEN
        bit has been previously set by software. However trigger mode can set the
        CEN bit automatically by hardware.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIR
      bit_offset: 4
      bit_width: 1
      description: 'Direction

        Note: This bit is read only when the timer is configured in Center-aligned
        mode or Encoder mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMS
      bit_offset: 5
      bit_width: 2
      description: 'Center-aligned mode selection

        Note: Switch from edge-aligned mode to center-aligned mode as long as the
        counter is enabled (CEN=1) is not allowed'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and the dead-time and sampling clock (tDTS)used by the dead-time
        generators and the digital filters (ETR, TIx):

        Note: tDTS = 1/fDTS, tCK_INT = 1/fCK_INT.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TIM1_CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCPC
      bit_offset: 0
      bit_width: 1
      description: 'Capture/compare preloaded control

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCUS
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare control update selection

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits allow selected information to be sent in master mode to slave timers
        for synchronization (TRGO). The combination is as follows:

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TI1S
      bit_offset: 7
      bit_width: 1
      description: TI1 selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1
      bit_offset: 8
      bit_width: 1
      description: 'Output Idle state 1 (OC1 output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1N
      bit_offset: 9
      bit_width: 1
      description: 'Output Idle state 1 (OC1N output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS2
      bit_offset: 10
      bit_width: 1
      description: 'Output Idle state 2 (OC2 output)

        Refer to OIS1 bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS2N
      bit_offset: 11
      bit_width: 1
      description: 'Output Idle state 2 (OC2N output)

        Refer to OIS1N bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS3
      bit_offset: 12
      bit_width: 1
      description: 'Output Idle state 3 (OC3 output)

        Refer to OIS1 bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS3N
      bit_offset: 13
      bit_width: 1
      description: 'Output Idle state 3 (OC3N output)

        Refer to OIS1N bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS4
      bit_offset: 14
      bit_width: 1
      description: 'Output Idle state 4 (OC4 output)

        Refer to OIS1 bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS5
      bit_offset: 16
      bit_width: 1
      description: 'Output Idle state 5 (OC5 output)

        Refer to OIS1 bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OIS6
      bit_offset: 18
      bit_width: 1
      description: 'Output Idle state 6 (OC6 output)

        Refer to OIS1 bit'
      read_allowed: true
      write_allowed: true
    - !Field
      name: MMS2
      bit_offset: 20
      bit_width: 4
      description: 'Master mode selection 2

        These bits allow the information to be sent to ADC for synchronization (TRGO2)
        to be selected. The combination is as follows:

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
  - !Register
    name: TIM1_SMCR
    addr: 0x8
    size_bits: 32
    description: slave mode control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SMS1
      bit_offset: 0
      bit_width: 3
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: OCCS
      bit_offset: 3
      bit_width: 1
      description: 'OCREF clear selection

        This bit is used to select the OCREF clear source.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TS1
      bit_offset: 4
      bit_width: 3
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: MSM
      bit_offset: 7
      bit_width: 1
      description: Master/slave mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETF
      bit_offset: 8
      bit_width: 4
      description: 'External trigger filter

        This bit-field then defines the frequency used to sample ETRP signal and the
        length of the digital filter applied to ETRP. The digital filter is made of
        an event counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: ETPS
      bit_offset: 12
      bit_width: 2
      description: 'External trigger prescaler

        External trigger signal ETRP frequency must be at most 1/4 of fCK_INT frequency.
        A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting
        fast external clocks.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ECE
      bit_offset: 14
      bit_width: 1
      description: 'External clock enable

        This bit enables External clock mode 2.

        Note: Setting the ECE bit has the same effect as selecting external clock
        mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).

        It is possible to simultaneously use external clock mode 2 with the following
        slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must
        not be connected to ETRF in this case (TS bits must not be 00111).

        If external clock mode 1 and external clock mode 2 are enabled at the same
        time, the external clock input is ETRF.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETP
      bit_offset: 15
      bit_width: 1
      description: 'External trigger polarity

        This bit selects whether ETR or ETR is used for trigger operations'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMS2
      bit_offset: 16
      bit_width: 1
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: TS2
      bit_offset: 20
      bit_width: 2
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: TIM1_DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 2 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3IE
      bit_offset: 3
      bit_width: 1
      description: Capture/Compare 3 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4IE
      bit_offset: 4
      bit_width: 1
      description: Capture/Compare 4 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIE
      bit_offset: 5
      bit_width: 1
      description: COM interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIE
      bit_offset: 6
      bit_width: 1
      description: Trigger interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIE
      bit_offset: 7
      bit_width: 1
      description: Break interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2DE
      bit_offset: 10
      bit_width: 1
      description: Capture/Compare 2 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3DE
      bit_offset: 11
      bit_width: 1
      description: Capture/Compare 3 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4DE
      bit_offset: 12
      bit_width: 1
      description: Capture/Compare 4 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMDE
      bit_offset: 13
      bit_width: 1
      description: COM DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TDE
      bit_offset: 14
      bit_width: 1
      description: Trigger DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TIM1_SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow or underflow regarding the repetition counter value (update if
        repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by a trigger event (refer to control register (TIM1_SMCRTIMx_SMCR)N/A),
        if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when he content of
        the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the
        content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit
        goes high on the counter overflow (in up-counting and up/down-counting modes)
        or underflow (in down-counting mode). There are 3 possible options for flag
        setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register
        for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IF
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3IF
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 3 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4IF
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 4 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: COMIF
      bit_offset: 5
      bit_width: 1
      description: 'COM interrupt flag

        This flag is set by hardware on COM event (when Capture/compare Control bits
        - CCxE, CCxNE, OCxM - have been updated). It is cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIF
      bit_offset: 6
      bit_width: 1
      description: 'Trigger interrupt flag

        This flag is set by hardware on the TRG trigger event (active edge detected
        on TRGI input when the slave mode controller is enabled in all modes but gated
        mode. It is set when the counter starts or stops when gated mode is selected.
        It is cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIF
      bit_offset: 7
      bit_width: 1
      description: 'Break interrupt flag

        This flag is set by hardware as soon as the break input goes active. It can
        be cleared by software if the break input is not active.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: B2IF
      bit_offset: 8
      bit_width: 1
      description: 'Break 2 interrupt flag

        This flag is set by hardware as soon as the break 2 input goes active. It
        can be cleared by software if the break 2 input is not active.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2OF
      bit_offset: 10
      bit_width: 1
      description: 'Capture/Compare 2 overcapture flag

        Refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3OF
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 overcapture flag

        Refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4OF
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 overcapture flag

        Refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: SBIF
      bit_offset: 13
      bit_width: 1
      description: 'System Break interrupt flag

        This flag is set by hardware as soon as the system break input goes active.
        It can be cleared by software if the system break input is not active.

        This flag must be reset to re-start PWM operation.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC5IF
      bit_offset: 16
      bit_width: 1
      description: 'Compare 5 interrupt flag

        Refer to CC1IF description (Note: Channel 5 can only be configured as output)'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC6IF
      bit_offset: 17
      bit_width: 1
      description: 'Compare 6 interrupt flag

        Refer to CC1IF description (Note: Channel 6 can only be configured as output)'
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2G
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC3G
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 3 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC4G
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 4 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: COMG
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare control update generation

        This bit can be set by software, it is automatically cleared by hardware

        Note: This bit acts only on channels having a complementary output.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TG
      bit_offset: 6
      bit_width: 1
      description: 'Trigger generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BG
      bit_offset: 7
      bit_width: 1
      description: 'Break generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: B2G
      bit_offset: 8
      bit_width: 1
      description: 'Break 2 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC1S bits\
        \ are writable only when the channel is OFF (CC1E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: 'Output Compare 1 fast enable

        This bit decreases the latency between a trigger event and a transition on
        the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1
        register), to have the output pulse starting as soon as possible after the
        starting trigger.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: "Output Compare 1 preload enable\nNote: These bits can not be modified\
        \ as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register)\
        \ and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the channel is configured in output).\n\
        The PWM mode can be used without validating the preload register only in one\
        \ pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not\
        \ guaranteed."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: These bits can not be modified as long as LOCK level 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the\
        \ channel is configured in output).\nNote: In PWM mode, the OCREF level changes\
        \ only when the result of the comparison changes or when the output compare\
        \ mode switches from \xE2\x80\x9Cfrozen\xE2\x80\x9D mode to \xE2\x80\x9CPWM\xE2\
        \x80\x9D mode.\nNote: On channels having a complementary output, this bit\
        \ field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then\
        \ the OC1M active bits take the new value from the preloaded bits only when\
        \ a COM event is generated.\nNote: The OC1M[3] bit is not contiguous, located\
        \ in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: OC1CE
      bit_offset: 7
      bit_width: 1
      description: Output Compare 1 clear enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 2 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC2S bits\
        \ are writable only when the channel is OFF (CC2E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC2FE
      bit_offset: 10
      bit_width: 1
      description: 'Output Compare 2 fast enable

        Refer to OC1FE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC2PE
      bit_offset: 11
      bit_width: 1
      description: 'Output Compare 2 preload enable

        Refer to OC1PE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC2M1
      bit_offset: 12
      bit_width: 3
      description: 'Output Compare 2 mode

        Refer to OC1M[3:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC2CE
      bit_offset: 15
      bit_width: 1
      description: 'Output Compare 2 clear enable

        Refer to OC1CE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC1M2
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: These bits can not be modified as long as LOCK level 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the\
        \ channel is configured in output).\nNote: In PWM mode, the OCREF level changes\
        \ only when the result of the comparison changes or when the output compare\
        \ mode switches from \xE2\x80\x9Cfrozen\xE2\x80\x9D mode to \xE2\x80\x9CPWM\xE2\
        \x80\x9D mode.\nNote: On channels having a complementary output, this bit\
        \ field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then\
        \ the OC1M active bits take the new value from the preloaded bits only when\
        \ a COM event is generated.\nNote: The OC1M[3] bit is not contiguous, located\
        \ in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: OC2M2
      bit_offset: 24
      bit_width: 1
      description: 'Output Compare 2 mode

        Refer to OC1M[3:0] description.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 Selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC1S bits\
        \ are writable only when the channel is OFF (CC1E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: "Input capture 1 prescaler\nThis bit-field defines the ratio of\
        \ the prescaler acting on CC1 input (IC1). The prescaler is reset as soon\
        \ as CC1E=\xE2\x80\x990\xE2\x80\x99 (TIMx_CCER register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 1 filter

        This bit-field defines the frequency used to sample TI1 input and the length
        of the digital filter applied to TI1. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 2 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC2S bits\
        \ are writable only when the channel is OFF (CC2E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC2PSC
      bit_offset: 10
      bit_width: 2
      description: 'Input capture 2 prescaler

        Refer to IC1PSC[1:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: IC2F
      bit_offset: 12
      bit_width: 4
      description: 'Input capture 2 filter

        Refer to IC1F[3:0] description.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCMR2_Output
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 3 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC3S bits\
        \ are writable only when the channel is OFF (CC3E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC3FE
      bit_offset: 2
      bit_width: 1
      description: 'Output compare 3 fast enable

        Refer to OC1FE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC3PE
      bit_offset: 3
      bit_width: 1
      description: 'Output compare 3 preload enable

        Refer to OC1PE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC3M1
      bit_offset: 4
      bit_width: 3
      description: 'Output compare 3 mode

        Refer to OC1M[3:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC3CE
      bit_offset: 7
      bit_width: 1
      description: 'Output compare 3 clear enable

        Refer to OC1CE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 4 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC4S bits\
        \ are writable only when the channel is OFF (CC4E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC4FE
      bit_offset: 10
      bit_width: 1
      description: 'Output compare 4 fast enable

        Refer to OC1FE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC4PE
      bit_offset: 11
      bit_width: 1
      description: 'Output compare 4 preload enable

        Refer to OC1PE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC4M1
      bit_offset: 12
      bit_width: 3
      description: 'Output compare 4 mode

        Refer to OC3M[3:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC4CE
      bit_offset: 15
      bit_width: 1
      description: 'Output compare 4 clear enable

        Refer to OC1CE description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC3M2
      bit_offset: 16
      bit_width: 1
      description: 'Output compare 3 mode

        Refer to OC1M[3:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC4M2
      bit_offset: 24
      bit_width: 1
      description: 'Output compare 4 mode

        Refer to OC3M[3:0] description.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCMR2_Input
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: "Capture/compare 3 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC3S bits\
        \ are writable only when the channel is OFF (CC3E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC3PSC
      bit_offset: 2
      bit_width: 2
      description: 'Input capture 3 prescaler

        Refer to IC1PSC[1:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: IC3F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 3 filter

        Refer to IC1F[3:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 4 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC4S bits\
        \ are writable only when the channel is OFF (CC4E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC4PSC
      bit_offset: 10
      bit_width: 2
      description: 'Input capture 4 prescaler

        Refer to IC1PSC[1:0] description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: IC4F
      bit_offset: 12
      bit_width: 4
      description: 'Input capture 4 filter

        Refer to IC1F[3:0] description.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: 'Capture/Compare 1 output enable

        When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI,
        OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer
        to  for details.

        Note: On channels having a complementary output, this bit is preloaded. If
        the CCPC bit is set in the TIMx_CR2 register then the CC1E active bit takes
        the new value from the preloaded bit only when a Commutation event is generated.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output polarity\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges/ The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tThe configuration is\
        \ reserved, it must not be used.\nNote: This bit is not writable as soon as\
        \ LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).\n\
        On channels having a complementary output, this bit is preloaded. If the CCPC\
        \ bit is set in the TIMx_CR2 register then the CC1P active bit takes the new\
        \ value from the preloaded bit only when a Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NE
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 1 complementary output enable

        On channels having a complementary output, this bit is preloaded. If the CCPC
        bit is set in the TIMx_CR2 register then the CC1NE active bit takes the new
        value from the preloaded bit only when a Commutation event is generated.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: "Capture/Compare 1 complementary output polarity\nCC1 channel configured\
        \ as output:\nCC1 channel configured as input:\nThis bit is used in conjunction\
        \ with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to CC1P description.\n\
        Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9D00\xE2\x80\x9D (channel\
        \ configured as output).\nOn channels having a complementary output, this\
        \ bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the\
        \ CC1NP active bit takes the new value from the preloaded bit only when a\
        \ Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2E
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 2 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2P
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare 2 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2NE
      bit_offset: 6
      bit_width: 1
      description: 'Capture/Compare 2 complementary output enable

        Refer to CC1NE description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2NP
      bit_offset: 7
      bit_width: 1
      description: 'Capture/Compare 2 complementary output polarity

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3E
      bit_offset: 8
      bit_width: 1
      description: 'Capture/Compare 3 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3P
      bit_offset: 9
      bit_width: 1
      description: 'Capture/Compare 3 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3NE
      bit_offset: 10
      bit_width: 1
      description: 'Capture/Compare 3 complementary output enable

        Refer to CC1NE description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3NP
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 complementary output polarity

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4E
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4P
      bit_offset: 13
      bit_width: 1
      description: 'Capture/Compare 4 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4NP
      bit_offset: 15
      bit_width: 1
      description: 'Capture/Compare 4 complementary output polarity

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC5E
      bit_offset: 16
      bit_width: 1
      description: 'Capture/Compare 5 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC5P
      bit_offset: 17
      bit_width: 1
      description: 'Capture/Compare 5 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC6E
      bit_offset: 20
      bit_width: 1
      description: 'Capture/Compare 6 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC6P
      bit_offset: 21
      bit_width: 1
      description: 'Capture/Compare 6 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_CNT
    addr: 0x24
    size_bits: 32
    description: counter
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: Counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: 'UIF copy

        This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the
        UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: TIM1_PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: "Prescaler value\nThe counter clock frequency (CK_CNT) is equal\
        \ to fCK_PSC / (PSC[15:0] + 1).\nPSC contains the value to be loaded in the\
        \ active prescaler register at each update event (including when the counter\
        \ is cleared through UG bit of TIMx_EGR register or through trigger controller\
        \ when configured in \xE2\x80\x9Creset mode\xE2\x80\x9D)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: 'Auto-reload value

        ARR is the value to be loaded in the actual auto-reload register.

        Refer to the  for more details about ARR update and behavior.

        The counter is blocked while the auto-reload value is null.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_RCR
    addr: 0x30
    size_bits: 32
    description: repetition counter register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: REP
      bit_offset: 0
      bit_width: 16
      description: Repetition counter value
  - !Register
    name: TIM1_CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 1 value
  - !Register
    name: TIM1_CCR2
    addr: 0x38
    size_bits: 32
    description: capture/compare register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR2
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 2 value
  - !Register
    name: TIM1_CCR3
    addr: 0x3c
    size_bits: 32
    description: capture/compare register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR3
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare value
  - !Register
    name: TIM1_CCR4
    addr: 0x40
    size_bits: 32
    description: capture/compare register 4
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR4
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare value
  - !Register
    name: TIM1_BDTR
    addr: 0x44
    size_bits: 32
    description: break and dead-time register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DTG
      bit_offset: 0
      bit_width: 8
      description: "Dead-time generator setup\nThis bit-field defines the duration\
        \ of the dead-time inserted between the complementary outputs. DT correspond\
        \ to this duration.\nDTG[7:5]=0xx => DT=DTG[7:0]x tDTG with tDTG=tDTS.\nDTG[7:5]=10x\
        \ => DT=(64+DTG[5:0])xtDTG with tDTG=2xtDTS.\nDTG[7:5]=110 => DT=(32+DTG[4:0])xtDTG\
        \ with tDTG=8xtDTS.\nDTG[7:5]=111 => DT=(32+DTG[4:0])xtDTG with tDTG=16xtDTS.\n\
        Example if tDTS=125\xC2\_ns (8\xC2\_MHz), dead-time possible values are:\n\
        0 to 15875\xC2\_ns by 125\xC2\_ns steps,\n16\xC2\_\xCE\xBCs to 31750\xC2\_\
        ns\xC2\_ by 250\xC2\_ns steps,\n32\xC2\_\xCE\xBCs to 63\xC2\_\xCE\xBCs by\
        \ 1\xC2\_\xCE\xBCs steps,\n64\xC2\_\xCE\xBCs to 126\xC2\_\xCE\xBCs by 2\xC2\
        \_\xCE\xBCs steps\nNote: This bit-field can not be modified as long as LOCK\
        \ level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: LOCK
      bit_offset: 8
      bit_width: 2
      description: 'Lock configuration

        These bits offer a write protection against software errors.

        Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR
        register has been written, their content is frozen until the next reset.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OSSI
      bit_offset: 10
      bit_width: 1
      description: 'Off-state selection for Idle mode

        This bit is used when MOE=0 due to a break event or by a software write, on
        channels configured as outputs.

        See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).

        Note: This bit can not be modified as soon as the LOCK level 2 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OSSR
      bit_offset: 11
      bit_width: 1
      description: 'Off-state selection for Run mode

        This bit is used when MOE=1 on channels having a complementary output which
        are configured as outputs. OSSR is not implemented if no complementary output
        is implemented in the timer.

        See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).

        Note: This bit can not be modified as soon as the LOCK level 2 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKE
      bit_offset: 12
      bit_width: 1
      description: 'Break enable

        This bit enables the complete break protection (including all sources connected
        to bk_acth and BKIN sources, as per ).

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKP
      bit_offset: 13
      bit_width: 1
      description: 'Break polarity

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AOE
      bit_offset: 14
      bit_width: 1
      description: 'Automatic output enable

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MOE
      bit_offset: 15
      bit_width: 1
      description: 'Main output enable

        This bit is cleared asynchronously by hardware as soon as one of the break
        inputs is active (BRK or BRK2). It is set by software or automatically depending
        on the AOE bit. It is acting only on the channels which are configured in
        output.

        In response to a break event or if MOE is written to 0: OC and OCN outputs
        are disabled or forced to idle state depending on the OSSI bit.

        See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKF
      bit_offset: 16
      bit_width: 4
      description: 'Break filter

        This bit-field defines the frequency used to sample BRK input and the length
        of the digital filter applied to BRK. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: BK2F
      bit_offset: 20
      bit_width: 4
      description: 'Break 2 filter

        This bit-field defines the frequency used to sample BRK2 input and the length
        of the digital filter applied to BRK2. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: BK2E
      bit_offset: 24
      bit_width: 1
      description: 'Break 2 enable

        Note: The BRK2 must only be used with OSSR = OSSI = 1.

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2P
      bit_offset: 25
      bit_width: 1
      description: 'Break 2 polarity

        Note: This bit cannot be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKDSRM
      bit_offset: 26
      bit_width: 1
      description: 'Break Disarm

        This bit is cleared by hardware when no break source is active.

        The BKDSRM bit must be set by software to release the bidirectional output
        control (open-drain output in Hi-Z state) and then be polled it until it is
        reset by hardware, indicating that the fault condition has disappeared.

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2DSRM
      bit_offset: 27
      bit_width: 1
      description: 'Break2 Disarm

        Refer to BKDSRM description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: BKBID
      bit_offset: 28
      bit_width: 1
      description: 'Break Bidirectional

        In the bidirectional mode (BKBID bit set to 1), the break input is configured
        both in input mode and in open drain output mode. Any active break event asserts
        a low logic level on the Break input to indicate an internal break event to
        external devices.

        Note: This bit cannot be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2BID
      bit_offset: 29
      bit_width: 1
      description: 'Break2 bidirectional

        Refer to BKBID description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bits vector defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit vector defines the length of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address),
        i.e. the number of transfers. Transfers can be in half-words or in bytes (see
        example below).

        ...

        Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIMx_CR1.

        If DBL = 7 bytes and DBA = TIMx_CR1 represents the address of the byte to
        be transferred, the address of the transfer should be given by the following
        equation:

        (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL

        In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives
        us the address from/to which the data is copied. In this case, the transfer
        is done to 7 registers starting from the following address: (TIMx_CR1 address)
        + DBA

        According to the configuration of the DMA Data Size, several cases may occur:

        If the DMA Data Size is configured in half-words, 16-bit data is transferred
        to each of the 7 registers.

        If the DMA Data Size is configured in bytes, the data is also transferred
        to 7 registers: the first register contains the first MSB byte, the second
        register, the first LSB byte and so on. So with the transfer Timer, one also
        has to specify the size of data transferred by DMA.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: TIM1_DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 32
      description: "DMA register for burst accesses\n\tA read or write operation to\
        \ the DMAR register accesses the register located at the address (TIMx_CR1\
        \ address) + (DBA + DMA index) x 4\n\twhere TIMx_CR1 address is the address\
        \ of the control register 1, DBA is the DMA base address configured in TIMx_DCR\
        \ register, DMA index is automatically controlled by the DMA transfer, and\
        \ ranges from 0 to DBL (DBL configured in TIMx_DCR)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: TIM1_OR1
    addr: 0x50
    size_bits: 32
    description: option register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OCREF_CLR
      bit_offset: 0
      bit_width: 1
      description: 'Ocref_clr source selection

        This bit selects the ocref_clr input source.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR3_Output
    addr: 0x54
    size_bits: 32
    description: "capture/compare mode register 2 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OC6M_bit3
      bit_offset: 24
      bit_width: 1
      description: "Output Compare 6 mode bit\n              3"
    - !Field
      name: OC5M_bit3
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 5 mode bit\n              3"
    - !Field
      name: OC6CE
      bit_offset: 15
      bit_width: 1
      description: "Output compare 6 clear\n              enable"
    - !Field
      name: OC6M
      bit_offset: 12
      bit_width: 3
      description: Output compare 6 mode
    - !Field
      name: OC6PE
      bit_offset: 11
      bit_width: 1
      description: "Output compare 6 preload\n              enable"
    - !Field
      name: OC6FE
      bit_offset: 10
      bit_width: 1
      description: "Output compare 6 fast\n              enable"
    - !Field
      name: OC5CE
      bit_offset: 7
      bit_width: 1
      description: "Output compare 5 clear\n              enable"
    - !Field
      name: OC5M
      bit_offset: 4
      bit_width: 3
      description: Output compare 5 mode
    - !Field
      name: OC5PE
      bit_offset: 3
      bit_width: 1
      description: "Output compare 5 preload\n              enable"
    - !Field
      name: OC5FE
      bit_offset: 2
      bit_width: 1
      description: "Output compare 5 fast\n              enable"
  - !Register
    name: TIM1_CCR5
    addr: 0x58
    size_bits: 32
    description: capture/compare register 4
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR5
      bit_offset: 0
      bit_width: 16
      description: 'Capture/Compare 5 value

        CCR5 is the value to be loaded in the actual capture/compare 5 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3
        register (bit OC5PE). Else the preload value is copied in the active capture/compare
        5 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signaled on OC5 output.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: GC5C1
      bit_offset: 29
      bit_width: 1
      description: 'Group Channel 5 and Channel 1

        Distortion on Channel 1 output:

        This bit can either have immediate effect or be preloaded and taken into account
        after an update event (if preload feature is selected in TIMxCCMR1).

        Note: it is also possible to apply this distortion on combined PWM signals.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GC5C2
      bit_offset: 30
      bit_width: 1
      description: 'Group Channel 5 and Channel 2

        Distortion on Channel 2 output:

        This bit can either have immediate effect or be preloaded and taken into account
        after an update event (if preload feature is selected in TIMxCCMR1).

        Note: it is also possible to apply this distortion on combined PWM signals.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: GC5C3
      bit_offset: 31
      bit_width: 1
      description: 'Group Channel 5 and Channel 3

        Distortion on Channel 3 output:

        This bit can either have immediate effect or be preloaded and taken into account
        after an update event (if preload feature is selected in TIMxCCMR2).

        Note: it is also possible to apply this distortion on combined PWM signals.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TIM1_CCR6
    addr: 0x5c
    size_bits: 32
    description: capture/compare register 4
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR6
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare value
  - !Register
    name: TIM1_AF1
    addr: 0x60
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: BKINE
      bit_offset: 0
      bit_width: 1
      description: "BRK BKIN input enable\nThis bit enables the BKIN alternate function\
        \ input for the timer\xE2\x80\x99s BRK input. BKIN input is 'ORed\xE2\x80\x99\
        \ with the other BRK sources.\nNote: This bit can not be modified as long\
        \ as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1E
      bit_offset: 1
      bit_width: 1
      description: "BRK COMP1 enable\nThis bit enables the COMP1 for the timer\xE2\
        \x80\x99s BRK input. COMP1 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2E
      bit_offset: 2
      bit_width: 1
      description: "BRK COMP2 enable\nThis bit enables the COMP2 for the timer\xE2\
        \x80\x99s BRK input. COMP2 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKINP
      bit_offset: 9
      bit_width: 1
      description: 'BRK BKIN input polarity

        This bit selects the BKIN alternate function input sensitivity. It must be
        programmed together with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1P
      bit_offset: 10
      bit_width: 1
      description: 'BRK COMP1 input polarity

        This bit selects the COMP1 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2P
      bit_offset: 11
      bit_width: 1
      description: 'BRK COMP2 input polarity

        This bit selects the COMP2 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETRSEL
      bit_offset: 14
      bit_width: 4
      description: 'ETR source selection

        These bits select the ETR input source.

        Others: Reserved

        Note: These bits can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: TIM1_AF2
    addr: 0x64
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: BK2INE
      bit_offset: 0
      bit_width: 1
      description: "BRK2 BKIN input enable\nThis bit enables the BKIN2 alternate function\
        \ input for the timer\xE2\x80\x99s BRK2 input. BKIN2 input is 'ORed\xE2\x80\
        \x99 with the other BRK2 sources.\nNote: This bit can not be modified as long\
        \ as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2CMP1E
      bit_offset: 1
      bit_width: 1
      description: "BRK2 COMP1 enable\nThis bit enables the COMP1 for the timer\xE2\
        \x80\x99s BRK2 input. COMP1 output is 'ORed\xE2\x80\x99 with the other BRK2\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2CMP2E
      bit_offset: 2
      bit_width: 1
      description: "BRK2 COMP2 enable\nThis bit enables the COMP2 for the timer\xE2\
        \x80\x99s BRK2 input. COMP2 output is 'ORed\xE2\x80\x99 with the other BRK2\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2INP
      bit_offset: 9
      bit_width: 1
      description: 'BRK2 BKIN2 input polarity

        This bit selects the BKIN2 alternate function input sensitivity. It must be
        programmed together with the BK2P polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2CMP1P
      bit_offset: 10
      bit_width: 1
      description: 'BRK2 COMP1 input polarity

        This bit selects the COMP1 input sensitivity. It must be programmed together
        with the BK2P polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BK2CMP2P
      bit_offset: 11
      bit_width: 1
      description: 'BRK2 COMP2 input polarity

        This bit selects the COMP2 input sensitivity. It must be programmed together
        with the BK2P polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TIM1_TISEL
    addr: 0x68
    size_bits: 32
    description: "TIM1 timer input selection\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'selects TI1[0] to TI1[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TI2SEL
      bit_offset: 8
      bit_width: 4
      description: 'selects TI2[0] to TI2[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TI3SEL
      bit_offset: 16
      bit_width: 4
      description: 'selects TI3[0] to TI3[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
    - !Field
      name: TI4SEL
      bit_offset: 24
      bit_width: 4
      description: 'selects TI4[0] to TI4[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
- !Module
  name: TIM2
  description: General-purpose-timers
  base_addr: 0x40000000
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock, gated mode and encoder mode can work only if the CEN
        bit has been previously set by software. However trigger mode can set the
        CEN bit automatically by hardware.

        CEN is cleared automatically in one-pulse mode, when an update event occurs.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIR
      bit_offset: 4
      bit_width: 1
      description: 'Direction

        Note: This bit is read only when the timer is configured in Center-aligned
        mode or Encoder mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMS
      bit_offset: 5
      bit_width: 2
      description: 'Center-aligned mode selection

        Note: It is not allowed to switch from edge-aligned mode to center-aligned
        mode as long as the counter is enabled (CEN=1)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and sampling clock used by the digital filters (ETR, TIx),'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits permit to select the information to be sent in master mode to slave
        timers for synchronization (TRGO). The combination is as follows:

        When the Counter Enable signal is controlled by the trigger input, there is
        a delay on TRGO, except if the master/slave mode is selected (see the MSM
        bit description in TIMx_SMCR register).

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TI1S
      bit_offset: 7
      bit_width: 1
      description: TI1 selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SMCR
    addr: 0x8
    size_bits: 32
    description: slave mode control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SMS1
      bit_offset: 0
      bit_width: 3
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        reinitializes the counter, generates an update of the registers and starts
        the counter.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: OCCS
      bit_offset: 3
      bit_width: 1
      description: 'OCREF clear selection

        This bit is used to select the OCREF clear source'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TS1
      bit_offset: 4
      bit_width: 3
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
    - !Field
      name: MSM
      bit_offset: 7
      bit_width: 1
      description: Master/Slave mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETF
      bit_offset: 8
      bit_width: 4
      description: 'External trigger filter

        This bit-field then defines the frequency used to sample ETRP signal and the
        length of the digital filter applied to ETRP. The digital filter is made of
        an event counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: ETPS
      bit_offset: 12
      bit_width: 2
      description: 'External trigger prescaler

        External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency.
        A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting
        fast external clocks.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ECE
      bit_offset: 14
      bit_width: 1
      description: 'External clock enable

        This bit enables External clock mode 2.

        Note: Setting the ECE bit has the same effect as selecting external clock
        mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).

        It is possible to simultaneously use external clock mode 2 with the following
        slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must
        not be connected to ETRF in this case (TS bits must not be 00111).

        If external clock mode 1 and external clock mode 2 are enabled at the same
        time, the external clock input is ETRF.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETP
      bit_offset: 15
      bit_width: 1
      description: 'External trigger polarity

        This bit selects whether ETR or ETR is used for trigger operations'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMS2
      bit_offset: 16
      bit_width: 1
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        reinitializes the counter, generates an update of the registers and starts
        the counter.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: TS2
      bit_offset: 20
      bit_width: 2
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 2 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3IE
      bit_offset: 3
      bit_width: 1
      description: Capture/Compare 3 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4IE
      bit_offset: 4
      bit_width: 1
      description: Capture/Compare 4 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIE
      bit_offset: 6
      bit_width: 1
      description: Trigger interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2DE
      bit_offset: 10
      bit_width: 1
      description: Capture/Compare 2 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3DE
      bit_offset: 11
      bit_width: 1
      description: Capture/Compare 3 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4DE
      bit_offset: 12
      bit_width: 1
      description: Capture/Compare 4 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TDE
      bit_offset: 14
      bit_width: 1
      description: Trigger DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow or underflow and if UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by a trigger event (refer to the synchro control
        register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when the content
        of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When
        the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF
        bit goes high on the counter overflow (in up-counting and up/down-counting
        modes) or underflow (in down-counting mode). There are 3 possible options
        for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1
        register for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IF
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3IF
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 3 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4IF
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 4 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TIF
      bit_offset: 6
      bit_width: 1
      description: 'Trigger interrupt flag

        This flag is set by hardware on the TRG trigger event (active edge detected
        on TRGI input when the slave mode controller is enabled in all modes but gated
        mode. It is set when the counter starts or stops when gated mode is selected.
        It is cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2OF
      bit_offset: 10
      bit_width: 1
      description: 'Capture/compare 2 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3OF
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4OF
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2G
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare 2 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC3G
      bit_offset: 3
      bit_width: 1
      description: 'Capture/compare 3 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC4G
      bit_offset: 4
      bit_width: 1
      description: 'Capture/compare 4 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TG
      bit_offset: 6
      bit_width: 1
      description: 'Trigger generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OC2M_3
      bit_offset: 24
      bit_width: 1
      description: "Output Compare 2 mode - bit\n              3"
    - !Field
      name: OC1M_3
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode - bit\n              3"
    - !Field
      name: OC2CE
      bit_offset: 15
      bit_width: 1
      description: "Output compare 2 clear\n              enable"
    - !Field
      name: OC2M
      bit_offset: 12
      bit_width: 3
      description: Output compare 2 mode
    - !Field
      name: OC2PE
      bit_offset: 11
      bit_width: 1
      description: "Output compare 2 preload\n              enable"
    - !Field
      name: OC2FE
      bit_offset: 10
      bit_width: 1
      description: "Output compare 2 fast\n              enable"
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: 'Capture/compare 2 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC1CE
      bit_offset: 7
      bit_width: 1
      description: Output compare 1 clear enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: In PWM mode, the OCREF level changes only when the result of the comparison\
        \ changes or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\
        \x80\x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nNote: The OC1M[3] bit\
        \ is not contiguous, located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: 'Output compare 1 preload enable

        Note: The PWM mode can be used without validating the preload register only
        in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is
        not guaranteed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: "Output compare 1 fast\n              enable"
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 1 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IC2F
      bit_offset: 12
      bit_width: 4
      description: Input capture 2 filter
    - !Field
      name: IC2PSC
      bit_offset: 10
      bit_width: 2
      description: Input capture 2 prescaler
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/compare 2\n              selection"
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: Input capture 1 filter
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: Input capture 1 prescaler
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1\n              selection"
  - !Register
    name: CCMR2_Output
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OC4M_3
      bit_offset: 24
      bit_width: 1
      description: "Output Compare 4 mode - bit\n              3"
    - !Field
      name: OC3M_3
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 3 mode - bit\n              3"
    - !Field
      name: OC4CE
      bit_offset: 15
      bit_width: 1
      description: "Output compare 4 clear\n              enable"
    - !Field
      name: OC4M
      bit_offset: 12
      bit_width: 3
      description: Output compare 4 mode
    - !Field
      name: OC4PE
      bit_offset: 11
      bit_width: 1
      description: "Output compare 4 preload\n              enable"
    - !Field
      name: OC4FE
      bit_offset: 10
      bit_width: 1
      description: "Output compare 4 fast\n              enable"
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 4\n              selection"
    - !Field
      name: OC3CE
      bit_offset: 7
      bit_width: 1
      description: "Output compare 3 clear\n              enable"
    - !Field
      name: OC3M
      bit_offset: 4
      bit_width: 3
      description: Output compare 3 mode
    - !Field
      name: OC3PE
      bit_offset: 3
      bit_width: 1
      description: "Output compare 3 preload\n              enable"
    - !Field
      name: OC3FE
      bit_offset: 2
      bit_width: 1
      description: "Output compare 3 fast\n              enable"
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 3\n              selection"
  - !Register
    name: CCMR2_Input
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IC4F
      bit_offset: 12
      bit_width: 4
      description: Input capture 4 filter
    - !Field
      name: IC4PSC
      bit_offset: 10
      bit_width: 2
      description: Input capture 4 prescaler
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: 'Capture/Compare 4 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC3F
      bit_offset: 4
      bit_width: 4
      description: Input capture 3 filter
    - !Field
      name: IC3PSC
      bit_offset: 2
      bit_width: 2
      description: Input capture 3 prescaler
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 3 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: Capture/Compare 1 output enable.
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output Polarity.\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges. The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tThis configuration\
        \ is reserved, it must not be used."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 1 output Polarity.

        CC1 channel configured as output: CC1NP must be kept cleared in this case.

        CC1 channel configured as input: This bit is used in conjunction with CC1P
        to define TI1FP1/TI2FP1 polarity. refer to CC1P description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2E
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 2 output enable.

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2P
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare 2 output Polarity.

        refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2NP
      bit_offset: 7
      bit_width: 1
      description: 'Capture/Compare 2 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3E
      bit_offset: 8
      bit_width: 1
      description: 'Capture/Compare 3 output enable.

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3P
      bit_offset: 9
      bit_width: 1
      description: 'Capture/Compare 3 output Polarity.

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3NP
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4E
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 output enable.

        refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4P
      bit_offset: 13
      bit_width: 1
      description: 'Capture/Compare 4 output Polarity.

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4NP
      bit_offset: 15
      bit_width: 1
      description: 'Capture/Compare 4 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT_H
      bit_offset: 16
      bit_width: 16
      description: "High counter value (TIM2\n              only)"
    - !Field
      name: CNT_L
      bit_offset: 0
      bit_width: 16
      description: Low counter value
  - !Register
    name: CNT_ALTERNATE5
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 31
      description: 'Most significant part counter value (TIM2)

        nullLeast significant part of counter value'
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: 'UIF Copy

        This bit is a read-only copy of the UIF bit of the TIMx_ISR register'
      read_allowed: true
      write_allowed: true
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 32
      description: 'High auto-reload value (TIM2)

        nullLow Auto-reload value

        ARR is the value to be loaded in the actual auto-reload register.

        Refer to the  for more details about ARR update and behavior.

        The counter is blocked while the auto-reload value is null.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 1 value (TIM2)

        nullLow Capture/Compare 1 value

        If channel CC1 is configured as output:

        CCR1 is the value to be loaded in the actual capture/compare 1 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1
        register (bit OC1PE). Else the preload value is copied in the active capture/compare
        1 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signaled on OC1 output.

        If channel CC1is configured as input:

        CCR1 is the counter value transferred by the last input capture 1 event (IC1).
        The TIMx_CCR1 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR2
    addr: 0x38
    size_bits: 32
    description: capture/compare register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR2
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 2 value (TIM2)

        nullLow Capture/Compare 2 value

        If channel CC2 is configured as output:

        CCR2 is the value to be loaded in the actual capture/compare 2 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1
        register (bit OC2PE). Else the preload value is copied in the active capture/compare
        2 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC2 output.

        If channel CC2 is configured as input:

        CCR2 is the counter value transferred by the last input capture 2 event (IC2).
        The TIMx_CCR2 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR3
    addr: 0x3c
    size_bits: 32
    description: capture/compare register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR3
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 3 value (TIM2)

        nullLow Capture/Compare value

        If channel CC3 is configured as output:

        CCR3 is the value to be loaded in the actual capture/compare 3 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2
        register (bit OC3PE). Else the preload value is copied in the active capture/compare
        3 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC3 output.

        If channel CC3is configured as input:

        CCR3 is the counter value transferred by the last input capture 3 event (IC3).
        The TIMx_CCR3 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR4
    addr: 0x40
    size_bits: 32
    description: capture/compare register 4
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR4
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 4 value (TIM2)

        nullLow Capture/Compare value

        if CC4 channel is configured as output (CC4S bits):

        CCR4 is the value to be loaded in the actual capture/compare 4 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2
        register (bit OC4PE). Else the preload value is copied in the active capture/compare
        4 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC4 output.

        if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register):

        CCR4 is the counter value transferred by the last input capture 4 event (IC4).
        The TIMx_CCR4 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bit vector defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...

        Example: Let us consider the following transfer: DBL = 7 transfers & DBA =
        TIMx_CR1. In this case the transfer is done to/from 7 registers starting from
        the TIMx_CR1 address.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit vector defines the number of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address).

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 16
      description: "DMA register for burst\n              accesses"
  - !Register
    name: OR1
    addr: 0x50
    size_bits: 32
    description: TIM option register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OCREF_CLR
      bit_offset: 0
      bit_width: 1
      description: 'Ocref_clr source selection

        This bit selects the ocref_clr input source.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: AF1
    addr: 0x60
    size_bits: 32
    description: "TIM alternate function option register\n          1"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ETRSEL
      bit_offset: 14
      bit_width: 4
      description: 'ETR source selection

        These bits select the ETR input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: "TIM alternate function option register\n          1"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'TI1[0] to TI1[15] input selection

        These bits select the TI1[0] to TI1[15] input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TI2SEL
      bit_offset: 8
      bit_width: 4
      description: 'TI2[0] to TI2[15] input selection

        These bits select the TI2[0] to TI2[15] input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
- !Module
  name: TIM3
  description: General-purpose-timers
  base_addr: 0x40000400
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock, gated mode and encoder mode can work only if the CEN
        bit has been previously set by software. However trigger mode can set the
        CEN bit automatically by hardware.

        CEN is cleared automatically in one-pulse mode, when an update event occurs.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIR
      bit_offset: 4
      bit_width: 1
      description: 'Direction

        Note: This bit is read only when the timer is configured in Center-aligned
        mode or Encoder mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMS
      bit_offset: 5
      bit_width: 2
      description: 'Center-aligned mode selection

        Note: It is not allowed to switch from edge-aligned mode to center-aligned
        mode as long as the counter is enabled (CEN=1)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and sampling clock used by the digital filters (ETR, TIx),'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits permit to select the information to be sent in master mode to slave
        timers for synchronization (TRGO). The combination is as follows:

        When the Counter Enable signal is controlled by the trigger input, there is
        a delay on TRGO, except if the master/slave mode is selected (see the MSM
        bit description in TIMx_SMCR register).

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: TI1S
      bit_offset: 7
      bit_width: 1
      description: TI1 selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SMCR
    addr: 0x8
    size_bits: 32
    description: slave mode control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SMS1
      bit_offset: 0
      bit_width: 3
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        reinitializes the counter, generates an update of the registers and starts
        the counter.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: OCCS
      bit_offset: 3
      bit_width: 1
      description: 'OCREF clear selection

        This bit is used to select the OCREF clear source'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TS1
      bit_offset: 4
      bit_width: 3
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
    - !Field
      name: MSM
      bit_offset: 7
      bit_width: 1
      description: Master/Slave mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETF
      bit_offset: 8
      bit_width: 4
      description: 'External trigger filter

        This bit-field then defines the frequency used to sample ETRP signal and the
        length of the digital filter applied to ETRP. The digital filter is made of
        an event counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: ETPS
      bit_offset: 12
      bit_width: 2
      description: 'External trigger prescaler

        External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency.
        A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting
        fast external clocks.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: ECE
      bit_offset: 14
      bit_width: 1
      description: 'External clock enable

        This bit enables External clock mode 2.

        Note: Setting the ECE bit has the same effect as selecting external clock
        mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).

        It is possible to simultaneously use external clock mode 2 with the following
        slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must
        not be connected to ETRF in this case (TS bits must not be 00111).

        If external clock mode 1 and external clock mode 2 are enabled at the same
        time, the external clock input is ETRF.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ETP
      bit_offset: 15
      bit_width: 1
      description: 'External trigger polarity

        This bit selects whether ETR or ETR is used for trigger operations'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMS2
      bit_offset: 16
      bit_width: 1
      description: 'Slave mode selection

        When external signals are selected the active edge of the trigger signal (TRGI)
        is linked to the polarity selected on the external input (see Input Control
        register and Control Register description.

        reinitializes the counter, generates an update of the registers and starts
        the counter.

        Note: The gated mode must not be used if TI1F_ED is selected as the trigger
        input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F,
        whereas the gated mode checks the level of the trigger signal.

        Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO
        or the TRGO2 signals must be enabled prior to receive events from the master
        timer, and the clock frequency (prescaler) must not be changed on-the-fly
        while triggers are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: TS2
      bit_offset: 20
      bit_width: 2
      description: 'Trigger selection

        This bit-field selects the trigger input to be used to synchronize the counter.

        Others: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 2 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3IE
      bit_offset: 3
      bit_width: 1
      description: Capture/Compare 3 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4IE
      bit_offset: 4
      bit_width: 1
      description: Capture/Compare 4 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIE
      bit_offset: 6
      bit_width: 1
      description: Trigger interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2DE
      bit_offset: 10
      bit_width: 1
      description: Capture/Compare 2 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC3DE
      bit_offset: 11
      bit_width: 1
      description: Capture/Compare 3 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC4DE
      bit_offset: 12
      bit_width: 1
      description: Capture/Compare 4 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TDE
      bit_offset: 14
      bit_width: 1
      description: Trigger DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow or underflow and if UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by a trigger event (refer to the synchro control
        register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when the content
        of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When
        the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF
        bit goes high on the counter overflow (in up-counting and up/down-counting
        modes) or underflow (in down-counting mode). There are 3 possible options
        for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1
        register for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IF
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3IF
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 3 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4IF
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 4 interrupt flag

        Refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: TIF
      bit_offset: 6
      bit_width: 1
      description: 'Trigger interrupt flag

        This flag is set by hardware on the TRG trigger event (active edge detected
        on TRGI input when the slave mode controller is enabled in all modes but gated
        mode. It is set when the counter starts or stops when gated mode is selected.
        It is cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2OF
      bit_offset: 10
      bit_width: 1
      description: 'Capture/compare 2 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3OF
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4OF
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 overcapture flag

        refer to CC1OF description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2G
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare 2 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC3G
      bit_offset: 3
      bit_width: 1
      description: 'Capture/compare 3 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CC4G
      bit_offset: 4
      bit_width: 1
      description: 'Capture/compare 4 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TG
      bit_offset: 6
      bit_width: 1
      description: 'Trigger generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OC2M_3
      bit_offset: 24
      bit_width: 1
      description: "Output Compare 2 mode - bit\n              3"
    - !Field
      name: OC1M_3
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode - bit\n              3"
    - !Field
      name: OC2CE
      bit_offset: 15
      bit_width: 1
      description: "Output compare 2 clear\n              enable"
    - !Field
      name: OC2M
      bit_offset: 12
      bit_width: 3
      description: Output compare 2 mode
    - !Field
      name: OC2PE
      bit_offset: 11
      bit_width: 1
      description: "Output compare 2 preload\n              enable"
    - !Field
      name: OC2FE
      bit_offset: 10
      bit_width: 1
      description: "Output compare 2 fast\n              enable"
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: 'Capture/compare 2 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC1CE
      bit_offset: 7
      bit_width: 1
      description: Output compare 1 clear enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: In PWM mode, the OCREF level changes only when the result of the comparison\
        \ changes or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\
        \x80\x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nNote: The OC1M[3] bit\
        \ is not contiguous, located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: 'Output compare 1 preload enable

        Note: The PWM mode can be used without validating the preload register only
        in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is
        not guaranteed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: "Output compare 1 fast\n              enable"
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 1 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IC2F
      bit_offset: 12
      bit_width: 4
      description: Input capture 2 filter
    - !Field
      name: IC2PSC
      bit_offset: 10
      bit_width: 2
      description: Input capture 2 prescaler
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/compare 2\n              selection"
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: Input capture 1 filter
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: Input capture 1 prescaler
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1\n              selection"
  - !Register
    name: CCMR2_Output
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OC4M_3
      bit_offset: 24
      bit_width: 1
      description: "Output Compare 4 mode - bit\n              3"
    - !Field
      name: OC3M_3
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 3 mode - bit\n              3"
    - !Field
      name: OC4CE
      bit_offset: 15
      bit_width: 1
      description: "Output compare 4 clear\n              enable"
    - !Field
      name: OC4M
      bit_offset: 12
      bit_width: 3
      description: Output compare 4 mode
    - !Field
      name: OC4PE
      bit_offset: 11
      bit_width: 1
      description: "Output compare 4 preload\n              enable"
    - !Field
      name: OC4FE
      bit_offset: 10
      bit_width: 1
      description: "Output compare 4 fast\n              enable"
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 4\n              selection"
    - !Field
      name: OC3CE
      bit_offset: 7
      bit_width: 1
      description: "Output compare 3 clear\n              enable"
    - !Field
      name: OC3M
      bit_offset: 4
      bit_width: 3
      description: Output compare 3 mode
    - !Field
      name: OC3PE
      bit_offset: 3
      bit_width: 1
      description: "Output compare 3 preload\n              enable"
    - !Field
      name: OC3FE
      bit_offset: 2
      bit_width: 1
      description: "Output compare 3 fast\n              enable"
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 3\n              selection"
  - !Register
    name: CCMR2_Input
    addr: 0x1c
    size_bits: 32
    description: "capture/compare mode register 2 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: IC4F
      bit_offset: 12
      bit_width: 4
      description: Input capture 4 filter
    - !Field
      name: IC4PSC
      bit_offset: 10
      bit_width: 2
      description: Input capture 4 prescaler
    - !Field
      name: CC4S
      bit_offset: 8
      bit_width: 2
      description: 'Capture/Compare 4 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC3F
      bit_offset: 4
      bit_width: 4
      description: Input capture 3 filter
    - !Field
      name: IC3PSC
      bit_offset: 2
      bit_width: 2
      description: Input capture 3 prescaler
    - !Field
      name: CC3S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 3 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: Capture/Compare 1 output enable.
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output Polarity.\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges. The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tThis configuration\
        \ is reserved, it must not be used."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 1 output Polarity.

        CC1 channel configured as output: CC1NP must be kept cleared in this case.

        CC1 channel configured as input: This bit is used in conjunction with CC1P
        to define TI1FP1/TI2FP1 polarity. refer to CC1P description.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2E
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 2 output enable.

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2P
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare 2 output Polarity.

        refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2NP
      bit_offset: 7
      bit_width: 1
      description: 'Capture/Compare 2 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3E
      bit_offset: 8
      bit_width: 1
      description: 'Capture/Compare 3 output enable.

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3P
      bit_offset: 9
      bit_width: 1
      description: 'Capture/Compare 3 output Polarity.

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC3NP
      bit_offset: 11
      bit_width: 1
      description: 'Capture/Compare 3 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4E
      bit_offset: 12
      bit_width: 1
      description: 'Capture/Compare 4 output enable.

        refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4P
      bit_offset: 13
      bit_width: 1
      description: 'Capture/Compare 4 output Polarity.

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC4NP
      bit_offset: 15
      bit_width: 1
      description: 'Capture/Compare 4 output Polarity.

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT_H
      bit_offset: 16
      bit_width: 16
      description: "High counter value (TIM2\n              only)"
    - !Field
      name: CNT_L
      bit_offset: 0
      bit_width: 16
      description: Low counter value
  - !Register
    name: CNT_ALTERNATE5
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 31
      description: 'Most significant part counter value (TIM2)

        nullLeast significant part of counter value'
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: 'UIF Copy

        This bit is a read-only copy of the UIF bit of the TIMx_ISR register'
      read_allowed: true
      write_allowed: true
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffffffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 32
      description: 'High auto-reload value (TIM2)

        nullLow Auto-reload value

        ARR is the value to be loaded in the actual auto-reload register.

        Refer to the  for more details about ARR update and behavior.

        The counter is blocked while the auto-reload value is null.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 1 value (TIM2)

        nullLow Capture/Compare 1 value

        If channel CC1 is configured as output:

        CCR1 is the value to be loaded in the actual capture/compare 1 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1
        register (bit OC1PE). Else the preload value is copied in the active capture/compare
        1 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signaled on OC1 output.

        If channel CC1is configured as input:

        CCR1 is the counter value transferred by the last input capture 1 event (IC1).
        The TIMx_CCR1 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR2
    addr: 0x38
    size_bits: 32
    description: capture/compare register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR2
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 2 value (TIM2)

        nullLow Capture/Compare 2 value

        If channel CC2 is configured as output:

        CCR2 is the value to be loaded in the actual capture/compare 2 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1
        register (bit OC2PE). Else the preload value is copied in the active capture/compare
        2 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC2 output.

        If channel CC2 is configured as input:

        CCR2 is the counter value transferred by the last input capture 2 event (IC2).
        The TIMx_CCR2 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR3
    addr: 0x3c
    size_bits: 32
    description: capture/compare register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR3
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 3 value (TIM2)

        nullLow Capture/Compare value

        If channel CC3 is configured as output:

        CCR3 is the value to be loaded in the actual capture/compare 3 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2
        register (bit OC3PE). Else the preload value is copied in the active capture/compare
        3 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC3 output.

        If channel CC3is configured as input:

        CCR3 is the counter value transferred by the last input capture 3 event (IC3).
        The TIMx_CCR3 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCR4
    addr: 0x40
    size_bits: 32
    description: capture/compare register 4
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR4
      bit_offset: 0
      bit_width: 32
      description: 'High Capture/Compare 4 value (TIM2)

        nullLow Capture/Compare value

        if CC4 channel is configured as output (CC4S bits):

        CCR4 is the value to be loaded in the actual capture/compare 4 register (preload
        value).

        It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2
        register (bit OC4PE). Else the preload value is copied in the active capture/compare
        4 register when an update event occurs.

        The active capture/compare register contains the value to be compared to the
        counter TIMx_CNT and signalled on OC4 output.

        if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register):

        CCR4 is the counter value transferred by the last input capture 4 event (IC4).
        The TIMx_CCR4 register is read-only and cannot be programmed.'
      read_allowed: true
      write_allowed: true
  - !Register
    name: DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bit vector defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...

        Example: Let us consider the following transfer: DBL = 7 transfers & DBA =
        TIMx_CR1. In this case the transfer is done to/from 7 registers starting from
        the TIMx_CR1 address.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit vector defines the number of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address).

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 16
      description: "DMA register for burst\n              accesses"
  - !Register
    name: OR1
    addr: 0x50
    size_bits: 32
    description: TIM option register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: OCREF_CLR
      bit_offset: 0
      bit_width: 1
      description: 'Ocref_clr source selection

        This bit selects the ocref_clr input source.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: AF1
    addr: 0x60
    size_bits: 32
    description: "TIM alternate function option register\n          1"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ETRSEL
      bit_offset: 14
      bit_width: 4
      description: 'ETR source selection

        These bits select the ETR input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: "TIM alternate function option register\n          1"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'TI1[0] to TI1[15] input selection

        These bits select the TI1[0] to TI1[15] input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TI2SEL
      bit_offset: 8
      bit_width: 4
      description: 'TI2[0] to TI2[15] input selection

        These bits select the TI2[0] to TI2[15] input source.

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
- !Module
  name: TIM6
  description: Basic timers
  base_addr: 0x40001000
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: Gated mode can work only if the CEN bit has been previously set by software.
        However trigger mode can set the CEN bit automatically by hardware.

        CEN is cleared automatically in one-pulse mode, when an update event occurs.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits are used to select the information to be sent in master mode to
        slave timers for synchronization (TRGO). The combination is as follows:

        When the Counter Enable signal is controlled by the trigger input, there is
        a delay on TRGO, except if the master/slave mode is selected (see the MSM
        bit description in the TIMx_SMCR register).

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: "Update interrupt flag\nThis bit is set by hardware on an update\
        \ event. It is cleared by software.\nAt overflow or underflow regarding the\
        \ repetition counter value and if UDIS = 0 in the TIMx_CR1 register.\nWhen\
        \ CNT is reinitialized by software using the UG bit in the TIMx_EGR register,\
        \ if URS\_=\_0 and UDIS\_=\_0 in the TIMx_CR1 register."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: Counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: 'UIF Copy

        This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the
        UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
- !Module
  name: TIM7
  description: Basic timers
  base_addr: 0x40001400
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: Gated mode can work only if the CEN bit has been previously set by software.
        However trigger mode can set the CEN bit automatically by hardware.

        CEN is cleared automatically in one-pulse mode, when an update event occurs.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits are used to select the information to be sent in master mode to
        slave timers for synchronization (TRGO). The combination is as follows:

        When the Counter Enable signal is controlled by the trigger input, there is
        a delay on TRGO, except if the master/slave mode is selected (see the MSM
        bit description in the TIMx_SMCR register).

        Note: The clock of the slave timer or ADC must be enabled prior to receive
        events from the master timer, and must not be changed on-the-fly while triggers
        are received from the master timer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: "Update interrupt flag\nThis bit is set by hardware on an update\
        \ event. It is cleared by software.\nAt overflow or underflow regarding the\
        \ repetition counter value and if UDIS = 0 in the TIMx_CR1 register.\nWhen\
        \ CNT is reinitialized by software using the UG bit in the TIMx_EGR register,\
        \ if URS\_=\_0 and UDIS\_=\_0 in the TIMx_CR1 register."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: Counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: 'UIF Copy

        This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the
        UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.'
      read_allowed: true
      write_allowed: false
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
- !Module
  name: TIM14
  description: General purpose timers
  base_addr: 0x40002000
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock and gated mode can work only if the CEN bit has been
        previously set by

        software. However trigger mode can set the CEN bit automatically by hardware.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable update interrupt
        (UEV) event generation.

        Counter overflow

        Setting the UG bit.

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the update interrupt (UEV)
        sources.

        Counter overflow

        Setting the UG bit'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and sampling clock used by the digital filters (TIx),'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: "Update interrupt flag\nThis bit is set by hardware on an update\
        \ event. It is cleared by software.\nAt overflow and if UDIS=\xE2\x80\x99\
        0\xE2\x80\x99 in the TIMx_CR1 register.\nWhen CNT is reinitialized by software\
        \ using the UG bit in TIMx_EGR register, if URS=\xE2\x80\x990\xE2\x80\x99\
        \ and UDIS=\xE2\x80\x990\xE2\x80\x99 in the TIMx_CR1 register."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when he content of
        the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the
        content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit
        goes high on the counter overflow (in up-counting and up/down-counting modes)
        or underflow (in down-counting mode). There are 3 possible options for flag
        setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register
        for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt is sent if enabled. The CC1OF flag
        is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 1 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: 'Output compare 1 fast enable

        This bit decreases the latency between a trigger event and a transition on
        the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1
        register), to have the output pulse starting as soon as possible after the
        starting trigger.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: 'Output compare 1 preload enable

        Note: The PWM mode can be used without validating the preload register only
        in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is
        not guaranteed.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: 'Output compare 1 mode (refer to bit 16 for OC1M[3])

        These bits define the behavior of the output reference signal OC1REF from
        which OC1 is derived. OC1REF is active high whereas OC1 active level depends
        on CC1P bit.

        Others: Reserved

        Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison
        changes or when the output compare mode switches from frozen to PWM mode.

        Note: The OC1M[3] bit is not contiguous, located in bit 16.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: OC1M2
      bit_offset: 16
      bit_width: 1
      description: 'Output compare 1 mode (refer to bit 16 for OC1M[3])

        These bits define the behavior of the output reference signal OC1REF from
        which OC1 is derived. OC1REF is active high whereas OC1 active level depends
        on CC1P bit.

        Others: Reserved

        Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison
        changes or when the output compare mode switches from frozen to PWM mode.

        Note: The OC1M[3] bit is not contiguous, located in bit 16.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: 'Capture/Compare 1 selection

        This bit-field defines the direction of the channel (input/output) as well
        as the used input.

        Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: "Input capture 1 prescaler\nThis bit-field defines the ratio of\
        \ the prescaler acting on CC1 input (IC1).\nThe prescaler is reset as soon\
        \ as CC1E=\xE2\x80\x990\xE2\x80\x99 (TIMx_CCER register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 1 filter

        This bit-field defines the frequency used to sample TI1 input and the length
        of the digital filter applied to TI1. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: Capture/Compare 1 output enable.
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output Polarity.\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges/ The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tThis configuration\
        \ is reserved, it must not be used."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: 'Capture/Compare 1 complementary output Polarity.

        CC1 channel configured as output: CC1NP must be kept cleared.

        CC1 channel configured as input: CC1NP bit is used in conjunction with CC1P
        to define TI1FP1 polarity (refer to CC1P description).'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: low counter value
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: UIF Copy
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Low Auto-reload value
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 16
      description: "Low Capture/Compare 1\n              value"
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: "TIM timer input selection\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'selects TI1[0] to TI1[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
- !Module
  name: TIM15
  description: General purpose timers
  base_addr: 0x40014000
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock and gated mode can work only if the CEN bit has been
        previously set by software. However trigger mode can set the CEN bit automatically
        by hardware.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One-pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bitfield indicates the division ratio between the timer clock (CK_INT)
        frequency and the dead-time and sampling clock (tDTS) used by the dead-time
        generators and the digital filters (TIx)'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCPC
      bit_offset: 0
      bit_width: 1
      description: 'Capture/compare preloaded control

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCUS
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare control update selection

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MMS
      bit_offset: 4
      bit_width: 3
      description: 'Master mode selection

        These bits allow to select the information to be sent in master mode to slave
        timers for synchronization (TRGO). The combination is as follows:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: TI1S
      bit_offset: 7
      bit_width: 1
      description: TI1 selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1
      bit_offset: 8
      bit_width: 1
      description: 'Output Idle state 1 (OC1 output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIM15_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1N
      bit_offset: 9
      bit_width: 1
      description: 'Output Idle state 1 (OC1N output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIM15_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS2
      bit_offset: 10
      bit_width: 1
      description: 'Output idle state 2 (OC2 output)

        Note: This bit cannot be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in the TIM15_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SMCR
    addr: 0x8
    size_bits: 32
    description: slave mode control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SMS1
      bit_offset: 0
      bit_width: 3
      description: "Slave mode selection\nWhen external signals are selected the active\
        \ edge of the trigger signal (TRGI) is linked to the polarity selected on\
        \ the external input (see Input Control register and Control Register description.\n\
        Other codes: reserved.\nNote: The gated mode must not be used if TI1F_ED is\
        \ selected as the trigger input (TS=\xE2\x80\x9900100\xE2\x80\x99). Indeed,\
        \ TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode\
        \ checks the level of the trigger signal.\nNote: The clock of the slave peripherals\
        \ (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled\
        \ prior to receive events from the master timer, and the clock frequency (prescaler)\
        \ must not be changed on-the-fly while triggers are received from the master\
        \ timer."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: TS1
      bit_offset: 4
      bit_width: 3
      description: 'Trigger selection

        This bit field selects the trigger input to be used to synchronize the counter.

        Other: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
    - !Field
      name: MSM
      bit_offset: 7
      bit_width: 1
      description: Master/slave mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SMS2
      bit_offset: 16
      bit_width: 1
      description: "Slave mode selection\nWhen external signals are selected the active\
        \ edge of the trigger signal (TRGI) is linked to the polarity selected on\
        \ the external input (see Input Control register and Control Register description.\n\
        Other codes: reserved.\nNote: The gated mode must not be used if TI1F_ED is\
        \ selected as the trigger input (TS=\xE2\x80\x9900100\xE2\x80\x99). Indeed,\
        \ TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode\
        \ checks the level of the trigger signal.\nNote: The clock of the slave peripherals\
        \ (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled\
        \ prior to receive events from the master timer, and the clock frequency (prescaler)\
        \ must not be changed on-the-fly while triggers are received from the master\
        \ timer."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
    - !Field
      name: TS2
      bit_offset: 20
      bit_width: 2
      description: 'Trigger selection

        This bit field selects the trigger input to be used to synchronize the counter.

        Other: Reserved

        See  for more details on ITRx meaning for each Timer.

        Note: These bits must be changed only when they are not used (e.g. when SMS=000)
        to avoid wrong edge detections at the transition.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 2 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIE
      bit_offset: 5
      bit_width: 1
      description: COM interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIE
      bit_offset: 6
      bit_width: 1
      description: Trigger interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIE
      bit_offset: 7
      bit_width: 1
      description: Break interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2DE
      bit_offset: 10
      bit_width: 1
      description: Capture/Compare 2 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMDE
      bit_offset: 13
      bit_width: 1
      description: COM DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TDE
      bit_offset: 14
      bit_width: 1
      description: Trigger DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow regarding the repetition counter value (update if repetition counter
        = 0) and if the UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by a trigger event (refer to control register (TIM15_SMCR)),
        if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when the content
        of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When
        the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF
        bit goes high on the counter overflow (in up-counting and up/down-counting
        modes) or underflow (in down-counting mode). There are 3 possible options
        for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1
        register for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2IF
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 interrupt flag

        refer to CC1IF description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: COMIF
      bit_offset: 5
      bit_width: 1
      description: "COM interrupt flag\nThis flag is set by hardware on a COM event\
        \ (once the capture/compare control bits \xE2\x80\x93CCxE, CCxNE, OCxM\xE2\
        \x80\x93 have been updated). It is cleared by software."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TIF
      bit_offset: 6
      bit_width: 1
      description: 'Trigger interrupt flag

        This flag is set by hardware on the TRG trigger event (active edge detected
        on TRGI input when the slave mode controller is enabled in all modes but gated
        mode, both edges in case gated mode is selected). It is set when the counter
        starts or stops when gated mode is selected. It is cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIF
      bit_offset: 7
      bit_width: 1
      description: 'Break interrupt flag

        This flag is set by hardware as soon as the break input goes active. It can
        be cleared by software if the break input is not active.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2OF
      bit_offset: 10
      bit_width: 1
      description: 'Capture/Compare 2 overcapture flag

        Refer to CC1OF description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2G
      bit_offset: 2
      bit_width: 1
      description: 'Capture/Compare 2 generation

        Refer to CC1G description'
      read_allowed: false
      write_allowed: true
    - !Field
      name: COMG
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare control update generation

        This bit can be set by software, it is automatically cleared by hardware.

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TG
      bit_offset: 6
      bit_width: 1
      description: 'Trigger generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BG
      bit_offset: 7
      bit_width: 1
      description: 'Break generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC1S bits\
        \ are writable only when the channel is OFF (CC1E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: 'Output Compare 1 fast enable

        This bit decreases the latency between a trigger event and a transition on
        the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1
        register), to have the output pulse starting as soon as possible after the
        starting trigger.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: "Output Compare 1 preload enable\nNote: These bits can not be modified\
        \ as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register)\
        \ and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the channel is configured in output).\n\
        The PWM mode can be used without validating the preload register only in one\
        \ pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not\
        \ guaranteed."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: These bits can not be modified as long as LOCK level 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the\
        \ channel is configured in output).\nIn PWM mode, the OCREF level changes\
        \ only when the result of the comparison changes or when the output compare\
        \ mode switches from \xE2\x80\x9Cfrozen\xE2\x80\x9D mode to \xE2\x80\x9CPWM\xE2\
        \x80\x9D mode.\nOn channels that have a complementary output, this bit field\
        \ is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M\
        \ active bits take the new value from the preloaded bits only when a COM event\
        \ is generated.\nThe OC1M[3] bit is not contiguous, located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 2 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC2S bits\
        \ are writable only when the channel is OFF (CC2E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OC2FE
      bit_offset: 10
      bit_width: 1
      description: Output Compare 2 fast enable
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC2PE
      bit_offset: 11
      bit_width: 1
      description: Output Compare 2 preload enable
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC2M1
      bit_offset: 12
      bit_width: 3
      description: Output Compare 2 mode
      read_allowed: true
      write_allowed: true
    - !Field
      name: OC1M2
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        Note: These bits can not be modified as long as LOCK level 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the\
        \ channel is configured in output).\nIn PWM mode, the OCREF level changes\
        \ only when the result of the comparison changes or when the output compare\
        \ mode switches from \xE2\x80\x9Cfrozen\xE2\x80\x9D mode to \xE2\x80\x9CPWM\xE2\
        \x80\x9D mode.\nOn channels that have a complementary output, this bit field\
        \ is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M\
        \ active bits take the new value from the preloaded bits only when a COM event\
        \ is generated.\nThe OC1M[3] bit is not contiguous, located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        12: B_0xC
        13: B_0xD
    - !Field
      name: OC2M2
      bit_offset: 24
      bit_width: 1
      description: Output Compare 2 mode
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 Selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC1S bits\
        \ are writable only when the channel is OFF (CC1E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: "Input capture 1 prescaler\nThis bit-field defines the ratio of\
        \ the prescaler acting on CC1 input (IC1). The prescaler is reset as soon\
        \ as CC1E=\xE2\x80\x990\xE2\x80\x99 (TIMx_CCER register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 1 filter

        This bit-field defines the frequency used to sample TI1 input and the length
        of the digital filter applied to TI1. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: CC2S
      bit_offset: 8
      bit_width: 2
      description: "Capture/Compare 2 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nNote: CC2S bits\
        \ are writable only when the channel is OFF (CC2E = '0\xE2\x80\x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC2PSC
      bit_offset: 10
      bit_width: 2
      description: Input capture 2 prescaler
      read_allowed: true
      write_allowed: true
    - !Field
      name: IC2F
      bit_offset: 12
      bit_width: 4
      description: Input capture 2 filter
      read_allowed: true
      write_allowed: true
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: 'Capture/Compare 1 output enable

        When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI,
        OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer
        to  for details.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output polarity\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges/ The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0: this configuration is\
        \ reserved, it must not be used.\nNote: This bit is not writable as soon as\
        \ LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).\n\
        On channels that have a complementary output, this bit is preloaded. If the\
        \ CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes\
        \ the new value from the preloaded bit only when a Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 1 complementary output enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: "Capture/Compare 1 complementary output polarity\nCC1 channel configured\
        \ as output:\nCC1 channel configured as input:\nThis bit is used in conjunction\
        \ with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer\nto CC1P description.\n\
        Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed\
        \ (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9D00\xE2\x80\x9D (the\
        \ channel is configured in output).\nOn channels that have a complementary\
        \ output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register\
        \ then the CC1NP active bit takes the new value from the preloaded bit only\
        \ when a Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC2E
      bit_offset: 4
      bit_width: 1
      description: 'Capture/Compare 2 output enable

        Refer to CC1E description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2P
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare 2 output polarity

        Refer to CC1P description'
      read_allowed: true
      write_allowed: true
    - !Field
      name: CC2NP
      bit_offset: 7
      bit_width: 1
      description: 'Capture/Compare 2 complementary output polarity

        Refer to CC1NP description'
      read_allowed: true
      write_allowed: true
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: UIF Copy
      read_allowed: true
      write_allowed: false
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Auto-reload value
  - !Register
    name: RCR
    addr: 0x30
    size_bits: 32
    description: repetition counter register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: REP
      bit_offset: 0
      bit_width: 8
      description: Repetition counter value
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 1 value
  - !Register
    name: CCR2
    addr: 0x38
    size_bits: 32
    description: capture/compare register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR2
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 2 value
  - !Register
    name: BDTR
    addr: 0x44
    size_bits: 32
    description: break and dead-time register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DTG
      bit_offset: 0
      bit_width: 8
      description: "Dead-time generator setup\nThis bit-field defines the duration\
        \ of the dead-time inserted between the complementary outputs. DT correspond\
        \ to this duration.\nDTG[7:5]=0xx => DT=DTG[7:0]x tdtg with tdtg=tDTS\nDTG[7:5]=10x\
        \ => DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS\nDTG[7:5]=110 => DT=(32+DTG[4:0])xtdtg\
        \ with Tdtg=8xtDTS\nDTG[7:5]=111 => DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS\n\
        Example if TDTS=125ns (8MHz), dead-time possible values are:\n0 to 15875 ns\
        \ by 125 ns steps,\n16 \xC2\xB5s to 31750 ns by 250 ns steps,\n32 \xC2\xB5\
        s to 63 \xC2\xB5s by 1 \xC2\xB5s steps,\n64 \xC2\xB5s to 126 \xC2\xB5s by\
        \ 2 \xC2\xB5s steps\nNote: This bit-field can not be modified as long as LOCK\
        \ level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: LOCK
      bit_offset: 8
      bit_width: 2
      description: 'Lock configuration

        These bits offer a write protection against software errors.

        Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR
        register has been written, their content is frozen until the next reset.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OSSI
      bit_offset: 10
      bit_width: 1
      description: "Off-state selection for Idle mode\nThis bit is used when MOE=0\
        \ on channels configured as outputs.\nSee OC/OCN enable description for more\
        \ details (enable register (TIM15_CCER) on page\xC2\_818).\nNote: This bit\
        \ can not be modified as soon as the LOCK level 2 has been programmed (LOCK\
        \ bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OSSR
      bit_offset: 11
      bit_width: 1
      description: "Off-state selection for Run mode\nThis bit is used when MOE=1\
        \ on channels that have a complementary output which are configured as outputs.\
        \ OSSR is not implemented if no complementary output is implemented in the\
        \ timer.\nSee OC/OCN enable description for more details (enable register\
        \ (TIM15_CCER) on page\xC2\_818).\nNote: This bit can not be modified as soon\
        \ as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKE
      bit_offset: 12
      bit_width: 1
      description: 'Break enable

        1; Break inputs (BRK and CCS clock failure event) enabled

        This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits
        in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
    - !Field
      name: BKP
      bit_offset: 13
      bit_width: 1
      description: 'Break polarity

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Any write operation to this bit takes a delay of 1 APB clock cycle to become
        effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AOE
      bit_offset: 14
      bit_width: 1
      description: 'Automatic output enable

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MOE
      bit_offset: 15
      bit_width: 1
      description: "Main output enable\nThis bit is cleared asynchronously by hardware\
        \ as soon as the break input is active. It is set by software or automatically\
        \ depending on the AOE bit. It is acting only on the channels which are configured\
        \ in output.\nSee OC/OCN enable description for more details (enable register\
        \ (TIM15_CCER) on page\xC2\_818)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKF
      bit_offset: 16
      bit_width: 4
      description: 'Break filter

        This bit-field defines the frequency used to sample the BRK input signal and
        the length of the digital filter applied to BRK. The digital filter is made
        of an event counter in which N events are needed to validate a transition
        on the output:

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: BKDSRM
      bit_offset: 26
      bit_width: 1
      description: 'Break Disarm

        This bit is cleared by hardware when no break source is active.

        The BKDSRM bit must be set by software to release the bidirectional output
        control (open-drain output in Hi-Z state) and then be polled it until it is
        reset by hardware, indicating that the fault condition has disappeared.

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKBID
      bit_offset: 28
      bit_width: 1
      description: 'Break Bidirectional

        In the bidirectional mode (BKBID bit set to 1), the break input is configured
        both in input mode and in open drain output mode. Any active break event asserts
        a low logic level on the Break input to indicate an internal break event to
        external devices.

        Note: This bit cannot be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bit field defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit field defines the length of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address).

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 16
      description: "DMA register for burst\n              accesses"
  - !Register
    name: AF1
    addr: 0x60
    size_bits: 32
    description: TIM15 alternate register 1
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: BKINE
      bit_offset: 0
      bit_width: 1
      description: "BRK BKIN input enable\nThis bit enables the BKIN alternate function\
        \ input for the timer\xE2\x80\x99s BRK input. BKIN input is 'ORed\xE2\x80\x99\
        \ with the other BRK sources.\nNote: This bit can not be modified as long\
        \ as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1E
      bit_offset: 1
      bit_width: 1
      description: "BRK COMP1 enable\nThis bit enables the COMP1 for the timer\xE2\
        \x80\x99s BRK input. COMP1 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2E
      bit_offset: 2
      bit_width: 1
      description: "BRK COMP2 enable\nThis bit enables the COMP2 for the timer\xE2\
        \x80\x99s BRK input. COMP2 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKINP
      bit_offset: 9
      bit_width: 1
      description: 'BRK BKIN input polarity

        This bit selects the BKIN alternate function input sensitivity. It must be
        programmed together with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1P
      bit_offset: 10
      bit_width: 1
      description: 'BRK COMP1 input polarity

        This bit selects the COMP1 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2P
      bit_offset: 11
      bit_width: 1
      description: 'BRK COMP2 input polarity

        This bit selects the COMP2 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: input selection register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'selects TI1[0] to TI1[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: TI2SEL
      bit_offset: 8
      bit_width: 4
      description: 'selects TI2[0] to TI2[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
- !Module
  name: TIM16
  description: General purpose timers
  base_addr: 0x40014400
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock and gated mode can work only if the CEN bit has been
        previously set by software. However trigger mode can set the CEN bit automatically
        by hardware.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and the dead-time and sampling clock (tDTS)used by the dead-time
        generators and the digital filters (TIx),'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCPC
      bit_offset: 0
      bit_width: 1
      description: 'Capture/compare preloaded control

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCUS
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare control update selection

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1
      bit_offset: 8
      bit_width: 1
      description: 'Output Idle state 1 (OC1 output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1N
      bit_offset: 9
      bit_width: 1
      description: 'Output Idle state 1 (OC1N output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIE
      bit_offset: 5
      bit_width: 1
      description: COM interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIE
      bit_offset: 7
      bit_width: 1
      description: Break interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow regarding the repetition counter value (update if repetition counter
        = 0) and if the UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when the content
        of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When
        the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF
        bit goes high on the counter overflow (in up-counting and up/down-counting
        modes) or underflow (in down-counting mode). There are 3 possible options
        for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1
        register for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIF
      bit_offset: 5
      bit_width: 1
      description: "COM interrupt flag\nThis flag is set by hardware on a COM event\
        \ (once the capture/compare control bits \xE2\x80\x93CCxE, CCxNE, OCxM\xE2\
        \x80\x93 have been updated). It is cleared by software."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIF
      bit_offset: 7
      bit_width: 1
      description: 'Break interrupt flag

        This flag is set by hardware as soon as the break input goes active. It can
        be cleared by software if the break input is not active.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMG
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare control update generation

        This bit can be set by software, it is automatically cleared by hardware.

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BG
      bit_offset: 7
      bit_width: 1
      description: 'Break generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nOthers: Reserved\n\
        Note: CC1S bits are writable only when the channel is OFF (CC1E = '0\xE2\x80\
        \x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: 'Output Compare 1 fast enable

        This bit decreases the latency between a trigger event and a transition on
        the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1
        register), to have the output pulse starting as soon as possible after the
        starting trigger.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: "Output Compare 1 preload enable\nNote: These bits can not be modified\
        \ as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register)\
        \ and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the channel is configured in output).\n\
        The PWM mode can be used without validating the preload register only in one\
        \ pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not\
        \ guaranteed."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        All other values: Reserved\nNote: These bits can not be modified as long as\
        \ LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\
        \x80\x9900\xE2\x80\x99 (the channel is configured in output).\nIn PWM mode\
        \ 1 or 2, the OCREF level changes only when the result of the comparison changes\
        \ or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\x80\
        \x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nThe OC1M[3] bit is not contiguous,\
        \ located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: OC1M2
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        All other values: Reserved\nNote: These bits can not be modified as long as\
        \ LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\
        \x80\x9900\xE2\x80\x99 (the channel is configured in output).\nIn PWM mode\
        \ 1 or 2, the OCREF level changes only when the result of the comparison changes\
        \ or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\x80\
        \x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nThe OC1M[3] bit is not contiguous,\
        \ located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 Selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nOthers: Reserved\n\
        Note: CC1S bits are writable only when the channel is OFF (CC1E = '0\xE2\x80\
        \x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: "Input capture 1 prescaler\nThis bit-field defines the ratio of\
        \ the prescaler acting on CC1 input (IC1).\nThe prescaler is reset as soon\
        \ as CC1E=\xE2\x80\x990\xE2\x80\x99 (TIMx_CCER register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 1 filter

        This bit-field defines the frequency used to sample TI1 input and the length
        of the digital filter applied to TI1. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: 'Capture/Compare 1 output enable

        When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI,
        OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer
        to  for details.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output polarity\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges/ The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tthis configuration\
        \ is reserved, it must not be used.\nNote: This bit is not writable as soon\
        \ as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).\n\
        On channels that have a complementary output, this bit is preloaded. If the\
        \ CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes\
        \ the new value from the preloaded bit only when a Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 1 complementary output enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: "Capture/Compare 1 complementary output polarity\nCC1 channel configured\
        \ as output:\nCC1 channel configured as input:\nThis bit is used in conjunction\
        \ with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer\nto the description\
        \ of CC1P.\nNote: This bit is not writable as soon as LOCK level 2 or 3 has\
        \ been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9D\
        00\xE2\x80\x9D (the channel is configured in output).\nOn channels that have\
        \ a complementary output, this bit is preloaded. If the CCPC bit is set in\
        \ the TIMx_CR2 register then the CC1NP active bit takes the new value from\
        \ the preloaded bit only when a commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: UIF Copy
      read_allowed: true
      write_allowed: false
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Auto-reload value
  - !Register
    name: RCR
    addr: 0x30
    size_bits: 32
    description: repetition counter register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: REP
      bit_offset: 0
      bit_width: 8
      description: Repetition counter value
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 1 value
  - !Register
    name: BDTR
    addr: 0x44
    size_bits: 32
    description: break and dead-time register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DTG
      bit_offset: 0
      bit_width: 8
      description: "Dead-time generator setup\nThis bit-field defines the duration\
        \ of the dead-time inserted between the complementary outputs. DT correspond\
        \ to this duration.\nDTG[7:5]=0xx => DT=DTG[7:0]x tdtg with tdtg=tDTS\nDTG[7:5]=10x\
        \ => DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS\nDTG[7:5]=110 => DT=(32+DTG[4:0])xtdtg\
        \ with Tdtg=8xtDTS\nDTG[7:5]=111 => DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS\n\
        Example if TDTS=125ns (8MHz), dead-time possible values are:\n0 to 15875 ns\
        \ by 125 ns steps,\n16 \xC2\xB5s to 31750 ns by 250 ns steps,\n32 \xC2\xB5\
        s to 63 \xC2\xB5s by 1 \xC2\xB5s steps,\n64 \xC2\xB5s to 126 \xC2\xB5s by\
        \ 2 \xC2\xB5s steps\nNote: This bit-field can not be modified as long as LOCK\
        \ level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: LOCK
      bit_offset: 8
      bit_width: 2
      description: 'Lock configuration

        These bits offer a write protection against software errors.

        Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR
        register has been written, their content is frozen until the next reset.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OSSI
      bit_offset: 10
      bit_width: 1
      description: "Off-state selection for Idle mode\nThis bit is used when MOE=0\
        \ on channels configured as outputs.\nSee OC/OCN enable description for more\
        \ details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\
        \_846).\nNote: This bit can not be modified as soon as the LOCK level 2 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OSSR
      bit_offset: 11
      bit_width: 1
      description: "Off-state selection for Run mode\nThis bit is used when MOE=1\
        \ on channels that have a complementary output which are configured as outputs.\
        \ OSSR is not implemented if no complementary output is implemented in the\
        \ timer.\nSee OC/OCN enable description for more details (enable register\
        \ (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\_846).\nNote: This bit\
        \ can not be modified as soon as the LOCK level 2 has been programmed (LOCK\
        \ bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKE
      bit_offset: 12
      bit_width: 1
      description: 'Break enable

        1; Break inputs (BRK and CCS clock failure event) enabled

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).

        Any write operation to this bit takes a delay of 1 APB clock cycle to become
        effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
    - !Field
      name: BKP
      bit_offset: 13
      bit_width: 1
      description: 'Break polarity

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Any write operation to this bit takes a delay of 1 APB clock cycle to become
        effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AOE
      bit_offset: 14
      bit_width: 1
      description: 'Automatic output enable

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MOE
      bit_offset: 15
      bit_width: 1
      description: "Main output enable\nThis bit is cleared asynchronously by hardware\
        \ as soon as the break input is active. It is set by software or automatically\
        \ depending on the AOE bit. It is acting only on the channels which are configured\
        \ in output.\nenable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\
        \_846)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKF
      bit_offset: 16
      bit_width: 4
      description: 'Break filter

        This bit-field defines the frequency used to sample BRK input and the length
        of the digital filter applied to BRK. The digital filter is made of an event
        counter in which N events are needed to validate a transition on the output:

        This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits
        in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: BKDSRM
      bit_offset: 26
      bit_width: 1
      description: 'Break Disarm

        This bit is cleared by hardware when no break source is active.

        The BKDSRM bit must be set by software to release the bidirectional output
        control (open-drain output in Hi-Z state) and then be polled it until it is
        reset by hardware, indicating that the fault condition has disappeared.

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKBID
      bit_offset: 28
      bit_width: 1
      description: 'Break Bidirectional

        In the bidirectional mode (BKBID bit set to 1), the break input is configured
        both in input mode and in open drain output mode. Any active break event asserts
        a low logic level on the Break input to indicate an internal break event to
        external devices.

        Note: This bit cannot be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bit field defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...

        Example: Let us consider the following transfer: DBL = 7 transfers and DBA
        = TIMx_CR1. In this case the transfer is done to/from 7 registers starting
        from the TIMx_CR1 address.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit field defines the length of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address),
        i.e. the number of transfers. Transfers can be in half-words or in bytes (see
        example below).

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 16
      description: "DMA register for burst\n              accesses"
  - !Register
    name: AF1
    addr: 0x60
    size_bits: 32
    description: TIM17 option register 1
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: BKINE
      bit_offset: 0
      bit_width: 1
      description: "BRK BKIN input enable\nThis bit enables the BKIN alternate function\
        \ input for the timer\xE2\x80\x99s BRK input. BKIN input is 'ORed\xE2\x80\x99\
        \ with the other BRK sources.\nNote: This bit can not be modified as long\
        \ as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1E
      bit_offset: 1
      bit_width: 1
      description: "BRK COMP1 enable\nThis bit enables the COMP1 for the timer\xE2\
        \x80\x99s BRK input. COMP1 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2E
      bit_offset: 2
      bit_width: 1
      description: "BRK COMP2 enable\nThis bit enables the COMP2 for the timer\xE2\
        \x80\x99s BRK input. COMP2 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKINP
      bit_offset: 9
      bit_width: 1
      description: 'BRK BKIN input polarity

        This bit selects the BKIN alternate function input sensitivity. It must be
        programmed together with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1P
      bit_offset: 10
      bit_width: 1
      description: 'BRK COMP1 input polarity

        This bit selects the COMP1 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2P
      bit_offset: 11
      bit_width: 1
      description: 'BRK COMP2 input polarity

        This bit selects the COMP2 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: input selection register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'selects TI1[0] to TI1[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
- !Module
  name: TIM17
  description: General purpose timers
  base_addr: 0x40014800
  size: 0x400
  registers:
  - !Register
    name: CR1
    addr: 0x0
    size_bits: 32
    description: control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CEN
      bit_offset: 0
      bit_width: 1
      description: 'Counter enable

        Note: External clock and gated mode can work only if the CEN bit has been
        previously set by software. However trigger mode can set the CEN bit automatically
        by hardware.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDIS
      bit_offset: 1
      bit_width: 1
      description: 'Update disable

        This bit is set and cleared by software to enable/disable UEV event generation.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller

        Buffered registers are then loaded with their preload values.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: URS
      bit_offset: 2
      bit_width: 1
      description: 'Update request source

        This bit is set and cleared by software to select the UEV event sources.

        Counter overflow/underflow

        Setting the UG bit

        Update generation through the slave mode controller'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OPM
      bit_offset: 3
      bit_width: 1
      description: One pulse mode
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ARPE
      bit_offset: 7
      bit_width: 1
      description: Auto-reload preload enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CKD
      bit_offset: 8
      bit_width: 2
      description: 'Clock division

        This bit-field indicates the division ratio between the timer clock (CK_INT)
        frequency and the dead-time and sampling clock (tDTS)used by the dead-time
        generators and the digital filters (TIx),'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: UIFREMAP
      bit_offset: 11
      bit_width: 1
      description: UIF status bit remapping
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCPC
      bit_offset: 0
      bit_width: 1
      description: 'Capture/compare preloaded control

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCUS
      bit_offset: 2
      bit_width: 1
      description: 'Capture/compare control update selection

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CCDS
      bit_offset: 3
      bit_width: 1
      description: Capture/compare DMA selection
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1
      bit_offset: 8
      bit_width: 1
      description: 'Output Idle state 1 (OC1 output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OIS1N
      bit_offset: 9
      bit_width: 1
      description: 'Output Idle state 1 (OC1N output)

        Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been
        programmed (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DIER
    addr: 0xc
    size_bits: 32
    description: DMA/Interrupt enable register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIE
      bit_offset: 0
      bit_width: 1
      description: Update interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IE
      bit_offset: 1
      bit_width: 1
      description: Capture/Compare 1 interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIE
      bit_offset: 5
      bit_width: 1
      description: COM interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIE
      bit_offset: 7
      bit_width: 1
      description: Break interrupt enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDE
      bit_offset: 8
      bit_width: 1
      description: Update DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1DE
      bit_offset: 9
      bit_width: 1
      description: Capture/Compare 1 DMA request enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: SR
    addr: 0x10
    size_bits: 32
    description: status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UIF
      bit_offset: 0
      bit_width: 1
      description: 'Update interrupt flag

        This bit is set by hardware on an update event. It is cleared by software.

        At overflow regarding the repetition counter value (update if repetition counter
        = 0) and if the UDIS=0 in the TIMx_CR1 register.

        When CNT is reinitialized by software using the UG bit in TIMx_EGR register,
        if URS=0 and UDIS=0 in the TIMx_CR1 register.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1IF
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 interrupt flag

        This flag is set by hardware. It is cleared by software (input capture or
        output compare mode) or by reading the TIMx_CCR1 register (input capture mode
        only).

        If channel CC1 is configured as output: this flag is set when the content
        of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When
        the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF
        bit goes high on the counter overflow (in up-counting and up/down-counting
        modes) or underflow (in down-counting mode). There are 3 possible options
        for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1
        register for the full description.

        If channel CC1 is configured as input: this bit is set when counter value
        has been captured in TIMx_CCR1 register (an edge has been detected on IC1,
        as per the edge sensitivity defined with the CC1P and CC1NP bits setting,
        in TIMx_CCER).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMIF
      bit_offset: 5
      bit_width: 1
      description: "COM interrupt flag\nThis flag is set by hardware on a COM event\
        \ (once the capture/compare control bits \xE2\x80\x93CCxE, CCxNE, OCxM\xE2\
        \x80\x93 have been updated). It is cleared by software."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BIF
      bit_offset: 7
      bit_width: 1
      description: 'Break interrupt flag

        This flag is set by hardware as soon as the break input goes active. It can
        be cleared by software if the break input is not active.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1OF
      bit_offset: 9
      bit_width: 1
      description: "Capture/Compare 1 overcapture flag\nThis flag is set by hardware\
        \ only when the corresponding channel is configured in input capture mode.\
        \ It is cleared by software by writing it to '0\xE2\x80\x99."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: EGR
    addr: 0x14
    size_bits: 32
    description: event generation register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: UG
      bit_offset: 0
      bit_width: 1
      description: 'Update generation

        This bit can be set by software, it is automatically cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1G
      bit_offset: 1
      bit_width: 1
      description: 'Capture/Compare 1 generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.

        If channel CC1 is configured as output:

        CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.

        If channel CC1 is configured as input:

        The current value of the counter is captured in TIMx_CCR1 register. The CC1IF
        flag is set, the corresponding interrupt or DMA request is sent if enabled.
        The CC1OF flag is set if the CC1IF flag was already high.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: COMG
      bit_offset: 5
      bit_width: 1
      description: 'Capture/Compare control update generation

        This bit can be set by software, it is automatically cleared by hardware.

        Note: This bit acts only on channels that have a complementary output.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BG
      bit_offset: 7
      bit_width: 1
      description: 'Break generation

        This bit is set by software in order to generate an event, it is automatically
        cleared by hardware.'
      read_allowed: false
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CCMR1_Output
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register (output\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nOthers: Reserved\n\
        Note: CC1S bits are writable only when the channel is OFF (CC1E = '0\xE2\x80\
        \x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1FE
      bit_offset: 2
      bit_width: 1
      description: 'Output Compare 1 fast enable

        This bit decreases the latency between a trigger event and a transition on
        the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1
        register), to have the output pulse starting as soon as possible after the
        starting trigger.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1PE
      bit_offset: 3
      bit_width: 1
      description: "Output Compare 1 preload enable\nNote: These bits can not be modified\
        \ as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register)\
        \ and CC1S=\xE2\x80\x9900\xE2\x80\x99 (the channel is configured in output).\n\
        The PWM mode can be used without validating the preload register only in one\
        \ pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not\
        \ guaranteed."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OC1M1
      bit_offset: 4
      bit_width: 3
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        All other values: Reserved\nNote: These bits can not be modified as long as\
        \ LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\
        \x80\x9900\xE2\x80\x99 (the channel is configured in output).\nIn PWM mode\
        \ 1 or 2, the OCREF level changes only when the result of the comparison changes\
        \ or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\x80\
        \x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nThe OC1M[3] bit is not contiguous,\
        \ located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: OC1M2
      bit_offset: 16
      bit_width: 1
      description: "Output Compare 1 mode\nThese bits define the behavior of the output\
        \ reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active\
        \ high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\n\
        All other values: Reserved\nNote: These bits can not be modified as long as\
        \ LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\
        \x80\x9900\xE2\x80\x99 (the channel is configured in output).\nIn PWM mode\
        \ 1 or 2, the OCREF level changes only when the result of the comparison changes\
        \ or when the output compare mode switches from \xE2\x80\x9Cfrozen\xE2\x80\
        \x9D mode to \xE2\x80\x9CPWM\xE2\x80\x9D mode.\nThe OC1M[3] bit is not contiguous,\
        \ located in bit 16."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: CCMR1_Input
    addr: 0x18
    size_bits: 32
    description: "capture/compare mode register 1 (input\n          mode)"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1S
      bit_offset: 0
      bit_width: 2
      description: "Capture/Compare 1 Selection\nThis bit-field defines the direction\
        \ of the channel (input/output) as well as the used input.\nOthers: Reserved\n\
        Note: CC1S bits are writable only when the channel is OFF (CC1E = '0\xE2\x80\
        \x99 in TIMx_CCER)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IC1PSC
      bit_offset: 2
      bit_width: 2
      description: "Input capture 1 prescaler\nThis bit-field defines the ratio of\
        \ the prescaler acting on CC1 input (IC1).\nThe prescaler is reset as soon\
        \ as CC1E=\xE2\x80\x990\xE2\x80\x99 (TIMx_CCER register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: IC1F
      bit_offset: 4
      bit_width: 4
      description: 'Input capture 1 filter

        This bit-field defines the frequency used to sample TI1 input and the length
        of the digital filter applied to TI1. The digital filter is made of an event
        counter in which N consecutive events are needed to validate a transition
        on the output:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
  - !Register
    name: CCER
    addr: 0x20
    size_bits: 32
    description: "capture/compare enable\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CC1E
      bit_offset: 0
      bit_width: 1
      description: 'Capture/Compare 1 output enable

        When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI,
        OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer
        to  for details.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1P
      bit_offset: 1
      bit_width: 1
      description: "Capture/Compare 1 output polarity\nWhen CC1 channel is configured\
        \ as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and\
        \ TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising\
        \ edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is not inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling\
        \ edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger\
        \ operations in reset, external clock or trigger mode), TIxFP1 is inverted\
        \ (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both\
        \ edges/ The circuit is sensitive to both TIxFP1 rising and falling edges\
        \ (capture or trigger operations in reset, external clock or trigger mode),\
        \ TIxFP1is not inverted (trigger operation in gated mode). This configuration\
        \ must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tthis configuration\
        \ is reserved, it must not be used.\nNote: This bit is not writable as soon\
        \ as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).\n\
        On channels that have a complementary output, this bit is preloaded. If the\
        \ CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes\
        \ the new value from the preloaded bit only when a Commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NE
      bit_offset: 2
      bit_width: 1
      description: Capture/Compare 1 complementary output enable
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CC1NP
      bit_offset: 3
      bit_width: 1
      description: "Capture/Compare 1 complementary output polarity\nCC1 channel configured\
        \ as output:\nCC1 channel configured as input:\nThis bit is used in conjunction\
        \ with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer\nto the description\
        \ of CC1P.\nNote: This bit is not writable as soon as LOCK level 2 or 3 has\
        \ been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\xE2\x80\x9D\
        00\xE2\x80\x9D (the channel is configured in output).\nOn channels that have\
        \ a complementary output, this bit is preloaded. If the CCPC bit is set in\
        \ the TIMx_CR2 register then the CC1NP active bit takes the new value from\
        \ the preloaded bit only when a commutation event is generated."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CNT
    addr: 0x24
    size_bits: 32
    description: counter
    fields:
    - !Field
      name: CNT
      bit_offset: 0
      bit_width: 16
      description: counter value
      read_allowed: true
      write_allowed: true
    - !Field
      name: UIFCPY
      bit_offset: 31
      bit_width: 1
      description: UIF Copy
      read_allowed: true
      write_allowed: false
  - !Register
    name: PSC
    addr: 0x28
    size_bits: 32
    description: prescaler
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 16
      description: Prescaler value
  - !Register
    name: ARR
    addr: 0x2c
    size_bits: 32
    description: auto-reload register
    read_allowed: true
    write_allowed: true
    reset_value: 0xffff
    fields:
    - !Field
      name: ARR
      bit_offset: 0
      bit_width: 16
      description: Auto-reload value
  - !Register
    name: RCR
    addr: 0x30
    size_bits: 32
    description: repetition counter register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: REP
      bit_offset: 0
      bit_width: 8
      description: Repetition counter value
  - !Register
    name: CCR1
    addr: 0x34
    size_bits: 32
    description: capture/compare register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: CCR1
      bit_offset: 0
      bit_width: 16
      description: Capture/Compare 1 value
  - !Register
    name: BDTR
    addr: 0x44
    size_bits: 32
    description: break and dead-time register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DTG
      bit_offset: 0
      bit_width: 8
      description: "Dead-time generator setup\nThis bit-field defines the duration\
        \ of the dead-time inserted between the complementary outputs. DT correspond\
        \ to this duration.\nDTG[7:5]=0xx => DT=DTG[7:0]x tdtg with tdtg=tDTS\nDTG[7:5]=10x\
        \ => DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS\nDTG[7:5]=110 => DT=(32+DTG[4:0])xtdtg\
        \ with Tdtg=8xtDTS\nDTG[7:5]=111 => DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS\n\
        Example if TDTS=125ns (8MHz), dead-time possible values are:\n0 to 15875 ns\
        \ by 125 ns steps,\n16 \xC2\xB5s to 31750 ns by 250 ns steps,\n32 \xC2\xB5\
        s to 63 \xC2\xB5s by 1 \xC2\xB5s steps,\n64 \xC2\xB5s to 126 \xC2\xB5s by\
        \ 2 \xC2\xB5s steps\nNote: This bit-field can not be modified as long as LOCK\
        \ level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: LOCK
      bit_offset: 8
      bit_width: 2
      description: 'Lock configuration

        These bits offer a write protection against software errors.

        Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR
        register has been written, their content is frozen until the next reset.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: OSSI
      bit_offset: 10
      bit_width: 1
      description: "Off-state selection for Idle mode\nThis bit is used when MOE=0\
        \ on channels configured as outputs.\nSee OC/OCN enable description for more\
        \ details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\
        \_846).\nNote: This bit can not be modified as soon as the LOCK level 2 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OSSR
      bit_offset: 11
      bit_width: 1
      description: "Off-state selection for Run mode\nThis bit is used when MOE=1\
        \ on channels that have a complementary output which are configured as outputs.\
        \ OSSR is not implemented if no complementary output is implemented in the\
        \ timer.\nSee OC/OCN enable description for more details (enable register\
        \ (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\_846).\nNote: This bit\
        \ can not be modified as soon as the LOCK level 2 has been programmed (LOCK\
        \ bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKE
      bit_offset: 12
      bit_width: 1
      description: 'Break enable

        1; Break inputs (BRK and CCS clock failure event) enabled

        Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK
        bits in TIMx_BDTR register).

        Any write operation to this bit takes a delay of 1 APB clock cycle to become
        effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
    - !Field
      name: BKP
      bit_offset: 13
      bit_width: 1
      description: 'Break polarity

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Any write operation to this bit takes a delay of 1 APB clock cycle to become
        effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: AOE
      bit_offset: 14
      bit_width: 1
      description: 'Automatic output enable

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MOE
      bit_offset: 15
      bit_width: 1
      description: "Main output enable\nThis bit is cleared asynchronously by hardware\
        \ as soon as the break input is active. It is set by software or automatically\
        \ depending on the AOE bit. It is acting only on the channels which are configured\
        \ in output.\nenable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page\xC2\
        \_846)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKF
      bit_offset: 16
      bit_width: 4
      description: 'Break filter

        This bit-field defines the frequency used to sample BRK input and the length
        of the digital filter applied to BRK. The digital filter is made of an event
        counter in which N events are needed to validate a transition on the output:

        This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits
        in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
        12: B_0xC
        13: B_0xD
        14: B_0xE
        15: B_0xF
    - !Field
      name: BKDSRM
      bit_offset: 26
      bit_width: 1
      description: 'Break Disarm

        This bit is cleared by hardware when no break source is active.

        The BKDSRM bit must be set by software to release the bidirectional output
        control (open-drain output in Hi-Z state) and then be polled it until it is
        reset by hardware, indicating that the fault condition has disappeared.

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKBID
      bit_offset: 28
      bit_width: 1
      description: 'Break Bidirectional

        In the bidirectional mode (BKBID bit set to 1), the break input is configured
        both in input mode and in open drain output mode. Any active break event asserts
        a low logic level on the Break input to indicate an internal break event to
        external devices.

        Note: This bit cannot be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).

        Note: Any write operation to this bit takes a delay of 1 APB clock cycle to
        become effective.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: DCR
    addr: 0x48
    size_bits: 32
    description: DMA control register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DBA
      bit_offset: 0
      bit_width: 5
      description: 'DMA base address

        This 5-bit field defines the base-address for DMA transfers (when read/write
        access are done through the TIMx_DMAR address). DBA is defined as an offset
        starting from the address of the TIMx_CR1 register.

        Example:

        ...

        Example: Let us consider the following transfer: DBL = 7 transfers and DBA
        = TIMx_CR1. In this case the transfer is done to/from 7 registers starting
        from the TIMx_CR1 address.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
    - !Field
      name: DBL
      bit_offset: 8
      bit_width: 5
      description: 'DMA burst length

        This 5-bit field defines the length of DMA transfers (the timer recognizes
        a burst transfer when a read or a write access is done to the TIMx_DMAR address),
        i.e. the number of transfers. Transfers can be in half-words or in bytes (see
        example below).

        ...'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        17: B_0x11
  - !Register
    name: DMAR
    addr: 0x4c
    size_bits: 32
    description: DMA address for full transfer
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: DMAB
      bit_offset: 0
      bit_width: 16
      description: "DMA register for burst\n              accesses"
  - !Register
    name: AF1
    addr: 0x60
    size_bits: 32
    description: TIM17 option register 1
    read_allowed: true
    write_allowed: true
    reset_value: 0x1
    fields:
    - !Field
      name: BKINE
      bit_offset: 0
      bit_width: 1
      description: "BRK BKIN input enable\nThis bit enables the BKIN alternate function\
        \ input for the timer\xE2\x80\x99s BRK input. BKIN input is 'ORed\xE2\x80\x99\
        \ with the other BRK sources.\nNote: This bit can not be modified as long\
        \ as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1E
      bit_offset: 1
      bit_width: 1
      description: "BRK COMP1 enable\nThis bit enables the COMP1 for the timer\xE2\
        \x80\x99s BRK input. COMP1 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2E
      bit_offset: 2
      bit_width: 1
      description: "BRK COMP2 enable\nThis bit enables the COMP2 for the timer\xE2\
        \x80\x99s BRK input. COMP2 output is 'ORed\xE2\x80\x99 with the other BRK\
        \ sources.\nNote: This bit can not be modified as long as LOCK level 1 has\
        \ been programmed (LOCK bits in TIMx_BDTR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKINP
      bit_offset: 9
      bit_width: 1
      description: 'BRK BKIN input polarity

        This bit selects the BKIN alternate function input sensitivity. It must be
        programmed together with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP1P
      bit_offset: 10
      bit_width: 1
      description: 'BRK COMP1 input polarity

        This bit selects the COMP1 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: BKCMP2P
      bit_offset: 11
      bit_width: 1
      description: 'BRK COMP2 input polarity

        This bit selects the COMP2 input sensitivity. It must be programmed together
        with the BKP polarity bit.

        Note: This bit can not be modified as long as LOCK level 1 has been programmed
        (LOCK bits in TIMx_BDTR register).'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: TISEL
    addr: 0x68
    size_bits: 32
    description: input selection register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TI1SEL
      bit_offset: 0
      bit_width: 4
      description: 'selects TI1[0] to TI1[15] input

        Others: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
- !Module
  name: USART1
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40013800
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: USART2
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40004400
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: USART3
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40004800
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: USART4
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40004c00
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: USART5
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40005000
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: USART6
  description: "Universal synchronous asynchronous receiver\n      transmitter"
  base_addr: 0x40013c00
  size: 0x400
  registers:
  - !Register
    name: CR1_FIFO_ENABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNEIE
      bit_offset: 5
      bit_width: 1
      description: 'RXFIFO not empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNFIE
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFEIE
      bit_offset: 30
      bit_width: 1
      description: 'TXFIFO empty interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFFIE
      bit_offset: 31
      bit_width: 1
      description: 'RXFIFO Full interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR1_FIFO_DISABLED
    addr: 0x0
    size_bits: 32
    description: Control register 1
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: UE
      bit_offset: 0
      bit_width: 1
      description: 'USART enable

        When this bit is cleared, the USART prescalers and outputs are stopped immediately,
        and all current operations are discarded. The USART configuration is kept,
        but all the USART_ISR status flags are reset. This bit is set and cleared
        by software.

        Note: To enter low-power mode without generating errors on the line, the TE
        bit must be previously reset and the software must wait for the TC bit in
        the USART_ISR to be set before resetting the UE bit.

        The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
        before resetting the UE bit.

        In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
        regardless of the UE bit value.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UESM
      bit_offset: 1
      bit_width: 1
      description: 'USART enable in low-power mode

        When this bit is cleared, the USART cannot wake up the MCU from low-power
        mode.

        When this bit is set, the USART can wake up the MCU from low-power mode.

        This bit is set and cleared by software.

        Note: It is recommended to set the UESM bit just before entering low-power
        mode and clear it when exit from low-power mode.

        If the USART does not support the wakeup from Stop feature, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RE
      bit_offset: 2
      bit_width: 1
      description: 'Receiver enable

        This bit enables the receiver. It is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TE
      bit_offset: 3
      bit_width: 1
      description: "Transmitter enable\nThis bit enables the transmitter. It is set\
        \ and cleared by software.\nNote: During transmission, a low pulse on the\
        \ TE bit ('0\xE2\x80\x99 followed by '1\xE2\x80\x99) sends a preamble (idle\
        \ line) after the current word, except in Smartcard mode. In order to generate\
        \ an idle character, the TE must not be immediately written to '1\xE2\x80\x99\
        . To ensure the required duration, the software can poll the TEACK bit in\
        \ the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1\
        \ bit-time delay before the transmission starts."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLEIE
      bit_offset: 4
      bit_width: 1
      description: 'IDLE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNEIE
      bit_offset: 5
      bit_width: 1
      description: 'Receive data register not empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCIE
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXEIE
      bit_offset: 7
      bit_width: 1
      description: 'Transmit data register empty

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PEIE
      bit_offset: 8
      bit_width: 1
      description: 'PE interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PS
      bit_offset: 9
      bit_width: 1
      description: "Parity selection\nThis bit selects the odd or even parity when\
        \ the parity generation/detection is enabled (PCE bit set). It is set and\
        \ cleared by software. The parity is selected after the current byte.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: PCE
      bit_offset: 10
      bit_width: 1
      description: "Parity control enable\nThis bit selects the hardware parity control\
        \ (generation and detection). When the parity control is enabled, the computed\
        \ parity is inserted at the MSB position (9th bit if M\xC2\_=\xC2\_1; 8th\
        \ bit if M\xC2\_=\xC2\_0) and the parity is checked on the received data.\
        \ This bit is set and cleared by software. Once it is set, PCE is active after\
        \ the current byte (in reception and in transmission).\nThis bitfield can\
        \ only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WAKE
      bit_offset: 11
      bit_width: 1
      description: "Receiver wakeup method\nThis bit determines the USART wakeup method\
        \ from Mute mode. It is set or cleared by software.\nThis bitfield can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M0
      bit_offset: 12
      bit_width: 1
      description: "Word length\nThis bit is used in conjunction with bit 28 (M1)\
        \ to determine the word length. It is set or cleared by software (refer to\
        \ bit 28 (M1)description).\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
    - !Field
      name: MME
      bit_offset: 13
      bit_width: 1
      description: 'Mute mode enable

        This bit enables the USART Mute mode function. When set, the USART can switch
        between active and Mute mode, as defined by the WAKE bit. It is set and cleared
        by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMIE
      bit_offset: 14
      bit_width: 1
      description: 'Character match interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVER8
      bit_offset: 15
      bit_width: 1
      description: "Oversampling mode\nThis bit can only be written when the USART\
        \ is disabled (UE\xC2\_=\xC2\_0).\nNote: In LIN, IrDA and Smartcard modes,\
        \ this bit must be kept cleared."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEDT
      bit_offset: 16
      bit_width: 5
      description: "Driver Enable deassertion time\nThis 5-bit value defines the time\
        \ between the end of the last stop bit, in a transmitted message, and the\
        \ de-activation of the DE (Driver Enable) signal. It is expressed in sample\
        \ time units (1/8 or 1/16 bit time, depending on the oversampling rate).\n\
        If the USART_TDR register is written during the DEDT time, the new data is\
        \ transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If the Driver Enable feature is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: DEAT
      bit_offset: 21
      bit_width: 5
      description: "Driver Enable assertion time\nThis 5-bit value defines the time\
        \ between the activation of the DE (Driver Enable) signal and the beginning\
        \ of the start bit. It is expressed in sample time units (1/8 or 1/16 bit\
        \ time, depending on the oversampling rate).\nThis bitfield can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
    - !Field
      name: RTOIE
      bit_offset: 26
      bit_width: 1
      description: 'Receiver timeout interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBIE
      bit_offset: 27
      bit_width: 1
      description: 'End of Block interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: M1
      bit_offset: 28
      bit_width: 1
      description: "Word length\nThis bit must be used in conjunction with bit 12\
        \ (M0) to determine the word length. It is set or cleared by software.\nM[1:0]\
        \ = '00\xE2\x80\x99: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\xE2\
        \x80\x99: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\xE2\x80\x99:\
        \ 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: In 7-bits data length mode,\
        \ the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames\
        \ detection) are not supported."
      read_allowed: true
      write_allowed: true
    - !Field
      name: FIFOEN
      bit_offset: 29
      bit_width: 1
      description: "FIFO mode enable\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave\
        \ mode and in Smartcard modes only. It must not be enabled in IrDA and LIN\
        \ modes."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: CR2
    addr: 0x4
    size_bits: 32
    description: Control register 2
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: SLVEN
      bit_offset: 0
      bit_width: 1
      description: 'Synchronous Slave mode enable

        When the SLVEN bit is set, the synchronous slave mode is enabled.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DIS_NSS
      bit_offset: 3
      bit_width: 1
      description: 'When the DIS_NSS bit is set, the NSS pin input is ignored.

        Note: When SPI slave mode is not supported, this bit is reserved and must
        be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADDM7
      bit_offset: 4
      bit_width: 1
      description: "7-bit Address Detection/4-bit Address Detection\nThis bit is for\
        \ selection between 4-bit address detection or 7-bit address detection.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)\n\
        Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit\
        \ and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDL
      bit_offset: 5
      bit_width: 1
      description: "LIN break detection length\nThis bit is for selection between\
        \ 11 bit or 10 bit break detection.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If LIN mode is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDIE
      bit_offset: 6
      bit_width: 1
      description: 'LIN break detection interrupt enable

        Break interrupt mask (break detection using break delimiter).

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBCL
      bit_offset: 8
      bit_width: 1
      description: "Last bit clock pulse\nThis bit is used to select whether the clock\
        \ pulse associated with the last data bit transmitted (MSB) has to be output\
        \ on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or\
        \ 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected\
        \ by the M bit in the USART_CR1 register.\nThis bit can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If synchronous mode is\
        \ not supported, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPHA
      bit_offset: 9
      bit_width: 1
      description: "Clock phase\nThis bit is used to select the phase of the clock\
        \ output on the SCLK pin in synchronous mode. It works in conjunction with\
        \ the CPOL bit to produce the desired clock/data relationship (see  and )\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If synchronous mode is not supported, this bit is reserved and must\
        \ be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CPOL
      bit_offset: 10
      bit_width: 1
      description: "Clock polarity\nThis bit enables the user to select the polarity\
        \ of the clock output on the SCLK pin in synchronous mode. It works in conjunction\
        \ with the CPHA bit to produce the desired clock/data relationship\nThis bit\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ If synchronous mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CLKEN
      bit_offset: 11
      bit_width: 1
      description: "Clock enable\nThis bit enables the user to enable the SCLK pin.\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If neither synchronous mode nor Smartcard mode is supported, this bit\
        \ is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode,\
        \ in order to provide correctly the SCLK clock to the smartcard, the steps\
        \ below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\n\
        UE = 1"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: STOP
      bit_offset: 12
      bit_width: 2
      description: "stop bits\nThese bits are used for programming the stop bits.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: LINEN
      bit_offset: 14
      bit_width: 1
      description: "LIN mode enable\nThis bit is set and cleared by software.\nThe\
        \ LIN mode enables the capability to send LIN synchronous breaks (13 low bits)\
        \ using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If the USART does not support LIN mode, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SWAP
      bit_offset: 15
      bit_width: 1
      description: "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis\
        \ bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\_\
        0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXINV
      bit_offset: 16
      bit_width: 1
      description: "RX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the RX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXINV
      bit_offset: 17
      bit_width: 1
      description: "TX pin active level inversion\nThis bit is set and cleared by\
        \ software.\nThis enables the use of an external inverter on the TX line.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DATAINV
      bit_offset: 18
      bit_width: 1
      description: "Binary data inversion\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: MSBFIRST
      bit_offset: 19
      bit_width: 1
      description: "Most significant bit first\nThis bit is set and cleared by software.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABREN
      bit_offset: 20
      bit_width: 1
      description: 'Auto baud rate enable

        This bit is set and cleared by software.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRMOD
      bit_offset: 21
      bit_width: 2
      description: "Auto baud rate mode\nThese bits are set and cleared by software.\n\
        This bitfield can only be written when ABREN = 0 or the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If DATAINV\xC2\_=\xC2\_1 and/or MSBFIRST\xC2\_\
        =\xC2\_1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\n\
        If the USART does not support the auto baud rate feature, this bit is reserved\
        \ and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
    - !Field
      name: RTOEN
      bit_offset: 23
      bit_width: 1
      description: 'Receiver timeout enable

        This bit is set and cleared by software.

        When this feature is enabled, the RTOF flag in the USART_ISR register is set
        if the RX line is idle (no reception) for the duration programmed in the RTOR
        (receiver timeout register).

        Note: If the USART does not support the Receiver timeout feature, this bit
        is reserved and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ADD
      bit_offset: 24
      bit_width: 8
      description: "Address of the USART node\nADD[7:4]:\nThese bits give the address\
        \ of the USART node or a character code to be recognized.\nThey are used to\
        \ wake up the MCU with 7-bit address mark detection in multiprocessor communication\
        \ during Mute mode or low-power mode. The MSB of the character sent by the\
        \ transmitter should be equal to 1. They can also be used for character detection\
        \ during normal reception, Mute mode inactive (for example, end of block detection\
        \ in ModBus protocol). In this case, the whole received character (8-bit)\
        \ is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits\
        \ can only be written when reception is disabled (RE = 0) or the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nADD[3:0]:\nThese bits give the address of\
        \ the USART node or a character code to be recognized.\nThey are used for\
        \ wakeup with address mark detection, in multiprocessor communication during\
        \ Mute mode or low-power mode.\nThese bits can only be written when reception\
        \ is disabled (RE = 0) or the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
  - !Register
    name: CR3
    addr: 0x8
    size_bits: 32
    description: Control register 3
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EIE
      bit_offset: 0
      bit_width: 1
      description: "Error interrupt enable\nError Interrupt Enable Bit is required\
        \ to enable interrupt generation in case of a framing error, overrun error\
        \ noise flag or SPI slave underrun error (FE\xC2\_=\xC2\_1 or ORE\xC2\_=\xC2\
        \_1 or NE\xC2\_=\xC2\_1 or UDR = 1 in the USART_ISR register)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IREN
      bit_offset: 1
      bit_width: 1
      description: "IrDA mode enable\nThis bit is set and cleared by software.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: If IrDA mode is not supported, this bit is reserved and must be kept\
        \ at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IRLP
      bit_offset: 2
      bit_width: 1
      description: "IrDA low-power\nThis bit is used for selecting between normal\
        \ and low-power IrDA modes\nThis bit can only be written when the USART is\
        \ disabled (UE\xC2\_=\xC2\_0).\nNote: If IrDA mode is not supported, this\
        \ bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HDSEL
      bit_offset: 3
      bit_width: 1
      description: "Half-duplex selection\nSelection of Single-wire Half-duplex mode\n\
        This bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NACK
      bit_offset: 4
      bit_width: 1
      description: "Smartcard NACK enable\nThis bitfield can only be written when\
        \ the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the USART does not support\
        \ Smartcard mode, this bit is reserved and must be kept at reset value. Refer\
        \ to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCEN
      bit_offset: 5
      bit_width: 1
      description: "Smartcard mode enable\nThis bit is used for enabling Smartcard\
        \ mode.\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nNote: If the USART does not support Smartcard mode, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DMAR
      bit_offset: 6
      bit_width: 1
      description: 'DMA enable receiver

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: DMAT
      bit_offset: 7
      bit_width: 1
      description: 'DMA enable transmitter

        This bit is set/reset by software'
      read_allowed: true
      write_allowed: true
      enum_values:
        1: B_0x1
        0: B_0x0
    - !Field
      name: RTSE
      bit_offset: 8
      bit_width: 1
      description: "RTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0).\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSE
      bit_offset: 9
      bit_width: 1
      description: "CTS enable\nThis bit can only be written when the USART is disabled\
        \ (UE\xC2\_=\xC2\_0)\nNote: If the hardware flow control feature is not supported,\
        \ this bit is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIE
      bit_offset: 10
      bit_width: 1
      description: 'CTS interrupt enable

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ONEBIT
      bit_offset: 11
      bit_width: 1
      description: "One sample bit method enable\nThis bit enables the user to select\
        \ the sample method. When the one sample bit method is selected the noise\
        \ detection flag (NE) is disabled.\nThis bit can only be written when the\
        \ USART is disabled (UE\xC2\_=\xC2\_0)."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: OVRDIS
      bit_offset: 12
      bit_width: 1
      description: "Overrun Disable\nThis bit is used to disable the receive overrun\
        \ detection.\nthe ORE flag is not set and the new received data overwrites\
        \ the previous content of the USART_RDR register. When FIFO mode is enabled,\
        \ the RXFIFO is bypassed and data is written directly in USART_RDR register.\
        \ Even when FIFO management is enabled, the RXNE flag is to be used.\nThis\
        \ bit can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\n\
        Note: This control bit enables checking the communication flow w/o reading\
        \ the data"
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DDRE
      bit_offset: 13
      bit_width: 1
      description: 'DMA Disable on Reception Error

        This bit can only be written when the USART is disabled (UE=0).

        Note: The reception errors are: parity error, framing error or noise error.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEM
      bit_offset: 14
      bit_width: 1
      description: "Driver enable mode\nThis bit enables the user to activate the\
        \ external transceiver control, through the DE signal.\nThis bit can only\
        \ be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the\
        \ Driver Enable feature is not supported, this bit is reserved and must be\
        \ kept at reset value. ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: DEP
      bit_offset: 15
      bit_width: 1
      description: "Driver enable polarity selection\nThis bit can only be written\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote: If the Driver Enable\
        \ feature is not supported, this bit is reserved and must be kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SCARCNT
      bit_offset: 17
      bit_width: 3
      description: "Smartcard auto-retry count\nThis bitfield specifies the number\
        \ of retries for transmission and reception in Smartcard mode.\nIn transmission\
        \ mode, it specifies the number of automatic retransmission retries, before\
        \ generating a transmission error (FE bit set).\nIn reception mode, it specifies\
        \ the number or erroneous reception trials, before generating a reception\
        \ error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only\
        \ when the USART is disabled (UE\xC2\_=\xC2\_0).\nWhen the USART is enabled\
        \ (UE\xC2\_=\xC2\_1), this bitfield may only be written to 0x0, in order to\
        \ stop retransmission.\nNote: If Smartcard mode is not supported, this bit\
        \ is reserved and must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
    - !Field
      name: WUS
      bit_offset: 20
      bit_width: 2
      description: "Wakeup from low-power mode interrupt flag selection\nThis bitfield\
        \ specifies the event which activates the WUF (Wakeup from low-power mode\
        \ flag).\nThis bitfield can only be written when the USART is disabled (UE\xC2\
        \_=\xC2\_0).\nIf the USART does not support the wakeup from Stop feature,\
        \ this bit is reserved and must be kept at reset value. Refer to page\xC2\_\
        835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        2: B_0x2
        3: B_0x3
    - !Field
      name: WUFIE
      bit_offset: 22
      bit_width: 1
      description: "Wakeup from low-power mode interrupt enable\nThis bit is set and\
        \ cleared by software.\nNote: WUFIE must be set before entering in low-power\
        \ mode.\nIf the USART does not support the wakeup from Stop feature, this\
        \ bit is reserved and must be kept at reset value. Refer to page\xC2\_835."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTIE
      bit_offset: 23
      bit_width: 1
      description: 'TXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGTIE
      bit_offset: 24
      bit_width: 1
      description: 'Transmission Complete before guard time, interrupt enable

        This bit is set and cleared by software.

        Note: If the USART does not support the Smartcard mode, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFTCFG
      bit_offset: 25
      bit_width: 3
      description: 'Receive FIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
    - !Field
      name: RXFTIE
      bit_offset: 28
      bit_width: 1
      description: 'RXFIFO threshold interrupt enable

        This bit is set and cleared by software.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFTCFG
      bit_offset: 29
      bit_width: 3
      description: 'TXFIFO threshold configuration

        Remaining combinations: Reserved'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
  - !Register
    name: BRR
    addr: 0xc
    size_bits: 32
    description: Baud rate register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: BRR
      bit_offset: 0
      bit_width: 16
      description: USART baud rate
      read_allowed: true
      write_allowed: true
  - !Register
    name: GTPR
    addr: 0x10
    size_bits: 32
    description: "Guard time and prescaler\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PSC
      bit_offset: 0
      bit_width: 8
      description: "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0]\
        \ = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler\
        \ for dividing the USART source clock to achieve the low-power frequency:\
        \ the source clock is divided by the value given in the register (8 significant\
        \ bits):\nIn Smartcard mode:\nPSC[4:0]\xC2\_=\xC2\_Prescaler value\nPSC[4:0]\
        \ is used to program the prescaler for dividing the USART source clock to\
        \ provide the Smartcard clock. The value given in the register (5 significant\
        \ bits) is multiplied by 2 to give the division factor of the source clock\
        \ frequency:\n...\n0010\xC2\_0000: Divides the source clock by 32 (IrDA mode)\n\
        ...\n1111\xC2\_1111: Divides the source clock by 255 (IrDA mode)\nThis bitfield\
        \ can only be written when the USART is disabled (UE\xC2\_=\xC2\_0).\nNote:\
        \ Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield\
        \ is reserved and forced by hardware to '0\xE2\x80\x99 when the Smartcard\
        \ and IrDA modes are not supported. Refer to ."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        31: B_0x1F
    - !Field
      name: GT
      bit_offset: 8
      bit_width: 8
      description: "Guard time value\nThis bitfield is used to program the Guard time\
        \ value in terms of number of baud clock periods.\nThis is used in Smartcard\
        \ mode. The Transmission Complete flag is set after this guard time value.\n\
        This bitfield can only be written when the USART is disabled (UE\xC2\_=\xC2\
        \_0).\nNote: If Smartcard mode is not supported, this bit is reserved and\
        \ must be kept at reset value. Refer to ."
      read_allowed: true
      write_allowed: true
  - !Register
    name: RTOR
    addr: 0x14
    size_bits: 32
    description: Receiver timeout register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: RTO
      bit_offset: 0
      bit_width: 24
      description: Receiver timeout value
    - !Field
      name: BLEN
      bit_offset: 24
      bit_width: 8
      description: Block Length
  - !Register
    name: RQR
    addr: 0x18
    size_bits: 32
    description: Request register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: ABRRQ
      bit_offset: 0
      bit_width: 1
      description: 'Auto baud rate request

        Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an
        automatic baud rate measurement on the next received data frame.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: SBKRQ
      bit_offset: 1
      bit_width: 1
      description: 'Send break request

        Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the
        line, as soon as the transmit machine is available.

        Note: When the application needs to send the break character following all
        previously inserted data, including the ones not yet transmitted, the software
        should wait for the TXE flag assertion before setting the SBKRQ bit.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: MMRQ
      bit_offset: 2
      bit_width: 1
      description: 'Mute mode request

        Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RXFRQ
      bit_offset: 3
      bit_width: 1
      description: 'Receive data flush request

        Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit
        RXFNE.

        This enables to discard the received data without reading them, and avoid
        an overrun condition.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFRQ
      bit_offset: 4
      bit_width: 1
      description: "Transmit data flush request\nWhen FIFO mode is disabled, writing\
        \ '1\xE2\x80\x99 to this bit sets the TXE flag. This enables to discard the\
        \ transmit data. This bit must be used only in Smartcard mode, when data have\
        \ not been sent due to errors (NACK) and the FE flag is active in the USART_ISR\
        \ register. If the USART does not support Smartcard mode, this bit is reserved\
        \ and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set\
        \ to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit\
        \ 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in\
        \ both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset\
        \ during the flush request until TxFIFO is empty in order to ensure that no\
        \ data are written in the data register."
      read_allowed: false
      write_allowed: true
  - !Register
    name: ISR_FIFO_ENABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0x8000c0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.

        Note: This error is associated with the character in the USART_RDR.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register.\n\
        Note: This error is associated with the character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXFNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861).\nThis error is associated with the\
        \ character in the USART_RDR."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXFF = 1. It is cleared by a software, writing\
        \ 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if\
        \ RXFNEIE\xC2\_=\xC2\_1 or EIE = 1 in the USART_CR1 register.\nNote: When\
        \ this bit is set, the USART_RDR register content is not lost but the shift\
        \ register is overwritten. An interrupt is generated if the ORE flag is set\
        \ during multi buffer communication if the EIE bit is set.\nThis bit is permanently\
        \ forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXFNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFNE
      bit_offset: 5
      bit_width: 1
      description: "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO\
        \ is not empty, meaning that data can be read from the USART_RDR register.\
        \ Every read operation from the USART_RDR frees a location in the RXFIFO.\n\
        RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared\
        \ by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated\
        \ if RXFNEIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXFE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is immediately\
        \ set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFNF
      bit_offset: 7
      bit_width: 1
      description: 'TXFIFO not full

        TXFNF is set by hardware when TXFIFO is not full meaning that data can be
        written in the USART_TDR. Every write operation to the USART_TDR places the
        data in the TXFIFO. This flag remains set until the TXFIFO is full. When the
        TXFIFO is full, this flag is cleared indicating that data can not be written
        into the USART_TDR.

        An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.

        Note: The TXFNF is kept reset during the flush request until TXFIFO is empty.
        After sending the flush request (by setting TXFRQ bit), the flag TXFNF should
        be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same
        time).

        This bit is used during single buffer transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXFNE and FE are also set in this case)\nIt\
        \ is cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TXFE
      bit_offset: 23
      bit_width: 1
      description: "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty.\
        \ When the TXFIFO contains at least one data, this flag is cleared. The TXFE\
        \ flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR\
        \ register.\nAn interrupt is generated if the TXFEIE bit \xC2\_=\xC2\_1 (bit\
        \ 30) in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFF
      bit_offset: 24
      bit_width: 1
      description: "RXFIFO full\nThis bit is set by hardware when the number of received\
        \ data corresponds to RXFIFO\xC2\_size\xC2\_+\xC2\_1 (RXFIFO full + 1 data\
        \ in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit\
        \ \xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXFT
      bit_offset: 26
      bit_width: 1
      description: "RXFIFO threshold flag\nThis bit is set by hardware when the threshold\
        \ programmed in RXFTCFG in USART_CR3 register is reached. This means that\
        \ there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR\
        \ register. An interrupt is generated if the RXFTIE bit \xC2\_=\xC2\_1 (bit\
        \ 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured\
        \ to '101\xE2\x80\x99, RXFT flag is set if 16 data are available i.e. 15 data\
        \ in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received\
        \ data does not cause an overrun error. The overrun error occurs after receiving\
        \ the 18th data."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXFT
      bit_offset: 27
      bit_width: 1
      description: "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO\
        \ reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the\
        \ TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the\
        \ TXFTIE bit \xC2\_=\xC2\_1 (bit 31) in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ISR_FIFO_DISABLED
    addr: 0x1c
    size_bits: 32
    description: "Interrupt & status\n          register"
    read_allowed: true
    write_allowed: false
    reset_value: 0xc0
    fields:
    - !Field
      name: PE
      bit_offset: 0
      bit_width: 1
      description: 'Parity error

        This bit is set by hardware when a parity error occurs in receiver mode. It
        is cleared by software, writing 1 to the PECF in the USART_ICR register.

        An interrupt is generated if PEIE = 1 in the USART_CR1 register.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: FE
      bit_offset: 1
      bit_width: 1
      description: "Framing error\nThis bit is set by hardware when a de-synchronization,\
        \ excessive noise or a break character is detected. It is cleared by software,\
        \ writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting\
        \ data in Smartcard mode, this bit is set when the maximum number of transmit\
        \ attempts is reached without success (the card NACKs the data frame).\nAn\
        \ interrupt is generated if EIE\xC2\_=\xC2\_1 in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: NE
      bit_offset: 2
      bit_width: 1
      description: "Noise detection flag\nThis bit is set by hardware when noise is\
        \ detected on a received frame. It is cleared by software, writing 1 to the\
        \ NECF bit in the USART_ICR register.\nNote: This bit does not generate an\
        \ interrupt as it appears at the same time as the RXNE bit which itself generates\
        \ an interrupt. An interrupt is generated when the NE flag is set during multi\
        \ buffer communication if the EIE bit is set.\nWhen the line is noise-free,\
        \ the NE flag can be disabled by programming the ONEBIT bit to 1 to increase\
        \ the USART tolerance to deviations (Refer to Tolerance of the USART receiver\
        \ to clock deviation on page\xC2\_861)."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ORE
      bit_offset: 3
      bit_width: 1
      description: "Overrun error\nThis bit is set by hardware when the data currently\
        \ being received in the shift register is\nready to be transferred into the\
        \ USART_RDR register while RXNE\xC2\_=\xC2\_1. It is cleared by a software,\
        \ writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated\
        \ if RXNEIE\xC2\_=\xC2\_1 or EIE \xC2\_=\xC2\_ 1 in the USART_CR1 register.\n\
        Note: When this bit is set, the USART_RDR register content is not lost but\
        \ the shift register is overwritten. An interrupt is generated if the ORE\
        \ flag is set during multi buffer communication if the EIE bit is set.\nThis\
        \ bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS\
        \ is set in the USART_CR3 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: IDLE
      bit_offset: 4
      bit_width: 1
      description: "Idle line detected\nThis bit is set by hardware when an Idle Line\
        \ is detected. An interrupt is generated if IDLEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR\
        \ register.\nNote: The IDLE bit is not set again until the RXNE bit has been\
        \ set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\xC2\_=\xC2\
        \_1), IDLE is set if the USART is not mute (RWU\xC2\_=\xC2\_0), whatever the\
        \ Mute mode selected by the WAKE bit. If RWU\xC2\_=\xC2\_1, IDLE is not set."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RXNE
      bit_offset: 5
      bit_width: 1
      description: "Read data register not empty\nRXNE bit is set by hardware when\
        \ the content of the USART_RDR shift register has been transferred to the\
        \ USART_RDR register. It is cleared by reading from the USART_RDR register.\
        \ The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR\
        \ register.\nAn interrupt is generated if RXNEIE\xC2\_=\xC2\_1 in the USART_CR1\
        \ register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TC
      bit_offset: 6
      bit_width: 1
      description: "Transmission complete\nThis bit indicates that the last data written\
        \ in the USART_TDR has been transmitted out of the shift register.\nIt is\
        \ set by hardware when the transmission of a frame containing data is complete\
        \ and when TXE is set.\nAn interrupt is generated if TCIE\xC2\_=\xC2\_1 in\
        \ the USART_CR1 register.\nTC bit is is cleared by software, by writing 1\
        \ to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\n\
        Note: If TE bit is reset and no transmission is on going, the TC bit is set\
        \ immediately."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: TXE
      bit_offset: 7
      bit_width: 1
      description: "Transmit data register empty\nTXE is set by hardware when the\
        \ content of the USART_TDR register has been transferred into the shift register.\
        \ It is cleared by writing to the USART_TDR register. The TXE flag can also\
        \ be set by writing 1 to the TXFRQ in the USART_RQR register, in order to\
        \ discard the data (only in Smartcard T\xC2\_=\xC2\_0 mode, in case of transmission\
        \ failure).\nAn interrupt is generated if the TXEIE bit \xC2\_=\xC2\_1 in\
        \ the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: LBDF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection flag

        This bit is set by hardware when the LIN break is detected. It is cleared
        by software, by writing 1 to the LBDCF in the USART_ICR.

        An interrupt is generated if LBDIE = 1 in the USART_CR2 register.

        Note: If the USART does not support LIN mode, this bit is reserved and kept
        at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTSIF
      bit_offset: 9
      bit_width: 1
      description: "CTS interrupt flag\nThis bit is set by hardware when the nCTS\
        \ input toggles, if the CTSE bit is set. It is cleared by software, by writing\
        \ 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated\
        \ if CTSIE\xC2\_=\xC2\_1 in the USART_CR3 register.\nNote: If the hardware\
        \ flow control feature is not supported, this bit is reserved and kept at\
        \ reset value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CTS
      bit_offset: 10
      bit_width: 1
      description: 'CTS flag

        This bit is set/reset by hardware. It is an inverted copy of the status of
        the nCTS input pin.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and kept at reset value.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RTOF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout\nThis bit is set by hardware when the timeout\
        \ value, programmed in the RTOR register has lapsed, without any communication.\
        \ It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\n\
        An interrupt is generated if RTOIE\xC2\_=\xC2\_1 in the USART_CR2 register.\n\
        In Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote:\
        \ If a time equal to the value programmed in RTOR register separates 2 characters,\
        \ RTOF is not set. If this time exceeds this value + 2 sample times (2/16\
        \ or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter\
        \ counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has\
        \ already elapsed when RE is set, then RTOF is set.\nIf the USART does not\
        \ support the Receiver timeout feature, this bit is reserved and kept at reset\
        \ value."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: EOBF
      bit_offset: 12
      bit_width: 1
      description: "End of block flag\nThis bit is set by hardware when a complete\
        \ block has been received (for example T\xC2\_=\xC2\_1 Smartcard mode). The\
        \ detection is done when the number of received bytes (from the start of the\
        \ block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt\
        \ is generated if the EOBIE\xC2\_=\xC2\_1 in the USART_CR2 register.\nIt is\
        \ cleared by software, writing 1 to the EOBCF in the USART_ICR register.\n\
        Note: If Smartcard mode is not supported, this bit is reserved and kept at\
        \ reset value. Refer to ."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: UDR
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun error flag

        In slave transmission mode, this flag is set when the first clock pulse for
        data transmission appears while the software has not yet loaded any value
        into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.

        Note: If the USART does not support the SPI slave mode, this bit is reserved
        and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: ABRE
      bit_offset: 14
      bit_width: 1
      description: 'Auto baud rate error

        This bit is set by hardware if the baud rate measurement failed (baud rate
        out of range or character comparison failed)

        It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3
        register.

        Note: If the USART does not support the auto baud rate feature, this bit is
        reserved and kept at reset value.'
      read_allowed: true
      write_allowed: false
    - !Field
      name: ABRF
      bit_offset: 15
      bit_width: 1
      description: "Auto baud rate flag\nThis bit is set by hardware when the automatic\
        \ baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE\
        \ = 1) or when the auto baud rate operation was completed without success\
        \ (ABRE\xC2\_=\xC2\_1) (ABRE, RXNE and FE are also set in this case)\nIt is\
        \ cleared by software, in order to request a new auto baud rate detection,\
        \ by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART\
        \ does not support the auto baud rate feature, this bit is reserved and kept\
        \ at reset value."
      read_allowed: true
      write_allowed: false
    - !Field
      name: BUSY
      bit_offset: 16
      bit_width: 1
      description: 'Busy flag

        This bit is set and reset by hardware. It is active when a communication is
        ongoing on the RX line (successful start bit detected). It is reset at the
        end of the reception (successful or not).'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: CMF
      bit_offset: 17
      bit_width: 1
      description: "Character match flag\nThis bit is set by hardware, when a the\
        \ character defined by ADD[7:0] is received. It is cleared by software, writing\
        \ 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\xC2\
        \_=\xC2\_1in the USART_CR1 register."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: SBKF
      bit_offset: 18
      bit_width: 1
      description: 'Send break flag

        This bit indicates that a send break character was requested. It is set by
        software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically
        reset by hardware during the stop bit of break transmission.'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: RWU
      bit_offset: 19
      bit_width: 1
      description: 'Receiver wakeup from Mute mode

        This bit indicates if the USART is in Mute mode. It is cleared/set by hardware
        when a wakeup/mute sequence is recognized. The Mute mode control sequence
        (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.

        When wakeup on IDLE mode is selected, this bit can only be set by software,
        writing 1 to the MMRQ bit in the USART_RQR register.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: WUF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode flag\nThis bit is set by hardware,\
        \ when a wakeup event is detected. The event is defined by the WUS bitfield.\
        \ It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\n\
        An interrupt is generated if WUFIE\xC2\_=\xC2\_1 in the USART_CR3 register.\n\
        Note: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not\
        \ support the wakeup from Stop feature, this bit is reserved and kept at reset\
        \ value. Refer to ."
      read_allowed: true
      write_allowed: false
    - !Field
      name: TEACK
      bit_offset: 21
      bit_width: 1
      description: "Transmit enable acknowledge flag\nThis bit is set/reset by hardware,\
        \ when the Transmit Enable value is taken into account by the USART.\nIt can\
        \ be used when an idle frame request is generated by writing TE\xC2\_=\xC2\
        \_0, followed by TE\xC2\_=\xC2\_1 in the USART_CR1 register, in order to respect\
        \ the TE\xC2\_=\xC2\_0 minimum period."
      read_allowed: true
      write_allowed: false
    - !Field
      name: REACK
      bit_offset: 22
      bit_width: 1
      description: 'Receive enable acknowledge flag

        This bit is set/reset by hardware, when the Receive Enable value is taken
        into account by the USART.

        It can be used to verify that the USART is ready for reception before entering
        low-power mode.

        Note: If the USART does not support the wakeup from Stop feature, this bit
        is reserved and kept at reset value. Refer to .'
      read_allowed: true
      write_allowed: false
    - !Field
      name: TCBGT
      bit_offset: 25
      bit_width: 1
      description: "Transmission complete before guard time flag\nThis bit is set\
        \ when the last data written in the USART_TDR has been transmitted correctly\
        \ out of the shift register.\nIt is set by hardware in Smartcard mode, if\
        \ the transmission of a frame containing data is complete and if the smartcard\
        \ did not send back any NACK. An interrupt is generated if TCBGTIE\xC2\_=\xC2\
        \_1 in the USART_CR3 register.\nThis bit is cleared by software, by writing\
        \ 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR\
        \ register.\nNote: If the USART does not support the Smartcard mode, this\
        \ bit is reserved and kept at reset value. If the USART supports the Smartcard\
        \ mode and the Smartcard mode is enabled, the TCBGT reset value is '1\xE2\x80\
        \x99. Refer to on page\xC2\_835."
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: ICR
    addr: 0x20
    size_bits: 32
    description: Interrupt flag clear register
    read_allowed: false
    write_allowed: true
    fields:
    - !Field
      name: PECF
      bit_offset: 0
      bit_width: 1
      description: 'Parity error clear flag

        Writing 1 to this bit clears the PE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: FECF
      bit_offset: 1
      bit_width: 1
      description: 'Framing error clear flag

        Writing 1 to this bit clears the FE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: NECF
      bit_offset: 2
      bit_width: 1
      description: 'Noise detected clear flag

        Writing 1 to this bit clears the NE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: ORECF
      bit_offset: 3
      bit_width: 1
      description: 'Overrun error clear flag

        Writing 1 to this bit clears the ORE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: IDLECF
      bit_offset: 4
      bit_width: 1
      description: 'Idle line detected clear flag

        Writing 1 to this bit clears the IDLE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TXFECF
      bit_offset: 5
      bit_width: 1
      description: 'TXFIFO empty clear flag

        Writing 1 to this bit clears the TXFE flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCCF
      bit_offset: 6
      bit_width: 1
      description: 'Transmission complete clear flag

        Writing 1 to this bit clears the TC flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: TCBGTCF
      bit_offset: 7
      bit_width: 1
      description: 'Transmission complete before Guard time clear flag

        Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: LBDCF
      bit_offset: 8
      bit_width: 1
      description: 'LIN break detection clear flag

        Writing 1 to this bit clears the LBDF flag in the USART_ISR register.

        Note: If LIN mode is not supported, this bit is reserved and must be kept
        at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CTSCF
      bit_offset: 9
      bit_width: 1
      description: 'CTS clear flag

        Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.

        Note: If the hardware flow control feature is not supported, this bit is reserved
        and must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: RTOCF
      bit_offset: 11
      bit_width: 1
      description: "Receiver timeout clear flag\nWriting 1 to this bit clears the\
        \ RTOF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the Receiver timeout feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
    - !Field
      name: EOBCF
      bit_offset: 12
      bit_width: 1
      description: 'End of block clear flag

        Writing 1 to this bit clears the EOBF flag in the USART_ISR register.

        Note: If the USART does not support Smartcard mode, this bit is reserved and
        must be kept at reset value. Refer to .'
      read_allowed: false
      write_allowed: true
    - !Field
      name: UDRCF
      bit_offset: 13
      bit_width: 1
      description: 'SPI slave underrun clear flag

        Writing 1 to this bit clears the UDRF flag in the USART_ISR register.

        Note: If the USART does not support SPI slave mode, this bit is reserved and
        must be kept at reset value. Refer to'
      read_allowed: false
      write_allowed: true
    - !Field
      name: CMCF
      bit_offset: 17
      bit_width: 1
      description: 'Character match clear flag

        Writing 1 to this bit clears the CMF flag in the USART_ISR register.'
      read_allowed: false
      write_allowed: true
    - !Field
      name: WUCF
      bit_offset: 20
      bit_width: 1
      description: "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears\
        \ the WUF flag in the USART_ISR register.\nNote: If the USART does not support\
        \ the wakeup from Stop feature, this bit is reserved and must be kept at reset\
        \ value. Refer to page\xC2\_835."
      read_allowed: false
      write_allowed: true
  - !Register
    name: RDR
    addr: 0x24
    size_bits: 32
    description: Receive data register
    read_allowed: true
    write_allowed: false
    fields:
    - !Field
      name: RDR
      bit_offset: 0
      bit_width: 9
      description: Receive data value
  - !Register
    name: TDR
    addr: 0x28
    size_bits: 32
    description: Transmit data register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TDR
      bit_offset: 0
      bit_width: 9
      description: Transmit data value
  - !Register
    name: PRESC
    addr: 0x2c
    size_bits: 32
    description: Prescaler register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: PRESCALER
      bit_offset: 0
      bit_width: 4
      description: 'Clock prescaler

        The USART input clock can be divided by a prescaler factor:

        Remaining combinations: Reserved

        Note: When PRESCALER is programmed with a value different of the allowed ones,
        programmed prescaler value is 1011 i.e. input clock divided by 256.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
        8: B_0x8
        9: B_0x9
        10: B_0xA
        11: B_0xB
- !Module
  name: VREFBUF
  description: System configuration controller
  base_addr: 0x40010030
  size: 0x400
  registers:
  - !Register
    name: VREFBUF_CSR
    addr: 0x0
    size_bits: 32
    description: "VREFBUF control and status\n          register"
    reset_value: 0x2
    fields:
    - !Field
      name: ENVR
      bit_offset: 0
      bit_width: 1
      description: 'Voltage reference buffer mode enable

        This bit is used to enable the voltage reference buffer mode.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: HIZ
      bit_offset: 1
      bit_width: 1
      description: 'High impedance mode

        This bit controls the analog switch to connect or not the VREF+ pin.

        Refer to  for the mode descriptions depending on ENVR bit configuration.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: VRS
      bit_offset: 2
      bit_width: 1
      description: 'Voltage reference scale

        This bit selects the value generated by the voltage reference buffer.'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
    - !Field
      name: VRR
      bit_offset: 3
      bit_width: 1
      description: Voltage reference buffer ready
      read_allowed: true
      write_allowed: false
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: VREFBUF_CCR
    addr: 0x4
    size_bits: 32
    description: "VREFBUF calibration control\n          register"
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: TRIM
      bit_offset: 0
      bit_width: 6
      description: 'Trimming code

        These bits are automatically initialized after reset with the trimming value
        stored in the Flash memory during the production test. Writing into these
        bits allows the tuning of the internal reference buffer voltage.'
      read_allowed: true
      write_allowed: true
- !Module
  name: WWDG
  description: System window watchdog
  base_addr: 0x40002c00
  size: 0x400
  registers:
  - !Register
    name: WWDG_CR
    addr: 0x0
    size_bits: 32
    description: Control register
    read_allowed: true
    write_allowed: true
    reset_value: 0x7f
    fields:
    - !Field
      name: T
      bit_offset: 0
      bit_width: 7
      description: '7-bit counter (MSB to LSB)

        These bits contain the value of the watchdog counter, decremented every

        (4096 x 2WDGTB[1:0]) PCLK cycles. A reset is produced when it is decremented
        from 0x40 to 0x3F (T6 becomes cleared).'
      read_allowed: true
      write_allowed: true
    - !Field
      name: WDGA
      bit_offset: 7
      bit_width: 1
      description: "Activation bit\nThis bit is set by software and only cleared by\
        \ hardware after a reset. When WDGA\xC2\_=\xC2\_1, the watchdog can generate\
        \ a reset."
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
  - !Register
    name: WWDG_CFR
    addr: 0x4
    size_bits: 32
    description: Configuration register
    read_allowed: true
    write_allowed: true
    reset_value: 0x7f
    fields:
    - !Field
      name: W
      bit_offset: 0
      bit_width: 7
      description: '7-bit window value

        These bits contain the window value to be compared with the down-counter.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: EWI
      bit_offset: 9
      bit_width: 1
      description: 'Early wakeup interrupt

        When set, an interrupt occurs whenever the counter reaches the value 0x40.
        This interrupt is only cleared by hardware after a reset.'
      read_allowed: true
      write_allowed: true
    - !Field
      name: WDGTB
      bit_offset: 11
      bit_width: 3
      description: 'Timer base

        The timebase of the prescaler can be modified as follows:'
      read_allowed: true
      write_allowed: true
      enum_values:
        0: B_0x0
        1: B_0x1
        2: B_0x2
        3: B_0x3
        4: B_0x4
        5: B_0x5
        6: B_0x6
        7: B_0x7
  - !Register
    name: WWDG_SR
    addr: 0x8
    size_bits: 32
    description: Status register
    read_allowed: true
    write_allowed: true
    fields:
    - !Field
      name: EWIF
      bit_offset: 0
      bit_width: 1
      description: "Early wakeup interrupt\n              flag"
